
RT-thread_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  0800d000  0800d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  0800d800  0800d800  0000d800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  08011f48  08011f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rti_fn.0.end 00000004  08012958  08012958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rti_fn.1.end 00000004  0801295c  0801295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08012960  08012960  000140a0  2**0
                  CONTENTS
  6 .ARM          00000008  08012960  08012960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08012968  08012968  000140a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  08012968  08012968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  08012970  08012970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000a0  20004000  08012978  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003bcc  200040a0  08012a18  000140a0  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e341  00000000  00000000  000140d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000485a  00000000  00000000  00032411  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007c92  00000000  00000000  00036c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000a08  00000000  00000000  0003e900  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000968  00000000  00000000  0003f308  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000050be  00000000  00000000  0003fc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000a576  00000000  00000000  00044d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00085ae9  00000000  00000000  0004f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007e  00000000  00000000  000d4d8d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001bd8  00000000  00000000  000d4e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800d800 <__do_global_dtors_aux>:
 800d800:	b510      	push	{r4, lr}
 800d802:	4c05      	ldr	r4, [pc, #20]	; (800d818 <__do_global_dtors_aux+0x18>)
 800d804:	7823      	ldrb	r3, [r4, #0]
 800d806:	b933      	cbnz	r3, 800d816 <__do_global_dtors_aux+0x16>
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <__do_global_dtors_aux+0x1c>)
 800d80a:	b113      	cbz	r3, 800d812 <__do_global_dtors_aux+0x12>
 800d80c:	4804      	ldr	r0, [pc, #16]	; (800d820 <__do_global_dtors_aux+0x20>)
 800d80e:	f3af 8000 	nop.w
 800d812:	2301      	movs	r3, #1
 800d814:	7023      	strb	r3, [r4, #0]
 800d816:	bd10      	pop	{r4, pc}
 800d818:	200040a0 	.word	0x200040a0
 800d81c:	00000000 	.word	0x00000000
 800d820:	08011f2c 	.word	0x08011f2c

0800d824 <frame_dummy>:
 800d824:	b508      	push	{r3, lr}
 800d826:	4b03      	ldr	r3, [pc, #12]	; (800d834 <frame_dummy+0x10>)
 800d828:	b11b      	cbz	r3, 800d832 <frame_dummy+0xe>
 800d82a:	4903      	ldr	r1, [pc, #12]	; (800d838 <frame_dummy+0x14>)
 800d82c:	4803      	ldr	r0, [pc, #12]	; (800d83c <frame_dummy+0x18>)
 800d82e:	f3af 8000 	nop.w
 800d832:	bd08      	pop	{r3, pc}
 800d834:	00000000 	.word	0x00000000
 800d838:	200040a4 	.word	0x200040a4
 800d83c:	08011f2c 	.word	0x08011f2c

0800d840 <rt_hw_interrupt_disable>:

.global rt_hw_interrupt_disable
.type rt_hw_interrupt_disable, %function
//关中断
rt_hw_interrupt_disable:
    MRS     r0, PRIMASK
 800d840:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 800d844:	b672      	cpsid	i
    BX      LR
 800d846:	4770      	bx	lr

0800d848 <rt_hw_interrupt_enable>:
 */
.global rt_hw_interrupt_enable
.type rt_hw_interrupt_enable, %function
//开中断
rt_hw_interrupt_enable:
    MSR     PRIMASK, r0
 800d848:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 800d84c:	4770      	bx	lr

0800d84e <rt_hw_context_switch>:
.type rt_hw_context_switch, %function
//上下文切换函数
rt_hw_context_switch_interrupt:
rt_hw_context_switch:
    //设置中断标志位rt_thread_switch_interrupt_flag为1
    LDR     r2, =rt_thread_switch_interrupt_flag   //加载rt_thread_switch_interrupt_flag的地址到r2
 800d84e:	4a44      	ldr	r2, [pc, #272]	; (800d960 <_update_done+0x10>)
    LDR     r3, [r2]                         //加载rt_thread_switch_interrupt_flag的值到r3
 800d850:	6813      	ldr	r3, [r2, #0]
    CMP     r3, #1                         //r3与1比较，相等则执行BEQ指令，否则不执行
 800d852:	2b01      	cmp	r3, #1
    BEQ     _reswitch
 800d854:	d004      	beq.n	800d860 <_reswitch>
    MOV     r3, #1                       //设置r3的值为1
 800d856:	f04f 0301 	mov.w	r3, #1
    STR     r3, [r2]                       //将r3的值存储到rt_thread_switch_interrupt_flag，即置1
 800d85a:	6013      	str	r3, [r2, #0]
    //设置rt_interrupt_from_thread的值
    LDR     r2, =rt_interrupt_from_thread   //加载rt_interrupt_from_thread的地址到r2
 800d85c:	4a41      	ldr	r2, [pc, #260]	; (800d964 <_update_done+0x14>)
    STR     r0, [r2]          //存储r0的值到rt_interrupt_from_thread，即上一个线程栈指针sp的指针
 800d85e:	6010      	str	r0, [r2, #0]

0800d860 <_reswitch>:

_reswitch:
    //设置rt_interrupt_to_thread的值
    LDR     r2, =rt_interrupt_to_thread     //加载rt_interrupt_to_thread的地址到r2
 800d860:	4a41      	ldr	r2, [pc, #260]	; (800d968 <_update_done+0x18>)
    STR     r1, [r2]      //存储r1的值到rt_interrupt_to_thread，即下一个线程栈指针sp的指针
 800d862:	6011      	str	r1, [r2, #0]
    //触发PendSV异常，实现上下文切换
LDR r0, =NVIC_INT_CTRL
 800d864:	4841      	ldr	r0, [pc, #260]	; (800d96c <_update_done+0x1c>)
    LDR r1, =NVIC_PENDSVSET
 800d866:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR r1, [r0]
 800d86a:	6001      	str	r1, [r0, #0]
    //子程序返回
    BX  LR
 800d86c:	4770      	bx	lr

0800d86e <PendSV_Handler>:
.global PendSV_Handler
.type PendSV_Handler, %function
PendSV_Handler:
    //关中断，保护上下文切换不被中断，MRS加载特殊功能寄存器的值到通用寄存器
    //中断屏蔽寄存器（PRIMASK）D31~D1位保留，只有D0位有意义，CPSID  i将D0位置1（关总中断）
    MRS r2, PRIMASK
 800d86e:	f3ef 8210 	mrs	r2, PRIMASK
    CPSID   I
 800d872:	b672      	cpsid	i
    //获取中断标志位判断是否为0
    LDR r0, =rt_thread_switch_interrupt_flag    //加载rt_thread_switch_interrupt_flag的地址到r0
 800d874:	483a      	ldr	r0, [pc, #232]	; (800d960 <_update_done+0x10>)
    LDR r1, [r0]                           //加载rt_thread_switch_interrupt_flag的值到r1
 800d876:	6801      	ldr	r1, [r0, #0]
    CBZ r1, pendsv_exit                    //判断r1是否为0，为0则跳转到pendsv_exit
 800d878:	b351      	cbz	r1, 800d8d0 <pendsv_exit>

    MOV r1, #0x00                       //r1不为0则清0
 800d87a:	f04f 0100 	mov.w	r1, #0
    STR r1, [r0]                        //将r1的值存储到rt_thread_switch_interrupt_flag，即清0
 800d87e:	6001      	str	r1, [r0, #0]
    //判断rt_interrupt_from_thread的值是否为0
    LDR r0, =rt_interrupt_from_thread    //加载rt_interrupt_from_thread的地址到r0
 800d880:	4838      	ldr	r0, [pc, #224]	; (800d964 <_update_done+0x14>)
    LDR r1, [r0]                      //加载rt_interrupt_from_thread的值到r1
 800d882:	6801      	ldr	r1, [r0, #0]
    CBZ r1, switch_to_thread          //第一次线程切换时rt_interrupt_from_thread肯定为0，
 800d884:	b191      	cbz	r1, 800d8ac <switch_to_thread>

    //上文保存
    //当进入PendSVC Handler时，上一个线程运行的环境即xPSR，PC（线程入口地址），R14，R12，
    //R3，R2，R1，R0（线程的形参），这些CPU寄存器的值会自动保存到线程的栈中，剩下的r4~r11需
    //要手动保存。
    MRS r1, psp                 //获取线程栈指针到r1
 800d886:	f3ef 8109 	mrs	r1, PSP
    
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    TST     lr, #0x10         //if(!EXC_RETURN[4])
 800d88a:	f01e 0f10 	tst.w	lr, #16
                              //检查扩展堆栈帧（通过检查该位来表示是否需要FPU寄存器组）
    VSTMDBEQ r1!, {d8 - d15}     //保存FPU寄存器s16~s31
 800d88e:	bf08      	it	eq
 800d890:	ed21 8b10 	vstmdbeq	r1!, {d8-d15}
#endif
    
    STMFD   r1!, {r4 - r11}      //将CPU寄存器r4~r11的值存储到r1指向的地址
 800d894:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
                                  //(每操作一次地址将递减一次)

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    MOV     r4, #0x00           /* flag = 0 */
 800d898:	f04f 0400 	mov.w	r4, #0
    TST     lr, #0x10           /* if(!EXC_RETURN[4]) */
 800d89c:	f01e 0f10 	tst.w	lr, #16
    MOVEQ   r4, #0x01           /* flag = 1 */
 800d8a0:	bf08      	it	eq
 800d8a2:	2401      	moveq	r4, #1
    STMFD   r1!, {r4}           /* push flag */
 800d8a4:	f841 4d04 	str.w	r4, [r1, #-4]!
#endif

    LDR r0, [r0]               //加载r0指向值到r0，即r0=rt_interrupt_from_thread
 800d8a8:	6800      	ldr	r0, [r0, #0]
    STR r1, [r0]                //将r1的值存储到r0，即更新线程栈sp
 800d8aa:	6001      	str	r1, [r0, #0]

0800d8ac <switch_to_thread>:

//上下文切换
switch_to_thread:
    LDR r1, =rt_interrupt_to_thread  //加载rt_interrupt_to_thread的地址到r1
 800d8ac:	492e      	ldr	r1, [pc, #184]	; (800d968 <_update_done+0x18>)
                                     // rt_interrupt_to_thread是一个全局变量，里面存的是线程栈指针SP的指针
    LDR r1, [r1]                  //加载rt_interrupt_to_thread的值到r1，即sp的指针
 800d8ae:	6809      	ldr	r1, [r1, #0]
    LDR r1, [r1]                //加载sp到r1
 800d8b0:	6809      	ldr	r1, [r1, #0]
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    LDMFD   r1!, {r3}           /* pop flag */
 800d8b2:	c908      	ldmia	r1!, {r3}
#endif

    LDMFD   r1!, {r4 - r11}          //将线程栈指针r1(操作之前先递减)指向的内容
 800d8b4:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
                                      //加载到CPU寄存器r4~r11

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    CMP     r3,  #0             /* if(flag_r3 != 0) */
 800d8b8:	2b00      	cmp	r3, #0
    VLDMIANE  r1!, {d8 - d15}   /* pop FPU register s16~s31 */
 800d8ba:	bf18      	it	ne
 800d8bc:	ecb1 8b10 	vldmiane	r1!, {d8-d15}
#endif

    MSR psp, r1                 //线程栈指针更新到PSP
 800d8c0:	f381 8809 	msr	PSP, r1

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    ORR     lr, lr, #0x10       /* lr |=  (1 << 4), clean FPCA. */
 800d8c4:	f04e 0e10 	orr.w	lr, lr, #16
    CMP     r3,  #0             /* if(flag_r3 != 0) */
 800d8c8:	2b00      	cmp	r3, #0
    BICNE   lr, lr, #0x10       /* lr &= ~(1 << 4), set FPCA. */
 800d8ca:	bf18      	it	ne
 800d8cc:	f02e 0e10 	bicne.w	lr, lr, #16

0800d8d0 <pendsv_exit>:
#endif

pendsv_exit:
    MSR PRIMASK, r2             //恢复中断
 800d8d0:	f382 8810 	msr	PRIMASK, r2
    ORR lr, lr, #0x04       //确保异常返回使用的栈指针是PSP，即LR寄存器的位2要为1
 800d8d4:	f04e 0e04 	orr.w	lr, lr, #4
                           //异常返回，这个时候栈中的剩下内容将会自动加载到CPU寄存器：xPSR，PC（线程入口地址），
                          //R14，R12，R3，R2，R1，R0（线程的形参），同时PSP的值也将更新，即指向线程栈的栈顶
    BX  lr
 800d8d8:	4770      	bx	lr

0800d8da <rt_hw_context_switch_to>:
 */
.global rt_hw_context_switch_to
.type rt_hw_context_switch_to, %function
rt_hw_context_switch_to:
    //（1）将下一个将要运行的线程的栈的sp的指针存放到rt_interrupt_to_thread
    LDR r1, =rt_interrupt_to_thread   //将rt_interrupt_to_thread的地址加载到r1
 800d8da:	4923      	ldr	r1, [pc, #140]	; (800d968 <_update_done+0x18>)
    STR r0, [r1]                    //将r0的值存储到rt_interrupt_to_thread
 800d8dc:	6008      	str	r0, [r1, #0]
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    //第一次线程启动，不需要FPU寄存器保存，强制清除CONTROL[2]标志。此时为堆栈是MSP，也就是复位后进入第一个线程之前的状态
    MRS     r2, CONTROL         /* read */
 800d8de:	f3ef 8214 	mrs	r2, CONTROL
    BIC     r2, #0x04           /* modify */
 800d8e2:	f022 0204 	bic.w	r2, r2, #4
    MSR     CONTROL, r2         /* write-back */
 800d8e6:	f382 8814 	msr	CONTROL, r2
#endif
    //（2）设置rt_interrupt_from_thread的值为0，表示启动第一次线程切换
    LDR r1, =rt_interrupt_from_thread  //将rt_interrupt_from_thread的地址加载到r1
 800d8ea:	491e      	ldr	r1, [pc, #120]	; (800d964 <_update_done+0x14>)
    MOV r0, #0x0                   //配置r0等于0
 800d8ec:	f04f 0000 	mov.w	r0, #0
    STR r0, [r1]                     //将r0的值存储到rt_interrupt_from_thread
 800d8f0:	6008      	str	r0, [r1, #0]
    //（3）设置中断标志位rt_thread_switch_interrupt_flag的值为1
    LDR     r1, =rt_thread_switch_interrupt_flag   //将rt_thread_switch_interrupt_flag的地址加载到r1
 800d8f2:	491b      	ldr	r1, [pc, #108]	; (800d960 <_update_done+0x10>)
    MOV     r0, #1                            //配置r0等于1
 800d8f4:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r1]                           //将r0的值存储到rt_thread_switch_interrupt_flag
 800d8f8:	6008      	str	r0, [r1, #0]
    //（4）设置 PendSV 异常的优先级
    LDR r0, =NVIC_SYSPRI2     //将系统优先级寄存器2地址加载到r0
 800d8fa:	481d      	ldr	r0, [pc, #116]	; (800d970 <_update_done+0x20>)
    LDR r1, =NVIC_PENDSV_PRI   //将PendSV优先级值 (lowest)加载到r1
 800d8fc:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    LDR.W   r2, [r0,#0x00]       //读，（LDR.W始终生成32位指令），将r0保存的系统优先级寄存器2地址加载到r2
 800d900:	f8d0 2000 	ldr.w	r2, [r0]
    ORR     r1,r1,r2             //改，将r1与r2进行“或”运算并将值返回到r1
 800d904:	ea41 0102 	orr.w	r1, r1, r2
    STR     r1, [r0]             //写，将r1值存储到系统优先级寄存器2，即更新设置PendSV优先级值为最低
 800d908:	6001      	str	r1, [r0, #0]
    //（5）触发 PendSV异常 (产生上下文切换)
    LDR r0, =NVIC_INT_CTRL    //将中断控制状态寄存器地址加载到r0
 800d90a:	4818      	ldr	r0, [pc, #96]	; (800d96c <_update_done+0x1c>)
    LDR r1, =NVIC_PENDSVSET   //将能触发PendSV异常的值加载到r1
 800d90c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR r1, [r0]              //更新中断控制状态寄存器，触发PendSV异常
 800d910:	6001      	str	r1, [r0, #0]
    //（6）恢复主堆栈指针MSP
    LDR     r0, =SCB_VTOR   //将中断向量表偏移寄存器地址加载到r0，实际通过中断向量表定位堆栈地址
 800d912:	4818      	ldr	r0, [pc, #96]	; (800d974 <_update_done+0x24>)
    LDR     r0, [r0]
 800d914:	6800      	ldr	r0, [r0, #0]
    LDR     r0, [r0]
 800d916:	6800      	ldr	r0, [r0, #0]
    NOP
 800d918:	bf00      	nop
    MSR     msp, r0        //恢复主堆栈指针MSP，将堆栈地址保存到MSP中
 800d91a:	f380 8808 	msr	MSP, r0
    //（7）使能中断，pendSV中断开始执行，完成首个线程切换
    CPSIE   F
 800d91e:	b661      	cpsie	f
    CPSIE   I
 800d920:	b662      	cpsie	i

0800d922 <rt_hw_interrupt_thread_switch>:

/* compatible with old version */
.global rt_hw_interrupt_thread_switch
.type rt_hw_interrupt_thread_switch, %function
rt_hw_interrupt_thread_switch:
    BX  lr
 800d922:	4770      	bx	lr
    NOP
 800d924:	bf00      	nop

0800d926 <HardFault_Handler>:

.global HardFault_Handler
.type HardFault_Handler, %function
HardFault_Handler:
    /* get current context */
    MRS     r0, msp                 /* get fault context from handler. */
 800d926:	f3ef 8008 	mrs	r0, MSP
    TST     lr, #0x04               /* if(!EXC_RETURN[2]) */
 800d92a:	f01e 0f04 	tst.w	lr, #4
    BEQ     _get_sp_done
 800d92e:	d001      	beq.n	800d934 <_get_sp_done>
    MRS     r0, psp                 /* get fault context from thread. */
 800d930:	f3ef 8009 	mrs	r0, PSP

0800d934 <_get_sp_done>:
_get_sp_done:

    STMFD   r0!, {r4 - r11}         /* push r4 - r11 register */
 800d934:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    STMFD   r0!, {lr}               /* push dummy for flag */
 800d938:	f840 ed04 	str.w	lr, [r0, #-4]!
#endif
    STMFD   r0!, {lr}               /* push exec_return register */
 800d93c:	f840 ed04 	str.w	lr, [r0, #-4]!

    TST     lr, #0x04               /* if(!EXC_RETURN[2]) */
 800d940:	f01e 0f04 	tst.w	lr, #4
    BEQ     _update_msp
 800d944:	d002      	beq.n	800d94c <_update_msp>
    MSR     psp, r0                 /* update stack pointer to PSP. */
 800d946:	f380 8809 	msr	PSP, r0
    B       _update_done
 800d94a:	e001      	b.n	800d950 <_update_done>

0800d94c <_update_msp>:
_update_msp:
    MSR     msp, r0                 /* update stack pointer to MSP. */
 800d94c:	f380 8808 	msr	MSP, r0

0800d950 <_update_done>:
_update_done:

    PUSH    {LR}
 800d950:	b500      	push	{lr}
    BL      rt_hw_hard_fault_exception
 800d952:	f000 fe6b 	bl	800e62c <rt_hw_hard_fault_exception>
    POP     {LR}
 800d956:	f85d eb04 	ldr.w	lr, [sp], #4

    ORR     lr, lr, #0x04
 800d95a:	f04e 0e04 	orr.w	lr, lr, #4
    BX      lr
 800d95e:	4770      	bx	lr
    LDR     r2, =rt_thread_switch_interrupt_flag   //加载rt_thread_switch_interrupt_flag的地址到r2
 800d960:	20007314 	.word	0x20007314
    LDR     r2, =rt_interrupt_from_thread   //加载rt_interrupt_from_thread的地址到r2
 800d964:	20007310 	.word	0x20007310
    LDR     r2, =rt_interrupt_to_thread     //加载rt_interrupt_to_thread的地址到r2
 800d968:	2000730c 	.word	0x2000730c
LDR r0, =NVIC_INT_CTRL
 800d96c:	e000ed04 	.word	0xe000ed04
    LDR r0, =NVIC_SYSPRI2     //将系统优先级寄存器2地址加载到r0
 800d970:	e000ed20 	.word	0xe000ed20
    LDR     r0, =SCB_VTOR   //将中断向量表偏移寄存器地址加载到r0，实际通过中断向量表定位堆栈地址
 800d974:	e000ed08 	.word	0xe000ed08

0800d978 <strlen>:
 800d978:	4603      	mov	r3, r0
 800d97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97e:	2a00      	cmp	r2, #0
 800d980:	d1fb      	bne.n	800d97a <strlen+0x2>
 800d982:	1a18      	subs	r0, r3, r0
 800d984:	3801      	subs	r0, #1
 800d986:	4770      	bx	lr

0800d988 <__aeabi_drsub>:
 800d988:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d98c:	e002      	b.n	800d994 <__adddf3>
 800d98e:	bf00      	nop

0800d990 <__aeabi_dsub>:
 800d990:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d994 <__adddf3>:
 800d994:	b530      	push	{r4, r5, lr}
 800d996:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d99a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d99e:	ea94 0f05 	teq	r4, r5
 800d9a2:	bf08      	it	eq
 800d9a4:	ea90 0f02 	teqeq	r0, r2
 800d9a8:	bf1f      	itttt	ne
 800d9aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d9ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d9b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d9b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d9ba:	f000 80e2 	beq.w	800db82 <__adddf3+0x1ee>
 800d9be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d9c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d9c6:	bfb8      	it	lt
 800d9c8:	426d      	neglt	r5, r5
 800d9ca:	dd0c      	ble.n	800d9e6 <__adddf3+0x52>
 800d9cc:	442c      	add	r4, r5
 800d9ce:	ea80 0202 	eor.w	r2, r0, r2
 800d9d2:	ea81 0303 	eor.w	r3, r1, r3
 800d9d6:	ea82 0000 	eor.w	r0, r2, r0
 800d9da:	ea83 0101 	eor.w	r1, r3, r1
 800d9de:	ea80 0202 	eor.w	r2, r0, r2
 800d9e2:	ea81 0303 	eor.w	r3, r1, r3
 800d9e6:	2d36      	cmp	r5, #54	; 0x36
 800d9e8:	bf88      	it	hi
 800d9ea:	bd30      	pophi	{r4, r5, pc}
 800d9ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d9f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d9f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d9f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d9fc:	d002      	beq.n	800da04 <__adddf3+0x70>
 800d9fe:	4240      	negs	r0, r0
 800da00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800da04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800da08:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800da0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800da10:	d002      	beq.n	800da18 <__adddf3+0x84>
 800da12:	4252      	negs	r2, r2
 800da14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800da18:	ea94 0f05 	teq	r4, r5
 800da1c:	f000 80a7 	beq.w	800db6e <__adddf3+0x1da>
 800da20:	f1a4 0401 	sub.w	r4, r4, #1
 800da24:	f1d5 0e20 	rsbs	lr, r5, #32
 800da28:	db0d      	blt.n	800da46 <__adddf3+0xb2>
 800da2a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800da2e:	fa22 f205 	lsr.w	r2, r2, r5
 800da32:	1880      	adds	r0, r0, r2
 800da34:	f141 0100 	adc.w	r1, r1, #0
 800da38:	fa03 f20e 	lsl.w	r2, r3, lr
 800da3c:	1880      	adds	r0, r0, r2
 800da3e:	fa43 f305 	asr.w	r3, r3, r5
 800da42:	4159      	adcs	r1, r3
 800da44:	e00e      	b.n	800da64 <__adddf3+0xd0>
 800da46:	f1a5 0520 	sub.w	r5, r5, #32
 800da4a:	f10e 0e20 	add.w	lr, lr, #32
 800da4e:	2a01      	cmp	r2, #1
 800da50:	fa03 fc0e 	lsl.w	ip, r3, lr
 800da54:	bf28      	it	cs
 800da56:	f04c 0c02 	orrcs.w	ip, ip, #2
 800da5a:	fa43 f305 	asr.w	r3, r3, r5
 800da5e:	18c0      	adds	r0, r0, r3
 800da60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800da64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800da68:	d507      	bpl.n	800da7a <__adddf3+0xe6>
 800da6a:	f04f 0e00 	mov.w	lr, #0
 800da6e:	f1dc 0c00 	rsbs	ip, ip, #0
 800da72:	eb7e 0000 	sbcs.w	r0, lr, r0
 800da76:	eb6e 0101 	sbc.w	r1, lr, r1
 800da7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800da7e:	d31b      	bcc.n	800dab8 <__adddf3+0x124>
 800da80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800da84:	d30c      	bcc.n	800daa0 <__adddf3+0x10c>
 800da86:	0849      	lsrs	r1, r1, #1
 800da88:	ea5f 0030 	movs.w	r0, r0, rrx
 800da8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800da90:	f104 0401 	add.w	r4, r4, #1
 800da94:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800da98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800da9c:	f080 809a 	bcs.w	800dbd4 <__adddf3+0x240>
 800daa0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800daa4:	bf08      	it	eq
 800daa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800daaa:	f150 0000 	adcs.w	r0, r0, #0
 800daae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800dab2:	ea41 0105 	orr.w	r1, r1, r5
 800dab6:	bd30      	pop	{r4, r5, pc}
 800dab8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800dabc:	4140      	adcs	r0, r0
 800dabe:	eb41 0101 	adc.w	r1, r1, r1
 800dac2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dac6:	f1a4 0401 	sub.w	r4, r4, #1
 800daca:	d1e9      	bne.n	800daa0 <__adddf3+0x10c>
 800dacc:	f091 0f00 	teq	r1, #0
 800dad0:	bf04      	itt	eq
 800dad2:	4601      	moveq	r1, r0
 800dad4:	2000      	moveq	r0, #0
 800dad6:	fab1 f381 	clz	r3, r1
 800dada:	bf08      	it	eq
 800dadc:	3320      	addeq	r3, #32
 800dade:	f1a3 030b 	sub.w	r3, r3, #11
 800dae2:	f1b3 0220 	subs.w	r2, r3, #32
 800dae6:	da0c      	bge.n	800db02 <__adddf3+0x16e>
 800dae8:	320c      	adds	r2, #12
 800daea:	dd08      	ble.n	800dafe <__adddf3+0x16a>
 800daec:	f102 0c14 	add.w	ip, r2, #20
 800daf0:	f1c2 020c 	rsb	r2, r2, #12
 800daf4:	fa01 f00c 	lsl.w	r0, r1, ip
 800daf8:	fa21 f102 	lsr.w	r1, r1, r2
 800dafc:	e00c      	b.n	800db18 <__adddf3+0x184>
 800dafe:	f102 0214 	add.w	r2, r2, #20
 800db02:	bfd8      	it	le
 800db04:	f1c2 0c20 	rsble	ip, r2, #32
 800db08:	fa01 f102 	lsl.w	r1, r1, r2
 800db0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800db10:	bfdc      	itt	le
 800db12:	ea41 010c 	orrle.w	r1, r1, ip
 800db16:	4090      	lslle	r0, r2
 800db18:	1ae4      	subs	r4, r4, r3
 800db1a:	bfa2      	ittt	ge
 800db1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800db20:	4329      	orrge	r1, r5
 800db22:	bd30      	popge	{r4, r5, pc}
 800db24:	ea6f 0404 	mvn.w	r4, r4
 800db28:	3c1f      	subs	r4, #31
 800db2a:	da1c      	bge.n	800db66 <__adddf3+0x1d2>
 800db2c:	340c      	adds	r4, #12
 800db2e:	dc0e      	bgt.n	800db4e <__adddf3+0x1ba>
 800db30:	f104 0414 	add.w	r4, r4, #20
 800db34:	f1c4 0220 	rsb	r2, r4, #32
 800db38:	fa20 f004 	lsr.w	r0, r0, r4
 800db3c:	fa01 f302 	lsl.w	r3, r1, r2
 800db40:	ea40 0003 	orr.w	r0, r0, r3
 800db44:	fa21 f304 	lsr.w	r3, r1, r4
 800db48:	ea45 0103 	orr.w	r1, r5, r3
 800db4c:	bd30      	pop	{r4, r5, pc}
 800db4e:	f1c4 040c 	rsb	r4, r4, #12
 800db52:	f1c4 0220 	rsb	r2, r4, #32
 800db56:	fa20 f002 	lsr.w	r0, r0, r2
 800db5a:	fa01 f304 	lsl.w	r3, r1, r4
 800db5e:	ea40 0003 	orr.w	r0, r0, r3
 800db62:	4629      	mov	r1, r5
 800db64:	bd30      	pop	{r4, r5, pc}
 800db66:	fa21 f004 	lsr.w	r0, r1, r4
 800db6a:	4629      	mov	r1, r5
 800db6c:	bd30      	pop	{r4, r5, pc}
 800db6e:	f094 0f00 	teq	r4, #0
 800db72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800db76:	bf06      	itte	eq
 800db78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800db7c:	3401      	addeq	r4, #1
 800db7e:	3d01      	subne	r5, #1
 800db80:	e74e      	b.n	800da20 <__adddf3+0x8c>
 800db82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800db86:	bf18      	it	ne
 800db88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800db8c:	d029      	beq.n	800dbe2 <__adddf3+0x24e>
 800db8e:	ea94 0f05 	teq	r4, r5
 800db92:	bf08      	it	eq
 800db94:	ea90 0f02 	teqeq	r0, r2
 800db98:	d005      	beq.n	800dba6 <__adddf3+0x212>
 800db9a:	ea54 0c00 	orrs.w	ip, r4, r0
 800db9e:	bf04      	itt	eq
 800dba0:	4619      	moveq	r1, r3
 800dba2:	4610      	moveq	r0, r2
 800dba4:	bd30      	pop	{r4, r5, pc}
 800dba6:	ea91 0f03 	teq	r1, r3
 800dbaa:	bf1e      	ittt	ne
 800dbac:	2100      	movne	r1, #0
 800dbae:	2000      	movne	r0, #0
 800dbb0:	bd30      	popne	{r4, r5, pc}
 800dbb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800dbb6:	d105      	bne.n	800dbc4 <__adddf3+0x230>
 800dbb8:	0040      	lsls	r0, r0, #1
 800dbba:	4149      	adcs	r1, r1
 800dbbc:	bf28      	it	cs
 800dbbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800dbc2:	bd30      	pop	{r4, r5, pc}
 800dbc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800dbc8:	bf3c      	itt	cc
 800dbca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800dbce:	bd30      	popcc	{r4, r5, pc}
 800dbd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dbd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800dbd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbdc:	f04f 0000 	mov.w	r0, #0
 800dbe0:	bd30      	pop	{r4, r5, pc}
 800dbe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800dbe6:	bf1a      	itte	ne
 800dbe8:	4619      	movne	r1, r3
 800dbea:	4610      	movne	r0, r2
 800dbec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800dbf0:	bf1c      	itt	ne
 800dbf2:	460b      	movne	r3, r1
 800dbf4:	4602      	movne	r2, r0
 800dbf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800dbfa:	bf06      	itte	eq
 800dbfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800dc00:	ea91 0f03 	teqeq	r1, r3
 800dc04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800dc08:	bd30      	pop	{r4, r5, pc}
 800dc0a:	bf00      	nop

0800dc0c <__aeabi_ui2d>:
 800dc0c:	f090 0f00 	teq	r0, #0
 800dc10:	bf04      	itt	eq
 800dc12:	2100      	moveq	r1, #0
 800dc14:	4770      	bxeq	lr
 800dc16:	b530      	push	{r4, r5, lr}
 800dc18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dc1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dc20:	f04f 0500 	mov.w	r5, #0
 800dc24:	f04f 0100 	mov.w	r1, #0
 800dc28:	e750      	b.n	800dacc <__adddf3+0x138>
 800dc2a:	bf00      	nop

0800dc2c <__aeabi_i2d>:
 800dc2c:	f090 0f00 	teq	r0, #0
 800dc30:	bf04      	itt	eq
 800dc32:	2100      	moveq	r1, #0
 800dc34:	4770      	bxeq	lr
 800dc36:	b530      	push	{r4, r5, lr}
 800dc38:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dc3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dc40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800dc44:	bf48      	it	mi
 800dc46:	4240      	negmi	r0, r0
 800dc48:	f04f 0100 	mov.w	r1, #0
 800dc4c:	e73e      	b.n	800dacc <__adddf3+0x138>
 800dc4e:	bf00      	nop

0800dc50 <__aeabi_f2d>:
 800dc50:	0042      	lsls	r2, r0, #1
 800dc52:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800dc56:	ea4f 0131 	mov.w	r1, r1, rrx
 800dc5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800dc5e:	bf1f      	itttt	ne
 800dc60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800dc64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800dc68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800dc6c:	4770      	bxne	lr
 800dc6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800dc72:	bf08      	it	eq
 800dc74:	4770      	bxeq	lr
 800dc76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800dc7a:	bf04      	itt	eq
 800dc7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800dc80:	4770      	bxeq	lr
 800dc82:	b530      	push	{r4, r5, lr}
 800dc84:	f44f 7460 	mov.w	r4, #896	; 0x380
 800dc88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dc8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dc90:	e71c      	b.n	800dacc <__adddf3+0x138>
 800dc92:	bf00      	nop

0800dc94 <__aeabi_ul2d>:
 800dc94:	ea50 0201 	orrs.w	r2, r0, r1
 800dc98:	bf08      	it	eq
 800dc9a:	4770      	bxeq	lr
 800dc9c:	b530      	push	{r4, r5, lr}
 800dc9e:	f04f 0500 	mov.w	r5, #0
 800dca2:	e00a      	b.n	800dcba <__aeabi_l2d+0x16>

0800dca4 <__aeabi_l2d>:
 800dca4:	ea50 0201 	orrs.w	r2, r0, r1
 800dca8:	bf08      	it	eq
 800dcaa:	4770      	bxeq	lr
 800dcac:	b530      	push	{r4, r5, lr}
 800dcae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800dcb2:	d502      	bpl.n	800dcba <__aeabi_l2d+0x16>
 800dcb4:	4240      	negs	r0, r0
 800dcb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dcba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dcbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dcc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800dcc6:	f43f aed8 	beq.w	800da7a <__adddf3+0xe6>
 800dcca:	f04f 0203 	mov.w	r2, #3
 800dcce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dcd2:	bf18      	it	ne
 800dcd4:	3203      	addne	r2, #3
 800dcd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dcda:	bf18      	it	ne
 800dcdc:	3203      	addne	r2, #3
 800dcde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800dce2:	f1c2 0320 	rsb	r3, r2, #32
 800dce6:	fa00 fc03 	lsl.w	ip, r0, r3
 800dcea:	fa20 f002 	lsr.w	r0, r0, r2
 800dcee:	fa01 fe03 	lsl.w	lr, r1, r3
 800dcf2:	ea40 000e 	orr.w	r0, r0, lr
 800dcf6:	fa21 f102 	lsr.w	r1, r1, r2
 800dcfa:	4414      	add	r4, r2
 800dcfc:	e6bd      	b.n	800da7a <__adddf3+0xe6>
 800dcfe:	bf00      	nop

0800dd00 <__aeabi_dmul>:
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800dd06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800dd0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800dd0e:	bf1d      	ittte	ne
 800dd10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800dd14:	ea94 0f0c 	teqne	r4, ip
 800dd18:	ea95 0f0c 	teqne	r5, ip
 800dd1c:	f000 f8de 	bleq	800dedc <__aeabi_dmul+0x1dc>
 800dd20:	442c      	add	r4, r5
 800dd22:	ea81 0603 	eor.w	r6, r1, r3
 800dd26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800dd2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800dd2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800dd32:	bf18      	it	ne
 800dd34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800dd38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dd3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd40:	d038      	beq.n	800ddb4 <__aeabi_dmul+0xb4>
 800dd42:	fba0 ce02 	umull	ip, lr, r0, r2
 800dd46:	f04f 0500 	mov.w	r5, #0
 800dd4a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800dd4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800dd52:	fbe0 e503 	umlal	lr, r5, r0, r3
 800dd56:	f04f 0600 	mov.w	r6, #0
 800dd5a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800dd5e:	f09c 0f00 	teq	ip, #0
 800dd62:	bf18      	it	ne
 800dd64:	f04e 0e01 	orrne.w	lr, lr, #1
 800dd68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800dd6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800dd70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800dd74:	d204      	bcs.n	800dd80 <__aeabi_dmul+0x80>
 800dd76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800dd7a:	416d      	adcs	r5, r5
 800dd7c:	eb46 0606 	adc.w	r6, r6, r6
 800dd80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800dd84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800dd88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800dd8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800dd90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800dd94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800dd98:	bf88      	it	hi
 800dd9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800dd9e:	d81e      	bhi.n	800ddde <__aeabi_dmul+0xde>
 800dda0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800dda4:	bf08      	it	eq
 800dda6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ddaa:	f150 0000 	adcs.w	r0, r0, #0
 800ddae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
 800ddb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ddb8:	ea46 0101 	orr.w	r1, r6, r1
 800ddbc:	ea40 0002 	orr.w	r0, r0, r2
 800ddc0:	ea81 0103 	eor.w	r1, r1, r3
 800ddc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ddc8:	bfc2      	ittt	gt
 800ddca:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ddce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ddd2:	bd70      	popgt	{r4, r5, r6, pc}
 800ddd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ddd8:	f04f 0e00 	mov.w	lr, #0
 800dddc:	3c01      	subs	r4, #1
 800ddde:	f300 80ab 	bgt.w	800df38 <__aeabi_dmul+0x238>
 800dde2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800dde6:	bfde      	ittt	le
 800dde8:	2000      	movle	r0, #0
 800ddea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800ddee:	bd70      	pople	{r4, r5, r6, pc}
 800ddf0:	f1c4 0400 	rsb	r4, r4, #0
 800ddf4:	3c20      	subs	r4, #32
 800ddf6:	da35      	bge.n	800de64 <__aeabi_dmul+0x164>
 800ddf8:	340c      	adds	r4, #12
 800ddfa:	dc1b      	bgt.n	800de34 <__aeabi_dmul+0x134>
 800ddfc:	f104 0414 	add.w	r4, r4, #20
 800de00:	f1c4 0520 	rsb	r5, r4, #32
 800de04:	fa00 f305 	lsl.w	r3, r0, r5
 800de08:	fa20 f004 	lsr.w	r0, r0, r4
 800de0c:	fa01 f205 	lsl.w	r2, r1, r5
 800de10:	ea40 0002 	orr.w	r0, r0, r2
 800de14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800de18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800de20:	fa21 f604 	lsr.w	r6, r1, r4
 800de24:	eb42 0106 	adc.w	r1, r2, r6
 800de28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800de2c:	bf08      	it	eq
 800de2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800de32:	bd70      	pop	{r4, r5, r6, pc}
 800de34:	f1c4 040c 	rsb	r4, r4, #12
 800de38:	f1c4 0520 	rsb	r5, r4, #32
 800de3c:	fa00 f304 	lsl.w	r3, r0, r4
 800de40:	fa20 f005 	lsr.w	r0, r0, r5
 800de44:	fa01 f204 	lsl.w	r2, r1, r4
 800de48:	ea40 0002 	orr.w	r0, r0, r2
 800de4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800de50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800de54:	f141 0100 	adc.w	r1, r1, #0
 800de58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800de5c:	bf08      	it	eq
 800de5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	f1c4 0520 	rsb	r5, r4, #32
 800de68:	fa00 f205 	lsl.w	r2, r0, r5
 800de6c:	ea4e 0e02 	orr.w	lr, lr, r2
 800de70:	fa20 f304 	lsr.w	r3, r0, r4
 800de74:	fa01 f205 	lsl.w	r2, r1, r5
 800de78:	ea43 0302 	orr.w	r3, r3, r2
 800de7c:	fa21 f004 	lsr.w	r0, r1, r4
 800de80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800de84:	fa21 f204 	lsr.w	r2, r1, r4
 800de88:	ea20 0002 	bic.w	r0, r0, r2
 800de8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800de90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800de94:	bf08      	it	eq
 800de96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800de9a:	bd70      	pop	{r4, r5, r6, pc}
 800de9c:	f094 0f00 	teq	r4, #0
 800dea0:	d10f      	bne.n	800dec2 <__aeabi_dmul+0x1c2>
 800dea2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800dea6:	0040      	lsls	r0, r0, #1
 800dea8:	eb41 0101 	adc.w	r1, r1, r1
 800deac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800deb0:	bf08      	it	eq
 800deb2:	3c01      	subeq	r4, #1
 800deb4:	d0f7      	beq.n	800dea6 <__aeabi_dmul+0x1a6>
 800deb6:	ea41 0106 	orr.w	r1, r1, r6
 800deba:	f095 0f00 	teq	r5, #0
 800debe:	bf18      	it	ne
 800dec0:	4770      	bxne	lr
 800dec2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800dec6:	0052      	lsls	r2, r2, #1
 800dec8:	eb43 0303 	adc.w	r3, r3, r3
 800decc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ded0:	bf08      	it	eq
 800ded2:	3d01      	subeq	r5, #1
 800ded4:	d0f7      	beq.n	800dec6 <__aeabi_dmul+0x1c6>
 800ded6:	ea43 0306 	orr.w	r3, r3, r6
 800deda:	4770      	bx	lr
 800dedc:	ea94 0f0c 	teq	r4, ip
 800dee0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dee4:	bf18      	it	ne
 800dee6:	ea95 0f0c 	teqne	r5, ip
 800deea:	d00c      	beq.n	800df06 <__aeabi_dmul+0x206>
 800deec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800def0:	bf18      	it	ne
 800def2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800def6:	d1d1      	bne.n	800de9c <__aeabi_dmul+0x19c>
 800def8:	ea81 0103 	eor.w	r1, r1, r3
 800defc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800df00:	f04f 0000 	mov.w	r0, #0
 800df04:	bd70      	pop	{r4, r5, r6, pc}
 800df06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800df0a:	bf06      	itte	eq
 800df0c:	4610      	moveq	r0, r2
 800df0e:	4619      	moveq	r1, r3
 800df10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800df14:	d019      	beq.n	800df4a <__aeabi_dmul+0x24a>
 800df16:	ea94 0f0c 	teq	r4, ip
 800df1a:	d102      	bne.n	800df22 <__aeabi_dmul+0x222>
 800df1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800df20:	d113      	bne.n	800df4a <__aeabi_dmul+0x24a>
 800df22:	ea95 0f0c 	teq	r5, ip
 800df26:	d105      	bne.n	800df34 <__aeabi_dmul+0x234>
 800df28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800df2c:	bf1c      	itt	ne
 800df2e:	4610      	movne	r0, r2
 800df30:	4619      	movne	r1, r3
 800df32:	d10a      	bne.n	800df4a <__aeabi_dmul+0x24a>
 800df34:	ea81 0103 	eor.w	r1, r1, r3
 800df38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800df3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800df40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df44:	f04f 0000 	mov.w	r0, #0
 800df48:	bd70      	pop	{r4, r5, r6, pc}
 800df4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800df4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800df52:	bd70      	pop	{r4, r5, r6, pc}

0800df54 <__aeabi_ddiv>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800df5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800df5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800df62:	bf1d      	ittte	ne
 800df64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800df68:	ea94 0f0c 	teqne	r4, ip
 800df6c:	ea95 0f0c 	teqne	r5, ip
 800df70:	f000 f8a7 	bleq	800e0c2 <__aeabi_ddiv+0x16e>
 800df74:	eba4 0405 	sub.w	r4, r4, r5
 800df78:	ea81 0e03 	eor.w	lr, r1, r3
 800df7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800df80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800df84:	f000 8088 	beq.w	800e098 <__aeabi_ddiv+0x144>
 800df88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800df8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800df90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800df94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800df98:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800df9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800dfa0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800dfa4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800dfa8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800dfac:	429d      	cmp	r5, r3
 800dfae:	bf08      	it	eq
 800dfb0:	4296      	cmpeq	r6, r2
 800dfb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800dfb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800dfba:	d202      	bcs.n	800dfc2 <__aeabi_ddiv+0x6e>
 800dfbc:	085b      	lsrs	r3, r3, #1
 800dfbe:	ea4f 0232 	mov.w	r2, r2, rrx
 800dfc2:	1ab6      	subs	r6, r6, r2
 800dfc4:	eb65 0503 	sbc.w	r5, r5, r3
 800dfc8:	085b      	lsrs	r3, r3, #1
 800dfca:	ea4f 0232 	mov.w	r2, r2, rrx
 800dfce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dfd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800dfd6:	ebb6 0e02 	subs.w	lr, r6, r2
 800dfda:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dfde:	bf22      	ittt	cs
 800dfe0:	1ab6      	subcs	r6, r6, r2
 800dfe2:	4675      	movcs	r5, lr
 800dfe4:	ea40 000c 	orrcs.w	r0, r0, ip
 800dfe8:	085b      	lsrs	r3, r3, #1
 800dfea:	ea4f 0232 	mov.w	r2, r2, rrx
 800dfee:	ebb6 0e02 	subs.w	lr, r6, r2
 800dff2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dff6:	bf22      	ittt	cs
 800dff8:	1ab6      	subcs	r6, r6, r2
 800dffa:	4675      	movcs	r5, lr
 800dffc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e000:	085b      	lsrs	r3, r3, #1
 800e002:	ea4f 0232 	mov.w	r2, r2, rrx
 800e006:	ebb6 0e02 	subs.w	lr, r6, r2
 800e00a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e00e:	bf22      	ittt	cs
 800e010:	1ab6      	subcs	r6, r6, r2
 800e012:	4675      	movcs	r5, lr
 800e014:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e018:	085b      	lsrs	r3, r3, #1
 800e01a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e01e:	ebb6 0e02 	subs.w	lr, r6, r2
 800e022:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e026:	bf22      	ittt	cs
 800e028:	1ab6      	subcs	r6, r6, r2
 800e02a:	4675      	movcs	r5, lr
 800e02c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800e030:	ea55 0e06 	orrs.w	lr, r5, r6
 800e034:	d018      	beq.n	800e068 <__aeabi_ddiv+0x114>
 800e036:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800e03a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800e03e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800e042:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e046:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800e04a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e04e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800e052:	d1c0      	bne.n	800dfd6 <__aeabi_ddiv+0x82>
 800e054:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e058:	d10b      	bne.n	800e072 <__aeabi_ddiv+0x11e>
 800e05a:	ea41 0100 	orr.w	r1, r1, r0
 800e05e:	f04f 0000 	mov.w	r0, #0
 800e062:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e066:	e7b6      	b.n	800dfd6 <__aeabi_ddiv+0x82>
 800e068:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e06c:	bf04      	itt	eq
 800e06e:	4301      	orreq	r1, r0
 800e070:	2000      	moveq	r0, #0
 800e072:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e076:	bf88      	it	hi
 800e078:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e07c:	f63f aeaf 	bhi.w	800ddde <__aeabi_dmul+0xde>
 800e080:	ebb5 0c03 	subs.w	ip, r5, r3
 800e084:	bf04      	itt	eq
 800e086:	ebb6 0c02 	subseq.w	ip, r6, r2
 800e08a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e08e:	f150 0000 	adcs.w	r0, r0, #0
 800e092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e096:	bd70      	pop	{r4, r5, r6, pc}
 800e098:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800e09c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800e0a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800e0a4:	bfc2      	ittt	gt
 800e0a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e0aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e0ae:	bd70      	popgt	{r4, r5, r6, pc}
 800e0b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e0b4:	f04f 0e00 	mov.w	lr, #0
 800e0b8:	3c01      	subs	r4, #1
 800e0ba:	e690      	b.n	800ddde <__aeabi_dmul+0xde>
 800e0bc:	ea45 0e06 	orr.w	lr, r5, r6
 800e0c0:	e68d      	b.n	800ddde <__aeabi_dmul+0xde>
 800e0c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e0c6:	ea94 0f0c 	teq	r4, ip
 800e0ca:	bf08      	it	eq
 800e0cc:	ea95 0f0c 	teqeq	r5, ip
 800e0d0:	f43f af3b 	beq.w	800df4a <__aeabi_dmul+0x24a>
 800e0d4:	ea94 0f0c 	teq	r4, ip
 800e0d8:	d10a      	bne.n	800e0f0 <__aeabi_ddiv+0x19c>
 800e0da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e0de:	f47f af34 	bne.w	800df4a <__aeabi_dmul+0x24a>
 800e0e2:	ea95 0f0c 	teq	r5, ip
 800e0e6:	f47f af25 	bne.w	800df34 <__aeabi_dmul+0x234>
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	e72c      	b.n	800df4a <__aeabi_dmul+0x24a>
 800e0f0:	ea95 0f0c 	teq	r5, ip
 800e0f4:	d106      	bne.n	800e104 <__aeabi_ddiv+0x1b0>
 800e0f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e0fa:	f43f aefd 	beq.w	800def8 <__aeabi_dmul+0x1f8>
 800e0fe:	4610      	mov	r0, r2
 800e100:	4619      	mov	r1, r3
 800e102:	e722      	b.n	800df4a <__aeabi_dmul+0x24a>
 800e104:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e108:	bf18      	it	ne
 800e10a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e10e:	f47f aec5 	bne.w	800de9c <__aeabi_dmul+0x19c>
 800e112:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800e116:	f47f af0d 	bne.w	800df34 <__aeabi_dmul+0x234>
 800e11a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800e11e:	f47f aeeb 	bne.w	800def8 <__aeabi_dmul+0x1f8>
 800e122:	e712      	b.n	800df4a <__aeabi_dmul+0x24a>

0800e124 <__gedf2>:
 800e124:	f04f 3cff 	mov.w	ip, #4294967295
 800e128:	e006      	b.n	800e138 <__cmpdf2+0x4>
 800e12a:	bf00      	nop

0800e12c <__ledf2>:
 800e12c:	f04f 0c01 	mov.w	ip, #1
 800e130:	e002      	b.n	800e138 <__cmpdf2+0x4>
 800e132:	bf00      	nop

0800e134 <__cmpdf2>:
 800e134:	f04f 0c01 	mov.w	ip, #1
 800e138:	f84d cd04 	str.w	ip, [sp, #-4]!
 800e13c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e144:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e148:	bf18      	it	ne
 800e14a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800e14e:	d01b      	beq.n	800e188 <__cmpdf2+0x54>
 800e150:	b001      	add	sp, #4
 800e152:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800e156:	bf0c      	ite	eq
 800e158:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800e15c:	ea91 0f03 	teqne	r1, r3
 800e160:	bf02      	ittt	eq
 800e162:	ea90 0f02 	teqeq	r0, r2
 800e166:	2000      	moveq	r0, #0
 800e168:	4770      	bxeq	lr
 800e16a:	f110 0f00 	cmn.w	r0, #0
 800e16e:	ea91 0f03 	teq	r1, r3
 800e172:	bf58      	it	pl
 800e174:	4299      	cmppl	r1, r3
 800e176:	bf08      	it	eq
 800e178:	4290      	cmpeq	r0, r2
 800e17a:	bf2c      	ite	cs
 800e17c:	17d8      	asrcs	r0, r3, #31
 800e17e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800e182:	f040 0001 	orr.w	r0, r0, #1
 800e186:	4770      	bx	lr
 800e188:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e18c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e190:	d102      	bne.n	800e198 <__cmpdf2+0x64>
 800e192:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800e196:	d107      	bne.n	800e1a8 <__cmpdf2+0x74>
 800e198:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e19c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e1a0:	d1d6      	bne.n	800e150 <__cmpdf2+0x1c>
 800e1a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800e1a6:	d0d3      	beq.n	800e150 <__cmpdf2+0x1c>
 800e1a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop

0800e1b0 <__aeabi_cdrcmple>:
 800e1b0:	4684      	mov	ip, r0
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	4662      	mov	r2, ip
 800e1b6:	468c      	mov	ip, r1
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4663      	mov	r3, ip
 800e1bc:	e000      	b.n	800e1c0 <__aeabi_cdcmpeq>
 800e1be:	bf00      	nop

0800e1c0 <__aeabi_cdcmpeq>:
 800e1c0:	b501      	push	{r0, lr}
 800e1c2:	f7ff ffb7 	bl	800e134 <__cmpdf2>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	bf48      	it	mi
 800e1ca:	f110 0f00 	cmnmi.w	r0, #0
 800e1ce:	bd01      	pop	{r0, pc}

0800e1d0 <__aeabi_dcmpeq>:
 800e1d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e1d4:	f7ff fff4 	bl	800e1c0 <__aeabi_cdcmpeq>
 800e1d8:	bf0c      	ite	eq
 800e1da:	2001      	moveq	r0, #1
 800e1dc:	2000      	movne	r0, #0
 800e1de:	f85d fb08 	ldr.w	pc, [sp], #8
 800e1e2:	bf00      	nop

0800e1e4 <__aeabi_dcmplt>:
 800e1e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e1e8:	f7ff ffea 	bl	800e1c0 <__aeabi_cdcmpeq>
 800e1ec:	bf34      	ite	cc
 800e1ee:	2001      	movcc	r0, #1
 800e1f0:	2000      	movcs	r0, #0
 800e1f2:	f85d fb08 	ldr.w	pc, [sp], #8
 800e1f6:	bf00      	nop

0800e1f8 <__aeabi_dcmple>:
 800e1f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e1fc:	f7ff ffe0 	bl	800e1c0 <__aeabi_cdcmpeq>
 800e200:	bf94      	ite	ls
 800e202:	2001      	movls	r0, #1
 800e204:	2000      	movhi	r0, #0
 800e206:	f85d fb08 	ldr.w	pc, [sp], #8
 800e20a:	bf00      	nop

0800e20c <__aeabi_dcmpge>:
 800e20c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e210:	f7ff ffce 	bl	800e1b0 <__aeabi_cdrcmple>
 800e214:	bf94      	ite	ls
 800e216:	2001      	movls	r0, #1
 800e218:	2000      	movhi	r0, #0
 800e21a:	f85d fb08 	ldr.w	pc, [sp], #8
 800e21e:	bf00      	nop

0800e220 <__aeabi_dcmpgt>:
 800e220:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e224:	f7ff ffc4 	bl	800e1b0 <__aeabi_cdrcmple>
 800e228:	bf34      	ite	cc
 800e22a:	2001      	movcc	r0, #1
 800e22c:	2000      	movcs	r0, #0
 800e22e:	f85d fb08 	ldr.w	pc, [sp], #8
 800e232:	bf00      	nop

0800e234 <__aeabi_d2uiz>:
 800e234:	004a      	lsls	r2, r1, #1
 800e236:	d211      	bcs.n	800e25c <__aeabi_d2uiz+0x28>
 800e238:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800e23c:	d211      	bcs.n	800e262 <__aeabi_d2uiz+0x2e>
 800e23e:	d50d      	bpl.n	800e25c <__aeabi_d2uiz+0x28>
 800e240:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800e244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800e248:	d40e      	bmi.n	800e268 <__aeabi_d2uiz+0x34>
 800e24a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800e24e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e256:	fa23 f002 	lsr.w	r0, r3, r2
 800e25a:	4770      	bx	lr
 800e25c:	f04f 0000 	mov.w	r0, #0
 800e260:	4770      	bx	lr
 800e262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800e266:	d102      	bne.n	800e26e <__aeabi_d2uiz+0x3a>
 800e268:	f04f 30ff 	mov.w	r0, #4294967295
 800e26c:	4770      	bx	lr
 800e26e:	f04f 0000 	mov.w	r0, #0
 800e272:	4770      	bx	lr

0800e274 <__aeabi_uldivmod>:
 800e274:	b953      	cbnz	r3, 800e28c <__aeabi_uldivmod+0x18>
 800e276:	b94a      	cbnz	r2, 800e28c <__aeabi_uldivmod+0x18>
 800e278:	2900      	cmp	r1, #0
 800e27a:	bf08      	it	eq
 800e27c:	2800      	cmpeq	r0, #0
 800e27e:	bf1c      	itt	ne
 800e280:	f04f 31ff 	movne.w	r1, #4294967295
 800e284:	f04f 30ff 	movne.w	r0, #4294967295
 800e288:	f000 b994 	b.w	800e5b4 <__aeabi_idiv0>
 800e28c:	f1ad 0c08 	sub.w	ip, sp, #8
 800e290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800e294:	f000 f828 	bl	800e2e8 <__udivmoddi4>
 800e298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2a0:	b004      	add	sp, #16
 800e2a2:	4770      	bx	lr

0800e2a4 <__aeabi_d2ulz>:
 800e2a4:	b5d0      	push	{r4, r6, r7, lr}
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4b0d      	ldr	r3, [pc, #52]	; (800e2e0 <__aeabi_d2ulz+0x3c>)
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	460f      	mov	r7, r1
 800e2ae:	f7ff fd27 	bl	800dd00 <__aeabi_dmul>
 800e2b2:	f7ff ffbf 	bl	800e234 <__aeabi_d2uiz>
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	f7ff fca8 	bl	800dc0c <__aeabi_ui2d>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <__aeabi_d2ulz+0x40>)
 800e2c0:	f7ff fd1e 	bl	800dd00 <__aeabi_dmul>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7ff fb60 	bl	800d990 <__aeabi_dsub>
 800e2d0:	f7ff ffb0 	bl	800e234 <__aeabi_d2uiz>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	4310      	orrs	r0, r2
 800e2da:	4619      	mov	r1, r3
 800e2dc:	bdd0      	pop	{r4, r6, r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	3df00000 	.word	0x3df00000
 800e2e4:	41f00000 	.word	0x41f00000

0800e2e8 <__udivmoddi4>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	9e08      	ldr	r6, [sp, #32]
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4688      	mov	r8, r1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d14b      	bne.n	800e38e <__udivmoddi4+0xa6>
 800e2f6:	428a      	cmp	r2, r1
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	d967      	bls.n	800e3cc <__udivmoddi4+0xe4>
 800e2fc:	fab2 f282 	clz	r2, r2
 800e300:	b14a      	cbz	r2, 800e316 <__udivmoddi4+0x2e>
 800e302:	f1c2 0720 	rsb	r7, r2, #32
 800e306:	fa01 f302 	lsl.w	r3, r1, r2
 800e30a:	fa20 f707 	lsr.w	r7, r0, r7
 800e30e:	4095      	lsls	r5, r2
 800e310:	ea47 0803 	orr.w	r8, r7, r3
 800e314:	4094      	lsls	r4, r2
 800e316:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e31a:	0c23      	lsrs	r3, r4, #16
 800e31c:	fbb8 f7fe 	udiv	r7, r8, lr
 800e320:	fa1f fc85 	uxth.w	ip, r5
 800e324:	fb0e 8817 	mls	r8, lr, r7, r8
 800e328:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e32c:	fb07 f10c 	mul.w	r1, r7, ip
 800e330:	4299      	cmp	r1, r3
 800e332:	d909      	bls.n	800e348 <__udivmoddi4+0x60>
 800e334:	18eb      	adds	r3, r5, r3
 800e336:	f107 30ff 	add.w	r0, r7, #4294967295
 800e33a:	f080 811b 	bcs.w	800e574 <__udivmoddi4+0x28c>
 800e33e:	4299      	cmp	r1, r3
 800e340:	f240 8118 	bls.w	800e574 <__udivmoddi4+0x28c>
 800e344:	3f02      	subs	r7, #2
 800e346:	442b      	add	r3, r5
 800e348:	1a5b      	subs	r3, r3, r1
 800e34a:	b2a4      	uxth	r4, r4
 800e34c:	fbb3 f0fe 	udiv	r0, r3, lr
 800e350:	fb0e 3310 	mls	r3, lr, r0, r3
 800e354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800e358:	fb00 fc0c 	mul.w	ip, r0, ip
 800e35c:	45a4      	cmp	ip, r4
 800e35e:	d909      	bls.n	800e374 <__udivmoddi4+0x8c>
 800e360:	192c      	adds	r4, r5, r4
 800e362:	f100 33ff 	add.w	r3, r0, #4294967295
 800e366:	f080 8107 	bcs.w	800e578 <__udivmoddi4+0x290>
 800e36a:	45a4      	cmp	ip, r4
 800e36c:	f240 8104 	bls.w	800e578 <__udivmoddi4+0x290>
 800e370:	3802      	subs	r0, #2
 800e372:	442c      	add	r4, r5
 800e374:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e378:	eba4 040c 	sub.w	r4, r4, ip
 800e37c:	2700      	movs	r7, #0
 800e37e:	b11e      	cbz	r6, 800e388 <__udivmoddi4+0xa0>
 800e380:	40d4      	lsrs	r4, r2
 800e382:	2300      	movs	r3, #0
 800e384:	e9c6 4300 	strd	r4, r3, [r6]
 800e388:	4639      	mov	r1, r7
 800e38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38e:	428b      	cmp	r3, r1
 800e390:	d909      	bls.n	800e3a6 <__udivmoddi4+0xbe>
 800e392:	2e00      	cmp	r6, #0
 800e394:	f000 80eb 	beq.w	800e56e <__udivmoddi4+0x286>
 800e398:	2700      	movs	r7, #0
 800e39a:	e9c6 0100 	strd	r0, r1, [r6]
 800e39e:	4638      	mov	r0, r7
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a6:	fab3 f783 	clz	r7, r3
 800e3aa:	2f00      	cmp	r7, #0
 800e3ac:	d147      	bne.n	800e43e <__udivmoddi4+0x156>
 800e3ae:	428b      	cmp	r3, r1
 800e3b0:	d302      	bcc.n	800e3b8 <__udivmoddi4+0xd0>
 800e3b2:	4282      	cmp	r2, r0
 800e3b4:	f200 80fa 	bhi.w	800e5ac <__udivmoddi4+0x2c4>
 800e3b8:	1a84      	subs	r4, r0, r2
 800e3ba:	eb61 0303 	sbc.w	r3, r1, r3
 800e3be:	2001      	movs	r0, #1
 800e3c0:	4698      	mov	r8, r3
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	d0e0      	beq.n	800e388 <__udivmoddi4+0xa0>
 800e3c6:	e9c6 4800 	strd	r4, r8, [r6]
 800e3ca:	e7dd      	b.n	800e388 <__udivmoddi4+0xa0>
 800e3cc:	b902      	cbnz	r2, 800e3d0 <__udivmoddi4+0xe8>
 800e3ce:	deff      	udf	#255	; 0xff
 800e3d0:	fab2 f282 	clz	r2, r2
 800e3d4:	2a00      	cmp	r2, #0
 800e3d6:	f040 808f 	bne.w	800e4f8 <__udivmoddi4+0x210>
 800e3da:	1b49      	subs	r1, r1, r5
 800e3dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e3e0:	fa1f f885 	uxth.w	r8, r5
 800e3e4:	2701      	movs	r7, #1
 800e3e6:	fbb1 fcfe 	udiv	ip, r1, lr
 800e3ea:	0c23      	lsrs	r3, r4, #16
 800e3ec:	fb0e 111c 	mls	r1, lr, ip, r1
 800e3f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e3f4:	fb08 f10c 	mul.w	r1, r8, ip
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	d907      	bls.n	800e40c <__udivmoddi4+0x124>
 800e3fc:	18eb      	adds	r3, r5, r3
 800e3fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 800e402:	d202      	bcs.n	800e40a <__udivmoddi4+0x122>
 800e404:	4299      	cmp	r1, r3
 800e406:	f200 80cd 	bhi.w	800e5a4 <__udivmoddi4+0x2bc>
 800e40a:	4684      	mov	ip, r0
 800e40c:	1a59      	subs	r1, r3, r1
 800e40e:	b2a3      	uxth	r3, r4
 800e410:	fbb1 f0fe 	udiv	r0, r1, lr
 800e414:	fb0e 1410 	mls	r4, lr, r0, r1
 800e418:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e41c:	fb08 f800 	mul.w	r8, r8, r0
 800e420:	45a0      	cmp	r8, r4
 800e422:	d907      	bls.n	800e434 <__udivmoddi4+0x14c>
 800e424:	192c      	adds	r4, r5, r4
 800e426:	f100 33ff 	add.w	r3, r0, #4294967295
 800e42a:	d202      	bcs.n	800e432 <__udivmoddi4+0x14a>
 800e42c:	45a0      	cmp	r8, r4
 800e42e:	f200 80b6 	bhi.w	800e59e <__udivmoddi4+0x2b6>
 800e432:	4618      	mov	r0, r3
 800e434:	eba4 0408 	sub.w	r4, r4, r8
 800e438:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800e43c:	e79f      	b.n	800e37e <__udivmoddi4+0x96>
 800e43e:	f1c7 0c20 	rsb	ip, r7, #32
 800e442:	40bb      	lsls	r3, r7
 800e444:	fa22 fe0c 	lsr.w	lr, r2, ip
 800e448:	ea4e 0e03 	orr.w	lr, lr, r3
 800e44c:	fa01 f407 	lsl.w	r4, r1, r7
 800e450:	fa20 f50c 	lsr.w	r5, r0, ip
 800e454:	fa21 f30c 	lsr.w	r3, r1, ip
 800e458:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800e45c:	4325      	orrs	r5, r4
 800e45e:	fbb3 f9f8 	udiv	r9, r3, r8
 800e462:	0c2c      	lsrs	r4, r5, #16
 800e464:	fb08 3319 	mls	r3, r8, r9, r3
 800e468:	fa1f fa8e 	uxth.w	sl, lr
 800e46c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800e470:	fb09 f40a 	mul.w	r4, r9, sl
 800e474:	429c      	cmp	r4, r3
 800e476:	fa02 f207 	lsl.w	r2, r2, r7
 800e47a:	fa00 f107 	lsl.w	r1, r0, r7
 800e47e:	d90b      	bls.n	800e498 <__udivmoddi4+0x1b0>
 800e480:	eb1e 0303 	adds.w	r3, lr, r3
 800e484:	f109 30ff 	add.w	r0, r9, #4294967295
 800e488:	f080 8087 	bcs.w	800e59a <__udivmoddi4+0x2b2>
 800e48c:	429c      	cmp	r4, r3
 800e48e:	f240 8084 	bls.w	800e59a <__udivmoddi4+0x2b2>
 800e492:	f1a9 0902 	sub.w	r9, r9, #2
 800e496:	4473      	add	r3, lr
 800e498:	1b1b      	subs	r3, r3, r4
 800e49a:	b2ad      	uxth	r5, r5
 800e49c:	fbb3 f0f8 	udiv	r0, r3, r8
 800e4a0:	fb08 3310 	mls	r3, r8, r0, r3
 800e4a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800e4a8:	fb00 fa0a 	mul.w	sl, r0, sl
 800e4ac:	45a2      	cmp	sl, r4
 800e4ae:	d908      	bls.n	800e4c2 <__udivmoddi4+0x1da>
 800e4b0:	eb1e 0404 	adds.w	r4, lr, r4
 800e4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4b8:	d26b      	bcs.n	800e592 <__udivmoddi4+0x2aa>
 800e4ba:	45a2      	cmp	sl, r4
 800e4bc:	d969      	bls.n	800e592 <__udivmoddi4+0x2aa>
 800e4be:	3802      	subs	r0, #2
 800e4c0:	4474      	add	r4, lr
 800e4c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800e4c6:	fba0 8902 	umull	r8, r9, r0, r2
 800e4ca:	eba4 040a 	sub.w	r4, r4, sl
 800e4ce:	454c      	cmp	r4, r9
 800e4d0:	46c2      	mov	sl, r8
 800e4d2:	464b      	mov	r3, r9
 800e4d4:	d354      	bcc.n	800e580 <__udivmoddi4+0x298>
 800e4d6:	d051      	beq.n	800e57c <__udivmoddi4+0x294>
 800e4d8:	2e00      	cmp	r6, #0
 800e4da:	d069      	beq.n	800e5b0 <__udivmoddi4+0x2c8>
 800e4dc:	ebb1 050a 	subs.w	r5, r1, sl
 800e4e0:	eb64 0403 	sbc.w	r4, r4, r3
 800e4e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 800e4e8:	40fd      	lsrs	r5, r7
 800e4ea:	40fc      	lsrs	r4, r7
 800e4ec:	ea4c 0505 	orr.w	r5, ip, r5
 800e4f0:	e9c6 5400 	strd	r5, r4, [r6]
 800e4f4:	2700      	movs	r7, #0
 800e4f6:	e747      	b.n	800e388 <__udivmoddi4+0xa0>
 800e4f8:	f1c2 0320 	rsb	r3, r2, #32
 800e4fc:	fa20 f703 	lsr.w	r7, r0, r3
 800e500:	4095      	lsls	r5, r2
 800e502:	fa01 f002 	lsl.w	r0, r1, r2
 800e506:	fa21 f303 	lsr.w	r3, r1, r3
 800e50a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e50e:	4338      	orrs	r0, r7
 800e510:	0c01      	lsrs	r1, r0, #16
 800e512:	fbb3 f7fe 	udiv	r7, r3, lr
 800e516:	fa1f f885 	uxth.w	r8, r5
 800e51a:	fb0e 3317 	mls	r3, lr, r7, r3
 800e51e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e522:	fb07 f308 	mul.w	r3, r7, r8
 800e526:	428b      	cmp	r3, r1
 800e528:	fa04 f402 	lsl.w	r4, r4, r2
 800e52c:	d907      	bls.n	800e53e <__udivmoddi4+0x256>
 800e52e:	1869      	adds	r1, r5, r1
 800e530:	f107 3cff 	add.w	ip, r7, #4294967295
 800e534:	d22f      	bcs.n	800e596 <__udivmoddi4+0x2ae>
 800e536:	428b      	cmp	r3, r1
 800e538:	d92d      	bls.n	800e596 <__udivmoddi4+0x2ae>
 800e53a:	3f02      	subs	r7, #2
 800e53c:	4429      	add	r1, r5
 800e53e:	1acb      	subs	r3, r1, r3
 800e540:	b281      	uxth	r1, r0
 800e542:	fbb3 f0fe 	udiv	r0, r3, lr
 800e546:	fb0e 3310 	mls	r3, lr, r0, r3
 800e54a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e54e:	fb00 f308 	mul.w	r3, r0, r8
 800e552:	428b      	cmp	r3, r1
 800e554:	d907      	bls.n	800e566 <__udivmoddi4+0x27e>
 800e556:	1869      	adds	r1, r5, r1
 800e558:	f100 3cff 	add.w	ip, r0, #4294967295
 800e55c:	d217      	bcs.n	800e58e <__udivmoddi4+0x2a6>
 800e55e:	428b      	cmp	r3, r1
 800e560:	d915      	bls.n	800e58e <__udivmoddi4+0x2a6>
 800e562:	3802      	subs	r0, #2
 800e564:	4429      	add	r1, r5
 800e566:	1ac9      	subs	r1, r1, r3
 800e568:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800e56c:	e73b      	b.n	800e3e6 <__udivmoddi4+0xfe>
 800e56e:	4637      	mov	r7, r6
 800e570:	4630      	mov	r0, r6
 800e572:	e709      	b.n	800e388 <__udivmoddi4+0xa0>
 800e574:	4607      	mov	r7, r0
 800e576:	e6e7      	b.n	800e348 <__udivmoddi4+0x60>
 800e578:	4618      	mov	r0, r3
 800e57a:	e6fb      	b.n	800e374 <__udivmoddi4+0x8c>
 800e57c:	4541      	cmp	r1, r8
 800e57e:	d2ab      	bcs.n	800e4d8 <__udivmoddi4+0x1f0>
 800e580:	ebb8 0a02 	subs.w	sl, r8, r2
 800e584:	eb69 020e 	sbc.w	r2, r9, lr
 800e588:	3801      	subs	r0, #1
 800e58a:	4613      	mov	r3, r2
 800e58c:	e7a4      	b.n	800e4d8 <__udivmoddi4+0x1f0>
 800e58e:	4660      	mov	r0, ip
 800e590:	e7e9      	b.n	800e566 <__udivmoddi4+0x27e>
 800e592:	4618      	mov	r0, r3
 800e594:	e795      	b.n	800e4c2 <__udivmoddi4+0x1da>
 800e596:	4667      	mov	r7, ip
 800e598:	e7d1      	b.n	800e53e <__udivmoddi4+0x256>
 800e59a:	4681      	mov	r9, r0
 800e59c:	e77c      	b.n	800e498 <__udivmoddi4+0x1b0>
 800e59e:	3802      	subs	r0, #2
 800e5a0:	442c      	add	r4, r5
 800e5a2:	e747      	b.n	800e434 <__udivmoddi4+0x14c>
 800e5a4:	f1ac 0c02 	sub.w	ip, ip, #2
 800e5a8:	442b      	add	r3, r5
 800e5aa:	e72f      	b.n	800e40c <__udivmoddi4+0x124>
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	e708      	b.n	800e3c2 <__udivmoddi4+0xda>
 800e5b0:	4637      	mov	r7, r6
 800e5b2:	e6e9      	b.n	800e388 <__udivmoddi4+0xa0>

0800e5b4 <__aeabi_idiv0>:
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop

0800e5b8 <rti_board_start>:
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
    return 0;
}
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	4770      	bx	lr

0800e5bc <rti_board_end>:
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
    return 0;
}
 800e5bc:	2000      	movs	r0, #0
 800e5be:	4770      	bx	lr

0800e5c0 <rt_components_board_init>:

/**
 * RT-Thread Components Initialization for board
 */
void rt_components_board_init(void)
{
 800e5c0:	b510      	push	{r4, lr}
        rt_kprintf(":%d done\n", result);
    }
#else
    const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
 800e5c2:	4c04      	ldr	r4, [pc, #16]	; (800e5d4 <rt_components_board_init+0x14>)
 800e5c4:	e002      	b.n	800e5cc <rt_components_board_init+0xc>
    {
        (*fn_ptr)();
 800e5c6:	f854 3b04 	ldr.w	r3, [r4], #4
 800e5ca:	4798      	blx	r3
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
 800e5cc:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <rt_components_board_init+0x18>)
 800e5ce:	429c      	cmp	r4, r3
 800e5d0:	d3f9      	bcc.n	800e5c6 <rt_components_board_init+0x6>
    }
#endif
}
 800e5d2:	bd10      	pop	{r4, pc}
 800e5d4:	08012958 	.word	0x08012958
 800e5d8:	0801295c 	.word	0x0801295c

0800e5dc <rt_hw_stack_init>:
//======================================================================
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
 800e5dc:	b470      	push	{r4, r5, r6}
 800e5de:	4606      	mov	r6, r0
    struct stack_frame *stack_frame;
    rt_uint8_t         *stk;
    unsigned long       i;
    //（1）获取栈顶指针位置
    //（1.1）获取栈顶地址，rt_hw_stack_init在调用的时候，传给stack_addr的是(栈顶指针-4)，所以要sizeof(rt_uint32_t)加回来
    stk  = stack_addr + sizeof(rt_uint32_t);
 800e5e0:	3204      	adds	r2, #4
    //（1.2）因为浮点运算要求栈是8字节对齐的，且栈底在高地址，所以需要向下8字节对齐
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
 800e5e2:	f022 0507 	bic.w	r5, r2, #7
    //（1.3）栈顶指针stk指针继续向下移动sizeof(struct stack_frame)个偏移，即移动一个栈帧大小
    stk -= sizeof(struct stack_frame);
 800e5e6:	f1a5 0044 	sub.w	r0, r5, #68	; 0x44
    //（1.4）将stk指针强制转化为stack_frame类型，得到stack_frame指针
    stack_frame = (struct stack_frame *)stk;

    //（2）将栈空间里面的stack_frame结构体内存初始化为0xdeadbeef
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	e003      	b.n	800e5f6 <rt_hw_stack_init+0x1a>
    {
        ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
 800e5ee:	4c0e      	ldr	r4, [pc, #56]	; (800e628 <rt_hw_stack_init+0x4c>)
 800e5f0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
 800e5f4:	3201      	adds	r2, #1
 800e5f6:	2a10      	cmp	r2, #16
 800e5f8:	d9f9      	bls.n	800e5ee <rt_hw_stack_init+0x12>
    }
    //（3）初始化异常发生时自动保存的寄存器
    stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
 800e5fa:	f845 1c20 	str.w	r1, [r5, #-32]
    stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
 800e5fe:	2200      	movs	r2, #0
 800e600:	f845 2c1c 	str.w	r2, [r5, #-28]
    stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
 800e604:	f845 2c18 	str.w	r2, [r5, #-24]
    stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
 800e608:	f845 2c14 	str.w	r2, [r5, #-20]
    stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
 800e60c:	f845 2c10 	str.w	r2, [r5, #-16]
    stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
 800e610:	f845 3c0c 	str.w	r3, [r5, #-12]
    stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
 800e614:	f845 6c08 	str.w	r6, [r5, #-8]
    stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
 800e618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e61c:	f845 3c04 	str.w	r3, [r5, #-4]

#if USE_FPU
    stack_frame->flag = 0;
 800e620:	f845 2c44 	str.w	r2, [r5, #-68]
#endif /* USE_FPU */

    //（4）返回当前的栈顶指针
    return stk;
}
 800e624:	bc70      	pop	{r4, r5, r6}
 800e626:	4770      	bx	lr
 800e628:	deadbeef 	.word	0xdeadbeef

0800e62c <rt_hw_hard_fault_exception>:
    rt_uint32_t exc_return;
    struct stack_frame stack_frame;
};

void rt_hw_hard_fault_exception(struct exception_info *exception_info)
{
 800e62c:	b510      	push	{r4, lr}
 800e62e:	4604      	mov	r4, r0
    extern long list_thread(void);
    struct exception_stack_frame *exception_stack = &exception_info->stack_frame.exception_stack_frame;
    struct stack_frame *context = &exception_info->stack_frame;

    if (rt_exception_hook != RT_NULL)
 800e630:	4b2f      	ldr	r3, [pc, #188]	; (800e6f0 <rt_hw_hard_fault_exception+0xc4>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	b11b      	cbz	r3, 800e63e <rt_hw_hard_fault_exception+0x12>
 800e636:	3028      	adds	r0, #40	; 0x28
    {
        rt_err_t result;

        result = rt_exception_hook(exception_stack);
 800e638:	4798      	blx	r3
        if (result == RT_EOK) return;
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d056      	beq.n	800e6ec <rt_hw_hard_fault_exception+0xc0>
    }

    rt_kprintf("psr: 0x%08x\n", context->exception_stack_frame.psr);
 800e63e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e640:	482c      	ldr	r0, [pc, #176]	; (800e6f4 <rt_hw_hard_fault_exception+0xc8>)
 800e642:	f002 fac9 	bl	8010bd8 <rt_kprintf>

    rt_kprintf("r00: 0x%08x\n", context->exception_stack_frame.r0);
 800e646:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e648:	482b      	ldr	r0, [pc, #172]	; (800e6f8 <rt_hw_hard_fault_exception+0xcc>)
 800e64a:	f002 fac5 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r01: 0x%08x\n", context->exception_stack_frame.r1);
 800e64e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e650:	482a      	ldr	r0, [pc, #168]	; (800e6fc <rt_hw_hard_fault_exception+0xd0>)
 800e652:	f002 fac1 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r02: 0x%08x\n", context->exception_stack_frame.r2);
 800e656:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e658:	4829      	ldr	r0, [pc, #164]	; (800e700 <rt_hw_hard_fault_exception+0xd4>)
 800e65a:	f002 fabd 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r03: 0x%08x\n", context->exception_stack_frame.r3);
 800e65e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e660:	4828      	ldr	r0, [pc, #160]	; (800e704 <rt_hw_hard_fault_exception+0xd8>)
 800e662:	f002 fab9 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r04: 0x%08x\n", context->r4);
 800e666:	68a1      	ldr	r1, [r4, #8]
 800e668:	4827      	ldr	r0, [pc, #156]	; (800e708 <rt_hw_hard_fault_exception+0xdc>)
 800e66a:	f002 fab5 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r05: 0x%08x\n", context->r5);
 800e66e:	68e1      	ldr	r1, [r4, #12]
 800e670:	4826      	ldr	r0, [pc, #152]	; (800e70c <rt_hw_hard_fault_exception+0xe0>)
 800e672:	f002 fab1 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r06: 0x%08x\n", context->r6);
 800e676:	6921      	ldr	r1, [r4, #16]
 800e678:	4825      	ldr	r0, [pc, #148]	; (800e710 <rt_hw_hard_fault_exception+0xe4>)
 800e67a:	f002 faad 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r07: 0x%08x\n", context->r7);
 800e67e:	6961      	ldr	r1, [r4, #20]
 800e680:	4824      	ldr	r0, [pc, #144]	; (800e714 <rt_hw_hard_fault_exception+0xe8>)
 800e682:	f002 faa9 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r08: 0x%08x\n", context->r8);
 800e686:	69a1      	ldr	r1, [r4, #24]
 800e688:	4823      	ldr	r0, [pc, #140]	; (800e718 <rt_hw_hard_fault_exception+0xec>)
 800e68a:	f002 faa5 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r09: 0x%08x\n", context->r9);
 800e68e:	69e1      	ldr	r1, [r4, #28]
 800e690:	4822      	ldr	r0, [pc, #136]	; (800e71c <rt_hw_hard_fault_exception+0xf0>)
 800e692:	f002 faa1 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r10: 0x%08x\n", context->r10);
 800e696:	6a21      	ldr	r1, [r4, #32]
 800e698:	4821      	ldr	r0, [pc, #132]	; (800e720 <rt_hw_hard_fault_exception+0xf4>)
 800e69a:	f002 fa9d 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r11: 0x%08x\n", context->r11);
 800e69e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e6a0:	4820      	ldr	r0, [pc, #128]	; (800e724 <rt_hw_hard_fault_exception+0xf8>)
 800e6a2:	f002 fa99 	bl	8010bd8 <rt_kprintf>
    rt_kprintf("r12: 0x%08x\n", context->exception_stack_frame.r12);
 800e6a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e6a8:	481f      	ldr	r0, [pc, #124]	; (800e728 <rt_hw_hard_fault_exception+0xfc>)
 800e6aa:	f002 fa95 	bl	8010bd8 <rt_kprintf>
    rt_kprintf(" lr: 0x%08x\n", context->exception_stack_frame.lr);
 800e6ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e6b0:	481e      	ldr	r0, [pc, #120]	; (800e72c <rt_hw_hard_fault_exception+0x100>)
 800e6b2:	f002 fa91 	bl	8010bd8 <rt_kprintf>
    rt_kprintf(" pc: 0x%08x\n", context->exception_stack_frame.pc);
 800e6b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e6b8:	481d      	ldr	r0, [pc, #116]	; (800e730 <rt_hw_hard_fault_exception+0x104>)
 800e6ba:	f002 fa8d 	bl	8010bd8 <rt_kprintf>

    if (exception_info->exc_return & (1 << 2))
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	f013 0f04 	tst.w	r3, #4
 800e6c4:	d00a      	beq.n	800e6dc <rt_hw_hard_fault_exception+0xb0>
    {
        rt_kprintf("hard fault on thread: %s\r\n\r\n", rt_thread_self()->name);
 800e6c6:	f000 fd43 	bl	800f150 <rt_thread_self>
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	4819      	ldr	r0, [pc, #100]	; (800e734 <rt_hw_hard_fault_exception+0x108>)
 800e6ce:	f002 fa83 	bl	8010bd8 <rt_kprintf>
    else
    {
        rt_kprintf("hard fault on handler\r\n\r\n");
    }

    if ( (exception_info->exc_return & 0x10) == 0)
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	f013 0f10 	tst.w	r3, #16
 800e6d8:	d004      	beq.n	800e6e4 <rt_hw_hard_fault_exception+0xb8>
 800e6da:	e7fe      	b.n	800e6da <rt_hw_hard_fault_exception+0xae>
        rt_kprintf("hard fault on handler\r\n\r\n");
 800e6dc:	4816      	ldr	r0, [pc, #88]	; (800e738 <rt_hw_hard_fault_exception+0x10c>)
 800e6de:	f002 fa7b 	bl	8010bd8 <rt_kprintf>
 800e6e2:	e7f6      	b.n	800e6d2 <rt_hw_hard_fault_exception+0xa6>
    {
        rt_kprintf("FPU active!\r\n");
 800e6e4:	4815      	ldr	r0, [pc, #84]	; (800e73c <rt_hw_hard_fault_exception+0x110>)
 800e6e6:	f002 fa77 	bl	8010bd8 <rt_kprintf>
 800e6ea:	e7f6      	b.n	800e6da <rt_hw_hard_fault_exception+0xae>
#ifdef RT_USING_FINSH
    hard_fault_track();
#endif /* RT_USING_FINSH */

    while (1);
}
 800e6ec:	bd10      	pop	{r4, pc}
 800e6ee:	bf00      	nop
 800e6f0:	200040bc 	.word	0x200040bc
 800e6f4:	08011f48 	.word	0x08011f48
 800e6f8:	08011f58 	.word	0x08011f58
 800e6fc:	08011f68 	.word	0x08011f68
 800e700:	08011f78 	.word	0x08011f78
 800e704:	08011f88 	.word	0x08011f88
 800e708:	08011f98 	.word	0x08011f98
 800e70c:	08011fa8 	.word	0x08011fa8
 800e710:	08011fb8 	.word	0x08011fb8
 800e714:	08011fc8 	.word	0x08011fc8
 800e718:	08011fd8 	.word	0x08011fd8
 800e71c:	08011fe8 	.word	0x08011fe8
 800e720:	08011ff8 	.word	0x08011ff8
 800e724:	08012008 	.word	0x08012008
 800e728:	08012018 	.word	0x08012018
 800e72c:	08012028 	.word	0x08012028
 800e730:	08012038 	.word	0x08012038
 800e734:	08012048 	.word	0x08012048
 800e738:	08012068 	.word	0x08012068
 800e73c:	08012084 	.word	0x08012084

0800e740 <thread_greenlight>:
//参数说明：无
//功能概要：等待绿灯事件被触发，反转绿灯
//内部调用：无
//======================================================================
void thread_greenlight()
{
 800e740:	b500      	push	{lr}
 800e742:	b085      	sub	sp, #20
	//（1）======申请局部变量=========================================
    uint32_t recvedstate;
    printf("第一次进入绿灯线程!\r\n");
 800e744:	4813      	ldr	r0, [pc, #76]	; (800e794 <thread_greenlight+0x54>)
 800e746:	f000 fc57 	bl	800eff8 <myprintf>
	gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 800e74a:	2201      	movs	r2, #1
 800e74c:	4611      	mov	r1, r2
 800e74e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800e752:	f001 fb55 	bl	800fe00 <gpio_init>
	//（2）======主循环（开始）==========================================
    while (1)
    {
    	uart_send_string(UART_User,(void *)"在绿灯线程中，等待绿灯事件被触发\r\n");
 800e756:	4910      	ldr	r1, [pc, #64]	; (800e798 <thread_greenlight+0x58>)
 800e758:	2002      	movs	r0, #2
 800e75a:	f002 fee1 	bl	8011520 <uart_send_string>
    	//一直等待GREEN_LIGHT_EVENT事件字
        rt_event_recv(EventWord,GREEN_LIGHT_EVENT,RT_EVENT_FLAG_OR|RT_EVENT_FLAG_CLEAR,RT_WAITING_FOREVER,&recvedstate);
 800e75e:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <thread_greenlight+0x5c>)
 800e760:	6818      	ldr	r0, [r3, #0]
 800e762:	ab03      	add	r3, sp, #12
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	f04f 33ff 	mov.w	r3, #4294967295
 800e76a:	2206      	movs	r2, #6
 800e76c:	2104      	movs	r1, #4
 800e76e:	f001 fd8e 	bl	801028e <rt_event_recv>
    	if(recvedstate==GREEN_LIGHT_EVENT)  //如果接收完成且正确
 800e772:	9b03      	ldr	r3, [sp, #12]
 800e774:	2b04      	cmp	r3, #4
 800e776:	d1ee      	bne.n	800e756 <thread_greenlight+0x16>
    	{
			uart_send_string(UART_User,(void *)"在绿灯线程中，收到绿灯事件，绿灯反转\r\n");
 800e778:	4909      	ldr	r1, [pc, #36]	; (800e7a0 <thread_greenlight+0x60>)
 800e77a:	2002      	movs	r0, #2
 800e77c:	f002 fed0 	bl	8011520 <uart_send_string>
            gpio_reverse(LIGHT_GREEN);     //转换绿灯状态
 800e780:	f44f 7084 	mov.w	r0, #264	; 0x108
 800e784:	f001 fb74 	bl	800fe70 <gpio_reverse>
			rt_event_send(EventWord,BLUE_LIGHT_EVENT);
 800e788:	2108      	movs	r1, #8
 800e78a:	4b04      	ldr	r3, [pc, #16]	; (800e79c <thread_greenlight+0x5c>)
 800e78c:	6818      	ldr	r0, [r3, #0]
 800e78e:	f001 fd32 	bl	80101f6 <rt_event_send>
 800e792:	e7e0      	b.n	800e756 <thread_greenlight+0x16>
 800e794:	08012094 	.word	0x08012094
 800e798:	080120ac 	.word	0x080120ac
 800e79c:	20007340 	.word	0x20007340
 800e7a0:	080120d0 	.word	0x080120d0

0800e7a4 <printk_putc>:
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	460c      	mov	r4, r1
	switch (info->dest) {
 800e7a8:	6813      	ldr	r3, [r2, #0]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d005      	beq.n	800e7ba <printk_putc+0x16>
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d007      	beq.n	800e7c2 <printk_putc+0x1e>
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	6023      	str	r3, [r4, #0]
}
 800e7b8:	bd10      	pop	{r4, pc}
		info->func((char) c);
 800e7ba:	6853      	ldr	r3, [r2, #4]
 800e7bc:	b2c0      	uxtb	r0, r0
 800e7be:	4798      	blx	r3
		break;
 800e7c0:	e7f7      	b.n	800e7b2 <printk_putc+0xe>
		*(info->loc) = (unsigned char) c;
 800e7c2:	6893      	ldr	r3, [r2, #8]
 800e7c4:	7018      	strb	r0, [r3, #0]
		++(info->loc);
 800e7c6:	6893      	ldr	r3, [r2, #8]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	6093      	str	r3, [r2, #8]
		break;
 800e7cc:	e7f1      	b.n	800e7b2 <printk_putc+0xe>

0800e7ce <printk_mknumstr>:
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char *numstr, void *nump, int neg, int radix)
{
 800e7ce:	b430      	push	{r4, r5}
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
 800e7d0:	1c44      	adds	r4, r0, #1
 800e7d2:	2500      	movs	r5, #0
 800e7d4:	7005      	strb	r5, [r0, #0]

	if (neg) {
 800e7d6:	b1b2      	cbz	r2, 800e806 <printk_mknumstr+0x38>
		a = *(int *) nump;
 800e7d8:	6809      	ldr	r1, [r1, #0]
		if (a == 0) {
 800e7da:	b109      	cbz	r1, 800e7e0 <printk_mknumstr+0x12>
	nlen = 0;
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e009      	b.n	800e7f4 <printk_mknumstr+0x26>
			*nstrp = '0';
 800e7e0:	2330      	movs	r3, #48	; 0x30
 800e7e2:	7043      	strb	r3, [r0, #1]
			++nlen;
 800e7e4:	2001      	movs	r0, #1
			goto done;
 800e7e6:	e024      	b.n	800e832 <printk_mknumstr+0x64>
		}
		while (a != 0) {
			b = (int) a / (int) radix;
			c = (int) a - ((int) b * (int) radix);
			if (c < 0) {
				c = ~c + 1 + '0';
 800e7e8:	f1c1 0130 	rsb	r1, r1, #48	; 0x30
			} else {
				c = c + '0';
			}
			a = b;
			*nstrp++ = (char) c;
 800e7ec:	7021      	strb	r1, [r4, #0]
			++nlen;
 800e7ee:	3001      	adds	r0, #1
			*nstrp++ = (char) c;
 800e7f0:	3401      	adds	r4, #1
			a = b;
 800e7f2:	4611      	mov	r1, r2
		while (a != 0) {
 800e7f4:	b1e9      	cbz	r1, 800e832 <printk_mknumstr+0x64>
			b = (int) a / (int) radix;
 800e7f6:	fb91 f2f3 	sdiv	r2, r1, r3
 800e7fa:	fb03 1112 	mls	r1, r3, r2, r1
			if (c < 0) {
 800e7fe:	2900      	cmp	r1, #0
 800e800:	dbf2      	blt.n	800e7e8 <printk_mknumstr+0x1a>
				c = c + '0';
 800e802:	3130      	adds	r1, #48	; 0x30
 800e804:	e7f2      	b.n	800e7ec <printk_mknumstr+0x1e>
 800e806:	4615      	mov	r5, r2
		}
	} else {
		ua = *(unsigned int *) nump;
 800e808:	680a      	ldr	r2, [r1, #0]
		if (ua == 0) {
 800e80a:	b942      	cbnz	r2, 800e81e <printk_mknumstr+0x50>
			*nstrp = '0';
 800e80c:	2330      	movs	r3, #48	; 0x30
 800e80e:	7043      	strb	r3, [r0, #1]
			++nlen;
 800e810:	2001      	movs	r0, #1
			goto done;
 800e812:	e00e      	b.n	800e832 <printk_mknumstr+0x64>
			ub = (unsigned int) ua / (unsigned int) radix;
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
			if (uc < 10) {
				uc = uc + '0';
			} else {
				uc = uc - 10 + 'A';
 800e814:	3237      	adds	r2, #55	; 0x37
			}
			ua = ub;
			*nstrp++ = (char) uc;
 800e816:	7022      	strb	r2, [r4, #0]
			++nlen;
 800e818:	3501      	adds	r5, #1
			*nstrp++ = (char) uc;
 800e81a:	3401      	adds	r4, #1
			ua = ub;
 800e81c:	460a      	mov	r2, r1
		while (ua != 0) {
 800e81e:	b13a      	cbz	r2, 800e830 <printk_mknumstr+0x62>
			ub = (unsigned int) ua / (unsigned int) radix;
 800e820:	fbb2 f1f3 	udiv	r1, r2, r3
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
 800e824:	fb01 2213 	mls	r2, r1, r3, r2
			if (uc < 10) {
 800e828:	2a09      	cmp	r2, #9
 800e82a:	d8f3      	bhi.n	800e814 <printk_mknumstr+0x46>
				uc = uc + '0';
 800e82c:	3230      	adds	r2, #48	; 0x30
 800e82e:	e7f2      	b.n	800e816 <printk_mknumstr+0x48>
		}
	}
	done: return nlen;
 800e830:	4628      	mov	r0, r5
}
 800e832:	bc30      	pop	{r4, r5}
 800e834:	4770      	bx	lr

0800e836 <printk_pad_zero>:
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
 800e836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e838:	4604      	mov	r4, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	4617      	mov	r7, r2
 800e83e:	461e      	mov	r6, r3
	int i;

	for (i = curlen; i < field_width; i++) {
 800e840:	e005      	b.n	800e84e <printk_pad_zero+0x18>
		printk_putc('0', count, info);
 800e842:	4632      	mov	r2, r6
 800e844:	4639      	mov	r1, r7
 800e846:	2030      	movs	r0, #48	; 0x30
 800e848:	f7ff ffac 	bl	800e7a4 <printk_putc>
	for (i = curlen; i < field_width; i++) {
 800e84c:	3401      	adds	r4, #1
 800e84e:	42ac      	cmp	r4, r5
 800e850:	dbf7      	blt.n	800e842 <printk_pad_zero+0xc>
	}
}
 800e852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e854 <printk_pad_space>:

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
 800e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e856:	4604      	mov	r4, r0
 800e858:	460d      	mov	r5, r1
 800e85a:	4617      	mov	r7, r2
 800e85c:	461e      	mov	r6, r3
	int i;

	for (i = curlen; i < field_width; i++) {
 800e85e:	e005      	b.n	800e86c <printk_pad_space+0x18>
		printk_putc(' ', count, info);
 800e860:	4632      	mov	r2, r6
 800e862:	4639      	mov	r1, r7
 800e864:	2020      	movs	r0, #32
 800e866:	f7ff ff9d 	bl	800e7a4 <printk_putc>
	for (i = curlen; i < field_width; i++) {
 800e86a:	3401      	adds	r4, #1
 800e86c:	42ac      	cmp	r4, r5
 800e86e:	dbf7      	blt.n	800e860 <printk_pad_space+0xc>
	}
}
 800e870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e872 <out_char>:
void out_char(char data) {
 800e872:	b508      	push	{r3, lr}
	uart_send1(UART_printf, data);
 800e874:	4601      	mov	r1, r0
 800e876:	2003      	movs	r0, #3
 800e878:	f002 fe14 	bl	80114a4 <uart_send1>
}
 800e87c:	bd08      	pop	{r3, pc}
	...

0800e880 <printk_mkfloatstr>:
{
 800e880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e884:	b099      	sub	sp, #100	; 0x64
 800e886:	4604      	mov	r4, r0
 800e888:	4689      	mov	r9, r1
 800e88a:	4692      	mov	sl, r2
	uint32_t p,i,j,k,a[5]={0},b[19]={0};
 800e88c:	2100      	movs	r1, #0
 800e88e:	9113      	str	r1, [sp, #76]	; 0x4c
 800e890:	9114      	str	r1, [sp, #80]	; 0x50
 800e892:	9115      	str	r1, [sp, #84]	; 0x54
 800e894:	9116      	str	r1, [sp, #88]	; 0x58
 800e896:	9117      	str	r1, [sp, #92]	; 0x5c
 800e898:	224c      	movs	r2, #76	; 0x4c
 800e89a:	4668      	mov	r0, sp
 800e89c:	f003 fb3d 	bl	8011f1a <memset>
	p=(uint32_t)*f;//整数部分
 800e8a0:	e9d4 4500 	ldrd	r4, r5, [r4]
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	f7ff fcc4 	bl	800e234 <__aeabi_d2uiz>
 800e8ac:	4680      	mov	r8, r0
	tempf=(*f-p);
 800e8ae:	f7ff f9ad 	bl	800dc0c <__aeabi_ui2d>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7ff f869 	bl	800d990 <__aeabi_dsub>
 800e8be:	4604      	mov	r4, r0
 800e8c0:	460d      	mov	r5, r1
	if(precision_width==0)
 800e8c2:	f1ba 0f00 	cmp.w	sl, #0
 800e8c6:	d118      	bne.n	800e8fa <printk_mkfloatstr+0x7a>
	   q=(*f-p)*100000000000000000;    //小数部分
 800e8c8:	a35c      	add	r3, pc, #368	; (adr r3, 800ea3c <printk_mkfloatstr+0x1bc>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	f7ff fa17 	bl	800dd00 <__aeabi_dmul>
 800e8d2:	f7ff fce7 	bl	800e2a4 <__aeabi_d2ulz>
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	460f      	mov	r7, r1
	k=0;
 800e8da:	f04f 0b00 	mov.w	fp, #0
	while(m<1&&m!=0)    //【20201119】-2/3   原为while(m<1)
 800e8de:	e018      	b.n	800e912 <printk_mkfloatstr+0x92>
		tempf*=10;
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4b53      	ldr	r3, [pc, #332]	; (800ea30 <printk_mkfloatstr+0x1b0>)
 800e8e4:	f7ff fa0c 	bl	800dd00 <__aeabi_dmul>
		while(precision_width--)    
 800e8e8:	4633      	mov	r3, r6
 800e8ea:	1e5e      	subs	r6, r3, #1
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1f7      	bne.n	800e8e0 <printk_mkfloatstr+0x60>
		q=tempf;
 800e8f0:	f7ff fcd8 	bl	800e2a4 <__aeabi_d2ulz>
 800e8f4:	4606      	mov	r6, r0
 800e8f6:	460f      	mov	r7, r1
 800e8f8:	e7ef      	b.n	800e8da <printk_mkfloatstr+0x5a>
 800e8fa:	4653      	mov	r3, sl
 800e8fc:	e7f5      	b.n	800e8ea <printk_mkfloatstr+0x6a>
		m=m*10;
 800e8fe:	2200      	movs	r2, #0
 800e900:	4b4b      	ldr	r3, [pc, #300]	; (800ea30 <printk_mkfloatstr+0x1b0>)
 800e902:	4620      	mov	r0, r4
 800e904:	4629      	mov	r1, r5
 800e906:	f7ff f9fb 	bl	800dd00 <__aeabi_dmul>
 800e90a:	4604      	mov	r4, r0
 800e90c:	460d      	mov	r5, r1
		k++;
 800e90e:	f10b 0b01 	add.w	fp, fp, #1
	while(m<1&&m!=0)    //【20201119】-2/3   原为while(m<1)
 800e912:	2200      	movs	r2, #0
 800e914:	4b47      	ldr	r3, [pc, #284]	; (800ea34 <printk_mkfloatstr+0x1b4>)
 800e916:	4620      	mov	r0, r4
 800e918:	4629      	mov	r1, r5
 800e91a:	f7ff fc63 	bl	800e1e4 <__aeabi_dcmplt>
 800e91e:	b138      	cbz	r0, 800e930 <printk_mkfloatstr+0xb0>
 800e920:	2200      	movs	r2, #0
 800e922:	2300      	movs	r3, #0
 800e924:	4620      	mov	r0, r4
 800e926:	4629      	mov	r1, r5
 800e928:	f7ff fc52 	bl	800e1d0 <__aeabi_dcmpeq>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d0e6      	beq.n	800e8fe <printk_mkfloatstr+0x7e>
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
 800e930:	f10b 35ff 	add.w	r5, fp, #4294967295
	if(0==p)//整数部分为0
 800e934:	f1b8 0f00 	cmp.w	r8, #0
 800e938:	d123      	bne.n	800e982 <printk_mkfloatstr+0x102>
		c[i++]='0';
 800e93a:	2330      	movs	r3, #48	; 0x30
 800e93c:	f889 3000 	strb.w	r3, [r9]
 800e940:	f04f 0801 	mov.w	r8, #1
	c[i++]='.';   //小数点
 800e944:	f108 0b01 	add.w	fp, r8, #1
 800e948:	232e      	movs	r3, #46	; 0x2e
 800e94a:	f809 3008 	strb.w	r3, [r9, r8]
	if(0==q)     //小数部分为0
 800e94e:	ea56 0307 	orrs.w	r3, r6, r7
 800e952:	d02c      	beq.n	800e9ae <printk_mkfloatstr+0x12e>
		j=0;
 800e954:	2400      	movs	r4, #0
 800e956:	e04c      	b.n	800e9f2 <printk_mkfloatstr+0x172>
			a[j++]=p%10;
 800e958:	4b37      	ldr	r3, [pc, #220]	; (800ea38 <printk_mkfloatstr+0x1b8>)
 800e95a:	fba3 1308 	umull	r1, r3, r3, r8
 800e95e:	08db      	lsrs	r3, r3, #3
 800e960:	4618      	mov	r0, r3
 800e962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e966:	0059      	lsls	r1, r3, #1
 800e968:	eba8 0301 	sub.w	r3, r8, r1
 800e96c:	a918      	add	r1, sp, #96	; 0x60
 800e96e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e972:	f841 3c14 	str.w	r3, [r1, #-20]
			p/=10;
 800e976:	4680      	mov	r8, r0
			a[j++]=p%10;
 800e978:	3201      	adds	r2, #1
		while(p!=0)//倒序的数字
 800e97a:	f1b8 0f00 	cmp.w	r8, #0
 800e97e:	d1eb      	bne.n	800e958 <printk_mkfloatstr+0xd8>
 800e980:	e00c      	b.n	800e99c <printk_mkfloatstr+0x11c>
		j=0;
 800e982:	2200      	movs	r2, #0
 800e984:	e7f9      	b.n	800e97a <printk_mkfloatstr+0xfa>
			c[i++]=a[j-1]+'0';
 800e986:	3a01      	subs	r2, #1
 800e988:	ab18      	add	r3, sp, #96	; 0x60
 800e98a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e98e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800e992:	3330      	adds	r3, #48	; 0x30
 800e994:	f809 3008 	strb.w	r3, [r9, r8]
 800e998:	f108 0801 	add.w	r8, r8, #1
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
 800e99c:	2a00      	cmp	r2, #0
 800e99e:	d1f2      	bne.n	800e986 <printk_mkfloatstr+0x106>
 800e9a0:	e7d0      	b.n	800e944 <printk_mkfloatstr+0xc4>
		while(zeroNum--) c[i++]='0';     //【20201119】-3/3   原为 c[i++]='0';
 800e9a2:	2230      	movs	r2, #48	; 0x30
 800e9a4:	f809 200b 	strb.w	r2, [r9, fp]
 800e9a8:	469a      	mov	sl, r3
 800e9aa:	f10b 0b01 	add.w	fp, fp, #1
 800e9ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e9b2:	f1ba 0f00 	cmp.w	sl, #0
 800e9b6:	d1f4      	bne.n	800e9a2 <printk_mkfloatstr+0x122>
	c[i]='\0';
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	f809 300b 	strb.w	r3, [r9, fp]
}
 800e9be:	4658      	mov	r0, fp
 800e9c0:	b019      	add	sp, #100	; 0x64
 800e9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[j++]=q%10;
 800e9c6:	220a      	movs	r2, #10
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	f7ff fc51 	bl	800e274 <__aeabi_uldivmod>
 800e9d2:	f104 0801 	add.w	r8, r4, #1
 800e9d6:	ab18      	add	r3, sp, #96	; 0x60
 800e9d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9dc:	f844 2c60 	str.w	r2, [r4, #-96]
			q/=10;
 800e9e0:	220a      	movs	r2, #10
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7ff fc44 	bl	800e274 <__aeabi_uldivmod>
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	460f      	mov	r7, r1
			b[j++]=q%10;
 800e9f0:	4644      	mov	r4, r8
		while(q!=0)//倒序的数字
 800e9f2:	ea56 0307 	orrs.w	r3, r6, r7
 800e9f6:	d1e6      	bne.n	800e9c6 <printk_mkfloatstr+0x146>
 800e9f8:	e007      	b.n	800ea0a <printk_mkfloatstr+0x18a>
			b[j++]=0;
 800e9fa:	ab18      	add	r3, sp, #96	; 0x60
 800e9fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea00:	2200      	movs	r2, #0
 800ea02:	f843 2c60 	str.w	r2, [r3, #-96]
			k--;
 800ea06:	3d01      	subs	r5, #1
			b[j++]=0;
 800ea08:	3401      	adds	r4, #1
		while(k!=0)
 800ea0a:	2d00      	cmp	r5, #0
 800ea0c:	d1f5      	bne.n	800e9fa <printk_mkfloatstr+0x17a>
 800ea0e:	e00a      	b.n	800ea26 <printk_mkfloatstr+0x1a6>
			c[i++]=b[j-1]+'0';
 800ea10:	3c01      	subs	r4, #1
 800ea12:	ab18      	add	r3, sp, #96	; 0x60
 800ea14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea18:	f853 3c60 	ldr.w	r3, [r3, #-96]
 800ea1c:	3330      	adds	r3, #48	; 0x30
 800ea1e:	f809 300b 	strb.w	r3, [r9, fp]
 800ea22:	f10b 0b01 	add.w	fp, fp, #1
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
 800ea26:	2c00      	cmp	r4, #0
 800ea28:	d1f2      	bne.n	800ea10 <printk_mkfloatstr+0x190>
 800ea2a:	e7c5      	b.n	800e9b8 <printk_mkfloatstr+0x138>
 800ea2c:	f3af 8000 	nop.w
 800ea30:	40240000 	.word	0x40240000
 800ea34:	3ff00000 	.word	0x3ff00000
 800ea38:	cccccccd 	.word	0xcccccccd
 800ea3c:	85d8a000 	.word	0x85d8a000
 800ea40:	43763457 	.word	0x43763457

0800ea44 <printk>:
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
 800ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	b097      	sub	sp, #92	; 0x5c
 800ea4a:	9001      	str	r0, [sp, #4]
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	4691      	mov	r9, r2

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
 800ea50:	2221      	movs	r2, #33	; 0x21
 800ea52:	2100      	movs	r1, #0
 800ea54:	a80d      	add	r0, sp, #52	; 0x34
 800ea56:	f003 fa60 	bl	8011f1a <memset>
 800ea5a:	2330      	movs	r3, #48	; 0x30
 800ea5c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	930c      	str	r3, [sp, #48]	; 0x30
	length_modifier=0;
	precision_used=TRUE;
 800ea64:	2201      	movs	r2, #1
 800ea66:	9202      	str	r2, [sp, #8]
	length_modifier=0;
 800ea68:	469b      	mov	fp, r3
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
 800ea6a:	e00b      	b.n	800ea84 <printk+0x40>
			if (c != '\n') {
				printk_putc(c, &count, info);
			}
			//输出换行符
			else {
				printk_putc(0x0D /* CR */, &count, info);
 800ea6c:	9d01      	ldr	r5, [sp, #4]
 800ea6e:	462a      	mov	r2, r5
 800ea70:	a90c      	add	r1, sp, #48	; 0x30
 800ea72:	200d      	movs	r0, #13
 800ea74:	f7ff fe96 	bl	800e7a4 <printk_putc>
				printk_putc(0x0A /* LF */, &count, info);
 800ea78:	462a      	mov	r2, r5
 800ea7a:	a90c      	add	r1, sp, #48	; 0x30
 800ea7c:	200a      	movs	r0, #10
 800ea7e:	f7ff fe91 	bl	800e7a4 <printk_putc>
	for (p = (char *) fmt; (c = *p) != 0; p++)
 800ea82:	3401      	adds	r4, #1
 800ea84:	7820      	ldrb	r0, [r4, #0]
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f000 82b2 	beq.w	800eff0 <printk+0x5ac>
		if (c != '%')
 800ea8c:	2825      	cmp	r0, #37	; 0x25
 800ea8e:	d041      	beq.n	800eb14 <printk+0xd0>
			if (c != '\n') {
 800ea90:	280a      	cmp	r0, #10
 800ea92:	d0eb      	beq.n	800ea6c <printk+0x28>
				printk_putc(c, &count, info);
 800ea94:	9a01      	ldr	r2, [sp, #4]
 800ea96:	a90c      	add	r1, sp, #48	; 0x30
 800ea98:	f7ff fe84 	bl	800e7a4 <printk_putc>
 800ea9c:	e7f1      	b.n	800ea82 <printk+0x3e>
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
			case '-':
				flags_used |= FLAGS_MINUS;
 800ea9e:	f046 0601 	orr.w	r6, r6, #1
{
 800eaa2:	4614      	mov	r4, r2
		while (!done) {
 800eaa4:	2900      	cmp	r1, #0
 800eaa6:	d13a      	bne.n	800eb1e <printk+0xda>
			switch (/* c = */*++p) {
 800eaa8:	1c62      	adds	r2, r4, #1
 800eaaa:	7863      	ldrb	r3, [r4, #1]
 800eaac:	3b20      	subs	r3, #32
 800eaae:	2b10      	cmp	r3, #16
 800eab0:	d833      	bhi.n	800eb1a <printk+0xd6>
 800eab2:	a001      	add	r0, pc, #4	; (adr r0, 800eab8 <printk+0x74>)
 800eab4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eab8:	0800eb03 	.word	0x0800eb03
 800eabc:	0800eb1b 	.word	0x0800eb1b
 800eac0:	0800eb1b 	.word	0x0800eb1b
 800eac4:	0800eb0f 	.word	0x0800eb0f
 800eac8:	0800eb1b 	.word	0x0800eb1b
 800eacc:	0800eb1b 	.word	0x0800eb1b
 800ead0:	0800eb1b 	.word	0x0800eb1b
 800ead4:	0800eb1b 	.word	0x0800eb1b
 800ead8:	0800eb1b 	.word	0x0800eb1b
 800eadc:	0800eb1b 	.word	0x0800eb1b
 800eae0:	0800eb1b 	.word	0x0800eb1b
 800eae4:	0800eafd 	.word	0x0800eafd
 800eae8:	0800eb1b 	.word	0x0800eb1b
 800eaec:	0800ea9f 	.word	0x0800ea9f
 800eaf0:	0800eb1b 	.word	0x0800eb1b
 800eaf4:	0800eb1b 	.word	0x0800eb1b
 800eaf8:	0800eb09 	.word	0x0800eb09
				break;
			case '+':
				flags_used |= FLAGS_PLUS;
 800eafc:	f046 0602 	orr.w	r6, r6, #2
				break;
 800eb00:	e7cf      	b.n	800eaa2 <printk+0x5e>
			case ' ':
				flags_used |= FLAGS_SPACE;
 800eb02:	f046 0604 	orr.w	r6, r6, #4
				break;
 800eb06:	e7cc      	b.n	800eaa2 <printk+0x5e>
			case '0':
				flags_used |= FLAGS_ZERO;
 800eb08:	f046 0608 	orr.w	r6, r6, #8
				break;
 800eb0c:	e7c9      	b.n	800eaa2 <printk+0x5e>
			case '#':
				flags_used |= FLAGS_POUND;
 800eb0e:	f046 0610 	orr.w	r6, r6, #16
				break;
 800eb12:	e7c6      	b.n	800eaa2 <printk+0x5e>
		flags_used = 0;
 800eb14:	2600      	movs	r6, #0
		done = FALSE;
 800eb16:	4631      	mov	r1, r6
 800eb18:	e7c4      	b.n	800eaa4 <printk+0x60>
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	e7c2      	b.n	800eaa4 <printk+0x60>
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
 800eb1e:	2500      	movs	r5, #0
		done = FALSE;
 800eb20:	462f      	mov	r7, r5
 800eb22:	e000      	b.n	800eb26 <printk+0xe2>
				field_width = (field_width * 10) + (c - '0');
				break;
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
 800eb24:	460f      	mov	r7, r1
		while (!done) {
 800eb26:	b967      	cbnz	r7, 800eb42 <printk+0xfe>
			switch (c = *++p) {
 800eb28:	1c60      	adds	r0, r4, #1
 800eb2a:	7863      	ldrb	r3, [r4, #1]
 800eb2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eb30:	2a09      	cmp	r2, #9
 800eb32:	d8f7      	bhi.n	800eb24 <printk+0xe0>
				field_width = (field_width * 10) + (c - '0');
 800eb34:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800eb38:	006a      	lsls	r2, r5, #1
 800eb3a:	3b30      	subs	r3, #48	; 0x30
 800eb3c:	18d5      	adds	r5, r2, r3
			switch (c = *++p) {
 800eb3e:	4604      	mov	r4, r0
				break;
 800eb40:	e7f1      	b.n	800eb26 <printk+0xe2>
				break;
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
 800eb42:	1c62      	adds	r2, r4, #1
 800eb44:	7863      	ldrb	r3, [r4, #1]
 800eb46:	2b2e      	cmp	r3, #46	; 0x2e
 800eb48:	d036      	beq.n	800ebb8 <printk+0x174>
		} else {
			/* we've gone one char too far */
			--p;
#if 1
			precision_used = FALSE;
			precision_width = 0;
 800eb4a:	f04f 0800 	mov.w	r8, #0
			precision_used = FALSE;
 800eb4e:	f8cd 8008 	str.w	r8, [sp, #8]
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
 800eb52:	1c63      	adds	r3, r4, #1
 800eb54:	7862      	ldrb	r2, [r4, #1]
 800eb56:	2a68      	cmp	r2, #104	; 0x68
 800eb58:	d004      	beq.n	800eb64 <printk+0x120>
 800eb5a:	2a6c      	cmp	r2, #108	; 0x6c
 800eb5c:	d042      	beq.n	800ebe4 <printk+0x1a0>
 800eb5e:	2a4c      	cmp	r2, #76	; 0x4c
 800eb60:	d043      	beq.n	800ebea <printk+0x1a6>
		case 'L':
			 length_modifier |= LENMOD_L;
			break;
		default:
			/* we've gone one char too far */
			--p;
 800eb62:	4623      	mov	r3, r4
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
 800eb64:	1c5c      	adds	r4, r3, #1
 800eb66:	7858      	ldrb	r0, [r3, #1]
 800eb68:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
 800eb6c:	2b20      	cmp	r3, #32
 800eb6e:	f200 8238 	bhi.w	800efe2 <printk+0x59e>
 800eb72:	e8df f013 	tbh	[pc, r3, lsl #1]
 800eb76:	011f      	.short	0x011f
 800eb78:	02360236 	.word	0x02360236
 800eb7c:	02360236 	.word	0x02360236
 800eb80:	02360236 	.word	0x02360236
 800eb84:	02360236 	.word	0x02360236
 800eb88:	01a20236 	.word	0x01a20236
 800eb8c:	003d01ef 	.word	0x003d01ef
 800eb90:	009a0236 	.word	0x009a0236
 800eb94:	02360236 	.word	0x02360236
 800eb98:	0236003d 	.word	0x0236003d
 800eb9c:	02360236 	.word	0x02360236
 800eba0:	022f0236 	.word	0x022f0236
 800eba4:	01b10184 	.word	0x01b10184
 800eba8:	02360236 	.word	0x02360236
 800ebac:	023601f9 	.word	0x023601f9
 800ebb0:	023601c0 	.word	0x023601c0
 800ebb4:	011f0236 	.word	0x011f0236
			precision_width = 0;
 800ebb8:	f04f 0800 	mov.w	r8, #0
			done = FALSE;
 800ebbc:	4640      	mov	r0, r8
 800ebbe:	e000      	b.n	800ebc2 <printk+0x17e>
					done = TRUE;
 800ebc0:	4638      	mov	r0, r7
			while (!done) {
 800ebc2:	b968      	cbnz	r0, 800ebe0 <printk+0x19c>
				switch ( c = *++p) {
 800ebc4:	1c54      	adds	r4, r2, #1
 800ebc6:	7853      	ldrb	r3, [r2, #1]
 800ebc8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ebcc:	2909      	cmp	r1, #9
 800ebce:	d8f7      	bhi.n	800ebc0 <printk+0x17c>
				precision_width = (precision_width * 10) +	(c - '0');
 800ebd0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800ebd4:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800ebd8:	eb02 0801 	add.w	r8, r2, r1
				switch ( c = *++p) {
 800ebdc:	4622      	mov	r2, r4
					break;
 800ebde:	e7f0      	b.n	800ebc2 <printk+0x17e>
 800ebe0:	4614      	mov	r4, r2
 800ebe2:	e7b6      	b.n	800eb52 <printk+0x10e>
			 length_modifier |= LENMOD_l;
 800ebe4:	f04b 0b01 	orr.w	fp, fp, #1
			break;
 800ebe8:	e7bc      	b.n	800eb64 <printk+0x120>
			 length_modifier |= LENMOD_L;
 800ebea:	f04b 0b02 	orr.w	fp, fp, #2
			break;
 800ebee:	e7b9      	b.n	800eb64 <printk+0x120>
		case 'd':
		case 'i':
			 //此时ap为指向可变参数列表的第一个参数
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ebf0:	f109 0704 	add.w	r7, r9, #4
 800ebf4:	f8d9 3000 	ldr.w	r3, [r9]
 800ebf8:	a916      	add	r1, sp, #88	; 0x58
 800ebfa:	f841 3d2c 	str.w	r3, [r1, #-44]!
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ebfe:	230a      	movs	r3, #10
 800ec00:	2201      	movs	r2, #1
 800ec02:	a80d      	add	r0, sp, #52	; 0x34
 800ec04:	f7ff fde3 	bl	800e7ce <printk_mknumstr>
 800ec08:	4682      	mov	sl, r0
			vstrp = &vstr[vlen];  //指向转换后的最后一个字符
 800ec0a:	ab0d      	add	r3, sp, #52	; 0x34
 800ec0c:	eb03 0800 	add.w	r8, r3, r0

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
 800ec10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	db07      	blt.n	800ec26 <printk+0x1e2>
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
 800ec16:	f016 0f02 	tst.w	r6, #2
 800ec1a:	d017      	beq.n	800ec4c <printk+0x208>
					schar = '+';
					++vlen;
 800ec1c:	f100 0a01 	add.w	sl, r0, #1
					schar = '+';
 800ec20:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800ec24:	e003      	b.n	800ec2e <printk+0x1ea>
				++vlen;
 800ec26:	f100 0a01 	add.w	sl, r0, #1
				schar = '-';
 800ec2a:	f04f 092d 	mov.w	r9, #45	; 0x2d
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
 800ec2e:	f016 0f08 	tst.w	r6, #8
 800ec32:	d019      	beq.n	800ec68 <printk+0x224>
				if (schar)
 800ec34:	f1b9 0f00 	cmp.w	r9, #0
 800ec38:	d110      	bne.n	800ec5c <printk+0x218>
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
 800ec3a:	9b01      	ldr	r3, [sp, #4]
 800ec3c:	aa0c      	add	r2, sp, #48	; 0x30
 800ec3e:	4629      	mov	r1, r5
 800ec40:	4650      	mov	r0, sl
 800ec42:	f7ff fdf8 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800ec46:	46aa      	mov	sl, r5
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec48:	46b9      	mov	r9, r7
 800ec4a:	e171      	b.n	800ef30 <printk+0x4ec>
					if (IS_FLAG_SPACE(flags_used)) {
 800ec4c:	f016 0904 	ands.w	r9, r6, #4
 800ec50:	d0ed      	beq.n	800ec2e <printk+0x1ea>
						++vlen;
 800ec52:	f100 0a01 	add.w	sl, r0, #1
						schar = ' ';
 800ec56:	f04f 0920 	mov.w	r9, #32
 800ec5a:	e7e8      	b.n	800ec2e <printk+0x1ea>
					printk_putc(schar, &count, info);  //输出符号
 800ec5c:	9a01      	ldr	r2, [sp, #4]
 800ec5e:	a90c      	add	r1, sp, #48	; 0x30
 800ec60:	4648      	mov	r0, r9
 800ec62:	f7ff fd9f 	bl	800e7a4 <printk_putc>
 800ec66:	e7e8      	b.n	800ec3a <printk+0x1f6>
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
 800ec68:	f016 0f01 	tst.w	r6, #1
 800ec6c:	d004      	beq.n	800ec78 <printk+0x234>
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
 800ec6e:	f1b9 0f00 	cmp.w	r9, #0
 800ec72:	d113      	bne.n	800ec9c <printk+0x258>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec74:	46b9      	mov	r9, r7
 800ec76:	e15b      	b.n	800ef30 <printk+0x4ec>
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
 800ec78:	9b01      	ldr	r3, [sp, #4]
 800ec7a:	aa0c      	add	r2, sp, #48	; 0x30
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	4650      	mov	r0, sl
 800ec80:	f7ff fde8 	bl	800e854 <printk_pad_space>
					if (schar)
 800ec84:	f1b9 0f00 	cmp.w	r9, #0
 800ec88:	d101      	bne.n	800ec8e <printk+0x24a>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec8a:	46b9      	mov	r9, r7
 800ec8c:	e150      	b.n	800ef30 <printk+0x4ec>
						printk_putc(schar, &count, info);
 800ec8e:	9a01      	ldr	r2, [sp, #4]
 800ec90:	a90c      	add	r1, sp, #48	; 0x30
 800ec92:	4648      	mov	r0, r9
 800ec94:	f7ff fd86 	bl	800e7a4 <printk_putc>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec98:	46b9      	mov	r9, r7
 800ec9a:	e149      	b.n	800ef30 <printk+0x4ec>
				printk_putc(schar, &count, info);
 800ec9c:	9a01      	ldr	r2, [sp, #4]
 800ec9e:	a90c      	add	r1, sp, #48	; 0x30
 800eca0:	4648      	mov	r0, r9
 800eca2:	f7ff fd7f 	bl	800e7a4 <printk_putc>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800eca6:	46b9      	mov	r9, r7
 800eca8:	e142      	b.n	800ef30 <printk+0x4ec>
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg(ap,double);
 800ecaa:	f109 070c 	add.w	r7, r9, #12
 800ecae:	e9d9 9a01 	ldrd	r9, sl, [r9, #4]
 800ecb2:	e9cd 9a08 	strd	r9, sl, [sp, #32]
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	4648      	mov	r0, r9
 800ecbc:	4651      	mov	r1, sl
 800ecbe:	f7ff fa91 	bl	800e1e4 <__aeabi_dcmplt>
 800ecc2:	b940      	cbnz	r0, 800ecd6 <printk+0x292>
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
 800ecc4:	f016 0f02 	tst.w	r6, #2
 800ecc8:	d12b      	bne.n	800ed22 <printk+0x2de>
					schar = '+';
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
 800ecca:	f016 0904 	ands.w	r9, r6, #4
 800ecce:	d00d      	beq.n	800ecec <printk+0x2a8>
						schar = ' ';
 800ecd0:	f04f 0920 	mov.w	r9, #32
 800ecd4:	e00a      	b.n	800ecec <printk+0x2a8>
				fval = -fval;				//负数取它的正数
 800ecd6:	f8cd 9010 	str.w	r9, [sp, #16]
 800ecda:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800ecde:	9305      	str	r3, [sp, #20]
 800ece0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ece4:	ed8d 7b08 	vstr	d7, [sp, #32]
				schar = '-';
 800ece8:	f04f 092d 	mov.w	r9, #45	; 0x2d
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
 800ecec:	9b02      	ldr	r3, [sp, #8]
 800ecee:	b9db      	cbnz	r3, 800ed28 <printk+0x2e4>
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{
				if(length_modifier==0)   //浮点型精度到小数点后8位
 800ecf0:	f1bb 0f00 	cmp.w	fp, #0
 800ecf4:	d11f      	bne.n	800ed36 <printk+0x2f2>
				{
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ecf6:	2206      	movs	r2, #6
 800ecf8:	a90d      	add	r1, sp, #52	; 0x34
 800ecfa:	a808      	add	r0, sp, #32
 800ecfc:	f7ff fdc0 	bl	800e880 <printk_mkfloatstr>
 800ed00:	4680      	mov	r8, r0
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
 800ed02:	f016 0f08 	tst.w	r6, #8
 800ed06:	d023      	beq.n	800ed50 <printk+0x30c>
				if (schar)
 800ed08:	f1b9 0f00 	cmp.w	r9, #0
 800ed0c:	d11a      	bne.n	800ed44 <printk+0x300>
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
 800ed0e:	9b01      	ldr	r3, [sp, #4]
 800ed10:	aa0c      	add	r2, sp, #48	; 0x30
 800ed12:	4629      	mov	r1, r5
 800ed14:	4640      	mov	r0, r8
 800ed16:	f7ff fd8e 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800ed1a:	46a8      	mov	r8, r5
 800ed1c:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 800ed20:	e037      	b.n	800ed92 <printk+0x34e>
					schar = '+';
 800ed22:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800ed26:	e7e1      	b.n	800ecec <printk+0x2a8>
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ed28:	4642      	mov	r2, r8
 800ed2a:	a90d      	add	r1, sp, #52	; 0x34
 800ed2c:	a808      	add	r0, sp, #32
 800ed2e:	f7ff fda7 	bl	800e880 <printk_mkfloatstr>
 800ed32:	4680      	mov	r8, r0
 800ed34:	e7e5      	b.n	800ed02 <printk+0x2be>
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ed36:	2206      	movs	r2, #6
 800ed38:	a90d      	add	r1, sp, #52	; 0x34
 800ed3a:	a808      	add	r0, sp, #32
 800ed3c:	f7ff fda0 	bl	800e880 <printk_mkfloatstr>
 800ed40:	4680      	mov	r8, r0
 800ed42:	e7de      	b.n	800ed02 <printk+0x2be>
					printk_putc(schar, &count, info);  //输出符号
 800ed44:	9a01      	ldr	r2, [sp, #4]
 800ed46:	a90c      	add	r1, sp, #48	; 0x30
 800ed48:	4648      	mov	r0, r9
 800ed4a:	f7ff fd2b 	bl	800e7a4 <printk_putc>
 800ed4e:	e7de      	b.n	800ed0e <printk+0x2ca>
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
 800ed50:	f016 0f01 	tst.w	r6, #1
 800ed54:	d008      	beq.n	800ed68 <printk+0x324>
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
 800ed56:	f1b9 0f00 	cmp.w	r9, #0
 800ed5a:	d0df      	beq.n	800ed1c <printk+0x2d8>
				printk_putc(schar, &count, info);
 800ed5c:	9a01      	ldr	r2, [sp, #4]
 800ed5e:	a90c      	add	r1, sp, #48	; 0x30
 800ed60:	4648      	mov	r0, r9
 800ed62:	f7ff fd1f 	bl	800e7a4 <printk_putc>
 800ed66:	e7d9      	b.n	800ed1c <printk+0x2d8>
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
 800ed68:	9b01      	ldr	r3, [sp, #4]
 800ed6a:	aa0c      	add	r2, sp, #48	; 0x30
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f7ff fd70 	bl	800e854 <printk_pad_space>
					if (schar)
 800ed74:	f1b9 0f00 	cmp.w	r9, #0
 800ed78:	d0d0      	beq.n	800ed1c <printk+0x2d8>
						printk_putc(schar, &count, info);
 800ed7a:	9a01      	ldr	r2, [sp, #4]
 800ed7c:	a90c      	add	r1, sp, #48	; 0x30
 800ed7e:	4648      	mov	r0, r9
 800ed80:	f7ff fd10 	bl	800e7a4 <printk_putc>
 800ed84:	e7ca      	b.n	800ed1c <printk+0x2d8>
			}
			while (*vstrp)
				printk_putc(*vstrp++, &count, info);
 800ed86:	f109 0901 	add.w	r9, r9, #1
 800ed8a:	9a01      	ldr	r2, [sp, #4]
 800ed8c:	a90c      	add	r1, sp, #48	; 0x30
 800ed8e:	f7ff fd09 	bl	800e7a4 <printk_putc>
			while (*vstrp)
 800ed92:	f899 0000 	ldrb.w	r0, [r9]
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d1f5      	bne.n	800ed86 <printk+0x342>
			if (IS_FLAG_MINUS(flags_used)) {
 800ed9a:	f016 0f01 	tst.w	r6, #1
 800ed9e:	d101      	bne.n	800eda4 <printk+0x360>
			fval= (double)va_arg(ap,double);
 800eda0:	46b9      	mov	r9, r7
 800eda2:	e66e      	b.n	800ea82 <printk+0x3e>
				printk_pad_space(vlen, field_width, &count, info);
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	aa0c      	add	r2, sp, #48	; 0x30
 800eda8:	4629      	mov	r1, r5
 800edaa:	4640      	mov	r0, r8
 800edac:	f7ff fd52 	bl	800e854 <printk_pad_space>
			fval= (double)va_arg(ap,double);
 800edb0:	46b9      	mov	r9, r7
 800edb2:	e666      	b.n	800ea82 <printk+0x3e>
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg(ap, unsigned int);
 800edb4:	f109 0304 	add.w	r3, r9, #4
 800edb8:	9303      	str	r3, [sp, #12]
 800edba:	f8d9 3000 	ldr.w	r3, [r9]
 800edbe:	a916      	add	r1, sp, #88	; 0x58
 800edc0:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
 800edc4:	2310      	movs	r3, #16
 800edc6:	2200      	movs	r2, #0
 800edc8:	a80d      	add	r0, sp, #52	; 0x34
 800edca:	f7ff fd00 	bl	800e7ce <printk_mknumstr>
 800edce:	4682      	mov	sl, r0
			vstrp = &vstr[vlen];
 800edd0:	ab0d      	add	r3, sp, #52	; 0x34
 800edd2:	eb03 0800 	add.w	r8, r3, r0

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
 800edd6:	f016 0908 	ands.w	r9, r6, #8
 800edda:	d021      	beq.n	800ee20 <printk+0x3dc>
				if (IS_FLAG_POUND(flags_used)) {
 800eddc:	f016 0910 	ands.w	r9, r6, #16
 800ede0:	d110      	bne.n	800ee04 <printk+0x3c0>
					printk_putc('0', &count, info);
					printk_putc('x', &count, info);
					/*vlen += 2;*/
					dschar = TRUE;
				}
				printk_pad_zero(vlen, field_width, &count, info);
 800ede2:	9b01      	ldr	r3, [sp, #4]
 800ede4:	aa0c      	add	r2, sp, #48	; 0x30
 800ede6:	4629      	mov	r1, r5
 800ede8:	4650      	mov	r0, sl
 800edea:	f7ff fd24 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800edee:	46aa      	mov	sl, r5
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
 800edf0:	f016 0f10 	tst.w	r6, #16
 800edf4:	f000 80ab 	beq.w	800ef4e <printk+0x50a>
 800edf8:	f1b9 0f00 	cmp.w	r9, #0
 800edfc:	d02f      	beq.n	800ee5e <printk+0x41a>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800edfe:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ee02:	e095      	b.n	800ef30 <printk+0x4ec>
					printk_putc('0', &count, info);
 800ee04:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee08:	464a      	mov	r2, r9
 800ee0a:	a90c      	add	r1, sp, #48	; 0x30
 800ee0c:	2030      	movs	r0, #48	; 0x30
 800ee0e:	f7ff fcc9 	bl	800e7a4 <printk_putc>
					printk_putc('x', &count, info);
 800ee12:	464a      	mov	r2, r9
 800ee14:	a90c      	add	r1, sp, #48	; 0x30
 800ee16:	2078      	movs	r0, #120	; 0x78
 800ee18:	f7ff fcc4 	bl	800e7a4 <printk_putc>
					dschar = TRUE;
 800ee1c:	46b9      	mov	r9, r7
 800ee1e:	e7e0      	b.n	800ede2 <printk+0x39e>
				if (!IS_FLAG_MINUS(flags_used)) {
 800ee20:	f016 0f01 	tst.w	r6, #1
 800ee24:	d1e4      	bne.n	800edf0 <printk+0x3ac>
					if (IS_FLAG_POUND(flags_used)) {
 800ee26:	f016 0910 	ands.w	r9, r6, #16
 800ee2a:	d001      	beq.n	800ee30 <printk+0x3ec>
						vlen += 2;
 800ee2c:	f100 0a02 	add.w	sl, r0, #2
					printk_pad_space(vlen, field_width, &count, info);
 800ee30:	9b01      	ldr	r3, [sp, #4]
 800ee32:	aa0c      	add	r2, sp, #48	; 0x30
 800ee34:	4629      	mov	r1, r5
 800ee36:	4650      	mov	r0, sl
 800ee38:	f7ff fd0c 	bl	800e854 <printk_pad_space>
					if (IS_FLAG_POUND(flags_used)) {
 800ee3c:	f1b9 0f00 	cmp.w	r9, #0
 800ee40:	d0d6      	beq.n	800edf0 <printk+0x3ac>
						printk_putc('0', &count, info);
 800ee42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee46:	464a      	mov	r2, r9
 800ee48:	a90c      	add	r1, sp, #48	; 0x30
 800ee4a:	2030      	movs	r0, #48	; 0x30
 800ee4c:	f7ff fcaa 	bl	800e7a4 <printk_putc>
						printk_putc('x', &count, info);
 800ee50:	464a      	mov	r2, r9
 800ee52:	a90c      	add	r1, sp, #48	; 0x30
 800ee54:	2078      	movs	r0, #120	; 0x78
 800ee56:	f7ff fca5 	bl	800e7a4 <printk_putc>
						dschar = TRUE;
 800ee5a:	46b9      	mov	r9, r7
 800ee5c:	e7c8      	b.n	800edf0 <printk+0x3ac>
				printk_putc('0', &count, info);
 800ee5e:	9f01      	ldr	r7, [sp, #4]
 800ee60:	463a      	mov	r2, r7
 800ee62:	a90c      	add	r1, sp, #48	; 0x30
 800ee64:	2030      	movs	r0, #48	; 0x30
 800ee66:	f7ff fc9d 	bl	800e7a4 <printk_putc>
				printk_putc('x', &count, info);
 800ee6a:	463a      	mov	r2, r7
 800ee6c:	a90c      	add	r1, sp, #48	; 0x30
 800ee6e:	2078      	movs	r0, #120	; 0x78
 800ee70:	f7ff fc98 	bl	800e7a4 <printk_putc>
				vlen += 2;
 800ee74:	f10a 0a02 	add.w	sl, sl, #2
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ee78:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ee7c:	e058      	b.n	800ef30 <printk+0x4ec>
			}
			goto cont_xd;
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ee7e:	f109 0704 	add.w	r7, r9, #4
 800ee82:	f8d9 3000 	ldr.w	r3, [r9]
 800ee86:	a916      	add	r1, sp, #88	; 0x58
 800ee88:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
 800ee8c:	2308      	movs	r3, #8
 800ee8e:	2200      	movs	r2, #0
 800ee90:	a80d      	add	r0, sp, #52	; 0x34
 800ee92:	f7ff fc9c 	bl	800e7ce <printk_mknumstr>
 800ee96:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ee98:	46b9      	mov	r9, r7
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
 800ee9a:	ab0d      	add	r3, sp, #52	; 0x34
 800ee9c:	eb03 080a 	add.w	r8, r3, sl

			if (IS_FLAG_ZERO(flags_used)) {
 800eea0:	f016 0f08 	tst.w	r6, #8
 800eea4:	d136      	bne.n	800ef14 <printk+0x4d0>
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
 800eea6:	f016 0f01 	tst.w	r6, #1
 800eeaa:	d141      	bne.n	800ef30 <printk+0x4ec>
					printk_pad_space(vlen, field_width, &count, info);
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	aa0c      	add	r2, sp, #48	; 0x30
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	f7ff fcce 	bl	800e854 <printk_pad_space>
 800eeb8:	e03a      	b.n	800ef30 <printk+0x4ec>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800eeba:	f109 0704 	add.w	r7, r9, #4
 800eebe:	f8d9 3000 	ldr.w	r3, [r9]
 800eec2:	a916      	add	r1, sp, #88	; 0x58
 800eec4:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
 800eec8:	2302      	movs	r3, #2
 800eeca:	2200      	movs	r2, #0
 800eecc:	a80d      	add	r0, sp, #52	; 0x34
 800eece:	f7ff fc7e 	bl	800e7ce <printk_mknumstr>
 800eed2:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, unsigned int);
 800eed4:	46b9      	mov	r9, r7
			goto cont_u;
 800eed6:	e7e0      	b.n	800ee9a <printk+0x456>
			uval = (unsigned int) va_arg(ap, void *);
 800eed8:	f109 0704 	add.w	r7, r9, #4
 800eedc:	f8d9 3000 	ldr.w	r3, [r9]
 800eee0:	a916      	add	r1, sp, #88	; 0x58
 800eee2:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
 800eee6:	2310      	movs	r3, #16
 800eee8:	2200      	movs	r2, #0
 800eeea:	a80d      	add	r0, sp, #52	; 0x34
 800eeec:	f7ff fc6f 	bl	800e7ce <printk_mknumstr>
 800eef0:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, void *);
 800eef2:	46b9      	mov	r9, r7
			goto cont_u;
 800eef4:	e7d1      	b.n	800ee9a <printk+0x456>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800eef6:	f109 0704 	add.w	r7, r9, #4
 800eefa:	f8d9 3000 	ldr.w	r3, [r9]
 800eefe:	a916      	add	r1, sp, #88	; 0x58
 800ef00:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
 800ef04:	230a      	movs	r3, #10
 800ef06:	2200      	movs	r2, #0
 800ef08:	a80d      	add	r0, sp, #52	; 0x34
 800ef0a:	f7ff fc60 	bl	800e7ce <printk_mknumstr>
 800ef0e:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ef10:	46b9      	mov	r9, r7
 800ef12:	e7c2      	b.n	800ee9a <printk+0x456>
				printk_pad_zero(vlen, field_width, &count, info);
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	aa0c      	add	r2, sp, #48	; 0x30
 800ef18:	4629      	mov	r1, r5
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	f7ff fc8b 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800ef20:	46aa      	mov	sl, r5
 800ef22:	e005      	b.n	800ef30 <printk+0x4ec>
				}
			}

			cont_xd: while (*vstrp)
				printk_putc(*vstrp--, &count, info);
 800ef24:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef28:	9a01      	ldr	r2, [sp, #4]
 800ef2a:	a90c      	add	r1, sp, #48	; 0x30
 800ef2c:	f7ff fc3a 	bl	800e7a4 <printk_putc>
			cont_xd: while (*vstrp)
 800ef30:	f898 0000 	ldrb.w	r0, [r8]
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d1f5      	bne.n	800ef24 <printk+0x4e0>

			if (IS_FLAG_MINUS(flags_used)) {
 800ef38:	f016 0f01 	tst.w	r6, #1
 800ef3c:	f43f ada1 	beq.w	800ea82 <printk+0x3e>
				printk_pad_space(vlen, field_width, &count, info);
 800ef40:	9b01      	ldr	r3, [sp, #4]
 800ef42:	aa0c      	add	r2, sp, #48	; 0x30
 800ef44:	4629      	mov	r1, r5
 800ef46:	4650      	mov	r0, sl
 800ef48:	f7ff fc84 	bl	800e854 <printk_pad_space>
 800ef4c:	e599      	b.n	800ea82 <printk+0x3e>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ef4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ef52:	e7ed      	b.n	800ef30 <printk+0x4ec>
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg(ap, unsigned int);
 800ef54:	f109 0504 	add.w	r5, r9, #4
			printk_putc(cval, &count, info);
 800ef58:	9a01      	ldr	r2, [sp, #4]
 800ef5a:	a90c      	add	r1, sp, #48	; 0x30
 800ef5c:	f899 0000 	ldrb.w	r0, [r9]
 800ef60:	f7ff fc20 	bl	800e7a4 <printk_putc>
			cval = (char) va_arg(ap, unsigned int);
 800ef64:	46a9      	mov	r9, r5
			break;
 800ef66:	e58c      	b.n	800ea82 <printk+0x3e>
		case 's':
			sval = (char *) va_arg(ap, char *);
 800ef68:	f109 0a04 	add.w	sl, r9, #4
 800ef6c:	f8d9 7000 	ldr.w	r7, [r9]
			if (sval) {
 800ef70:	2f00      	cmp	r7, #0
 800ef72:	d03b      	beq.n	800efec <printk+0x5a8>
				vlen = strlen(sval);
 800ef74:	4638      	mov	r0, r7
 800ef76:	f7fe fcff 	bl	800d978 <strlen>
 800ef7a:	4681      	mov	r9, r0
				if (!IS_FLAG_MINUS(flags_used)) {
 800ef7c:	f016 0601 	ands.w	r6, r6, #1
 800ef80:	d00f      	beq.n	800efa2 <printk+0x55e>
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
 800ef82:	f1b8 0f00 	cmp.w	r8, #0
 800ef86:	d017      	beq.n	800efb8 <printk+0x574>
				{
					while (*sval)
 800ef88:	7838      	ldrb	r0, [r7, #0]
 800ef8a:	b1c0      	cbz	r0, 800efbe <printk+0x57a>
					{
						if(precision_width>=1)
 800ef8c:	f1b8 0f00 	cmp.w	r8, #0
 800ef90:	ddfa      	ble.n	800ef88 <printk+0x544>
						{
							precision_width--;
 800ef92:	f108 38ff 	add.w	r8, r8, #4294967295
							printk_putc(*sval++, &count, info);
 800ef96:	3701      	adds	r7, #1
 800ef98:	9a01      	ldr	r2, [sp, #4]
 800ef9a:	a90c      	add	r1, sp, #48	; 0x30
 800ef9c:	f7ff fc02 	bl	800e7a4 <printk_putc>
 800efa0:	e7f2      	b.n	800ef88 <printk+0x544>
					printk_pad_space(vlen, field_width, &count, info);
 800efa2:	9b01      	ldr	r3, [sp, #4]
 800efa4:	aa0c      	add	r2, sp, #48	; 0x30
 800efa6:	4629      	mov	r1, r5
 800efa8:	f7ff fc54 	bl	800e854 <printk_pad_space>
 800efac:	e7e9      	b.n	800ef82 <printk+0x53e>
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
					   printk_putc(*sval++, &count, info);
 800efae:	3701      	adds	r7, #1
 800efb0:	9a01      	ldr	r2, [sp, #4]
 800efb2:	a90c      	add	r1, sp, #48	; 0x30
 800efb4:	f7ff fbf6 	bl	800e7a4 <printk_putc>
					while (*sval)
 800efb8:	7838      	ldrb	r0, [r7, #0]
 800efba:	2800      	cmp	r0, #0
 800efbc:	d1f7      	bne.n	800efae <printk+0x56a>
				}
				if (IS_FLAG_MINUS(flags_used)) {
 800efbe:	b90e      	cbnz	r6, 800efc4 <printk+0x580>
			sval = (char *) va_arg(ap, char *);
 800efc0:	46d1      	mov	r9, sl
 800efc2:	e55e      	b.n	800ea82 <printk+0x3e>
					printk_pad_space(vlen, field_width, &count, info);
 800efc4:	9b01      	ldr	r3, [sp, #4]
 800efc6:	aa0c      	add	r2, sp, #48	; 0x30
 800efc8:	4629      	mov	r1, r5
 800efca:	4648      	mov	r0, r9
 800efcc:	f7ff fc42 	bl	800e854 <printk_pad_space>
			sval = (char *) va_arg(ap, char *);
 800efd0:	46d1      	mov	r9, sl
 800efd2:	e556      	b.n	800ea82 <printk+0x3e>
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg(ap, int *);
 800efd4:	f8d9 3000 	ldr.w	r3, [r9]
			*ivalp = count;
 800efd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efda:	601a      	str	r2, [r3, #0]
			ivalp = (int *) va_arg(ap, int *);
 800efdc:	f109 0904 	add.w	r9, r9, #4
			break;
 800efe0:	e54f      	b.n	800ea82 <printk+0x3e>

		default:
			printk_putc(c, &count, info);
 800efe2:	9a01      	ldr	r2, [sp, #4]
 800efe4:	a90c      	add	r1, sp, #48	; 0x30
 800efe6:	f7ff fbdd 	bl	800e7a4 <printk_putc>
			break;
 800efea:	e54a      	b.n	800ea82 <printk+0x3e>
			sval = (char *) va_arg(ap, char *);
 800efec:	46d1      	mov	r9, sl
 800efee:	e548      	b.n	800ea82 <printk+0x3e>
		}
	}
	return count;
}
 800eff0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eff2:	b017      	add	sp, #92	; 0x5c
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eff8 <myprintf>:
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
 800eff8:	b40f      	push	{r0, r1, r2, r3}
 800effa:	b500      	push	{lr}
 800effc:	b085      	sub	sp, #20
	char * ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
 800effe:	2301      	movs	r3, #1
 800f000:	9301      	str	r3, [sp, #4]
	info.func = &out_char;     //调用的串口输出函数
 800f002:	4b06      	ldr	r3, [pc, #24]	; (800f01c <myprintf+0x24>)
 800f004:	9302      	str	r3, [sp, #8]
	va_start(ap, fmt);  //对ap 进行初始化，让它指向可变参数表里面的第一个参数
	rvalue = printk(&info, fmt, ap);
 800f006:	aa06      	add	r2, sp, #24
 800f008:	f852 1b04 	ldr.w	r1, [r2], #4
 800f00c:	a801      	add	r0, sp, #4
 800f00e:	f7ff fd19 	bl	800ea44 <printk>

	va_end(ap);

	return rvalue;
}
 800f012:	b005      	add	sp, #20
 800f014:	f85d eb04 	ldr.w	lr, [sp], #4
 800f018:	b004      	add	sp, #16
 800f01a:	4770      	bx	lr
 800f01c:	0800e873 	.word	0x0800e873

0800f020 <rt_thread_exit>:
}

#endif

void rt_thread_exit(void)
{
 800f020:	b538      	push	{r3, r4, r5, lr}
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_current_thread;
 800f022:	4b14      	ldr	r3, [pc, #80]	; (800f074 <rt_thread_exit+0x54>)
 800f024:	681c      	ldr	r4, [r3, #0]

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f026:	f7fe fc0b 	bl	800d840 <rt_hw_interrupt_disable>
 800f02a:	4605      	mov	r5, r0

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
 800f02c:	4620      	mov	r0, r4
 800f02e:	f002 f869 	bl	8011104 <rt_schedule_remove_thread>
    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
 800f032:	2304      	movs	r3, #4
 800f034:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
 800f038:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f03c:	f000 fa1a 	bl	800f474 <rt_timer_detach>

    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f040:	4620      	mov	r0, r4
 800f042:	f000 fcce 	bl	800f9e2 <rt_object_is_systemobject>
 800f046:	2801      	cmp	r0, #1
 800f048:	d00d      	beq.n	800f066 <rt_thread_exit+0x46>
        rt_object_detach((rt_object_t)thread);
    }
    else
    {
        /* insert to defunct thread list */
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 800f04a:	f104 0214 	add.w	r2, r4, #20
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
    l->next->prev = n;
 800f04e:	4b0a      	ldr	r3, [pc, #40]	; (800f078 <rt_thread_exit+0x58>)
 800f050:	6819      	ldr	r1, [r3, #0]
 800f052:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f054:	6161      	str	r1, [r4, #20]

    l->next = n;
 800f056:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f058:	61a3      	str	r3, [r4, #24]
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f05a:	4628      	mov	r0, r5
 800f05c:	f7fe fbf4 	bl	800d848 <rt_hw_interrupt_enable>

    /* switch to next task */
    rt_schedule();
 800f060:	f001 ffee 	bl	8011040 <rt_schedule>
}
 800f064:	bd38      	pop	{r3, r4, r5, pc}
        thread->cleanup == RT_NULL)
 800f066:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1ee      	bne.n	800f04a <rt_thread_exit+0x2a>
        rt_object_detach((rt_object_t)thread);
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 fc67 	bl	800f940 <rt_object_detach>
 800f072:	e7f2      	b.n	800f05a <rt_thread_exit+0x3a>
 800f074:	20007c54 	.word	0x20007c54
 800f078:	20007c5c 	.word	0x20007c5c

0800f07c <_rt_thread_init>:
                                void             *parameter,
                                void             *stack_start,
                                rt_uint32_t       stack_size,
                                rt_uint8_t        priority,
                                rt_uint32_t       tick)
{
 800f07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f07e:	b083      	sub	sp, #12
 800f080:	4604      	mov	r4, r0
 800f082:	9808      	ldr	r0, [sp, #32]
 800f084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f086:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 800f08a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    /* init thread list */
    rt_list_init(&(thread->tlist));
 800f08c:	f104 0714 	add.w	r7, r4, #20
    l->next = l->prev = l;
 800f090:	61a7      	str	r7, [r4, #24]
 800f092:	6167      	str	r7, [r4, #20]

    thread->entry = (void *)entry;
 800f094:	6222      	str	r2, [r4, #32]
    thread->parameter = parameter;
 800f096:	6263      	str	r3, [r4, #36]	; 0x24

    /* stack init */
    thread->stack_addr = stack_start;
 800f098:	62a0      	str	r0, [r4, #40]	; 0x28
    thread->stack_size = stack_size;
 800f09a:	62e1      	str	r1, [r4, #44]	; 0x2c

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
 800f09c:	460a      	mov	r2, r1
 800f09e:	2123      	movs	r1, #35	; 0x23
 800f0a0:	f001 fb82 	bl	80107a8 <rt_memset>
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)rt_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr + thread->stack_size - 4),
 800f0a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f0a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f0a8:	1f1a      	subs	r2, r3, #4
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 800f0aa:	4b10      	ldr	r3, [pc, #64]	; (800f0ec <_rt_thread_init+0x70>)
 800f0ac:	440a      	add	r2, r1
 800f0ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f0b0:	6a20      	ldr	r0, [r4, #32]
 800f0b2:	f7ff fa93 	bl	800e5dc <rt_hw_stack_init>
 800f0b6:	61e0      	str	r0, [r4, #28]
                                          (void *)rt_thread_exit);
#endif

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    thread->init_priority    = priority;
 800f0b8:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    thread->current_priority = priority;
 800f0bc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35

    thread->number_mask = 0;
 800f0c0:	2500      	movs	r5, #0
 800f0c2:	63a5      	str	r5, [r4, #56]	; 0x38
    thread->number = 0;
    thread->high_mask = 0;
#endif

    /* tick init */
    thread->init_tick      = tick;
 800f0c4:	6466      	str	r6, [r4, #68]	; 0x44
    thread->remaining_tick = tick;
 800f0c6:	64a6      	str	r6, [r4, #72]	; 0x48

    /* error and flags */
    thread->error = RT_EOK;
 800f0c8:	6325      	str	r5, [r4, #48]	; 0x30
    thread->stat  = RT_THREAD_INIT;
 800f0ca:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
 800f0ce:	67a5      	str	r5, [r4, #120]	; 0x78
    thread->user_data = 0;
 800f0d0:	67e5      	str	r5, [r4, #124]	; 0x7c

    /* init thread timer */
    rt_timer_init(&(thread->thread_timer),
 800f0d2:	9501      	str	r5, [sp, #4]
 800f0d4:	9500      	str	r5, [sp, #0]
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	4a05      	ldr	r2, [pc, #20]	; (800f0f0 <_rt_thread_init+0x74>)
 800f0da:	4621      	mov	r1, r4
 800f0dc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f0e0:	f000 f9b4 	bl	800f44c <rt_timer_init>
#endif

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));

    return RT_EOK;
}
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	b003      	add	sp, #12
 800f0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	0800f021 	.word	0x0800f021
 800f0f0:	0800f0f5 	.word	0x0800f0f5

0800f0f4 <rt_thread_timeout>:
 * when thread is timeout to wait some resource.
 *
 * @param parameter the parameter of thread timeout function
 */
void rt_thread_timeout(void *parameter)
{
 800f0f4:	b510      	push	{r4, lr}
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* set error number */
    thread->error = -RT_ETIMEOUT;
 800f0f6:	f06f 0201 	mvn.w	r2, #1
 800f0fa:	6302      	str	r2, [r0, #48]	; 0x30

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
 800f0fc:	f100 0214 	add.w	r2, r0, #20
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
    n->next->prev = n->prev;
 800f100:	6941      	ldr	r1, [r0, #20]
 800f102:	6984      	ldr	r4, [r0, #24]
 800f104:	604c      	str	r4, [r1, #4]
    n->prev->next = n->next;
 800f106:	6981      	ldr	r1, [r0, #24]
 800f108:	6944      	ldr	r4, [r0, #20]
 800f10a:	600c      	str	r4, [r1, #0]

    n->next = n->prev = n;
 800f10c:	6182      	str	r2, [r0, #24]
 800f10e:	6142      	str	r2, [r0, #20]

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
 800f110:	f001 ffd2 	bl	80110b8 <rt_schedule_insert_thread>

    /* do schedule */
    rt_schedule();
 800f114:	f001 ff94 	bl	8011040 <rt_schedule>
}
 800f118:	bd10      	pop	{r4, pc}

0800f11a <rt_thread_init>:
{
 800f11a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f11c:	b085      	sub	sp, #20
 800f11e:	4605      	mov	r5, r0
 800f120:	460c      	mov	r4, r1
 800f122:	4616      	mov	r6, r2
 800f124:	461f      	mov	r7, r3
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
 800f126:	460a      	mov	r2, r1
 800f128:	2101      	movs	r1, #1
 800f12a:	f000 fbe7 	bl	800f8fc <rt_object_init>
    return _rt_thread_init(thread,
 800f12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f130:	9303      	str	r3, [sp, #12]
 800f132:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f136:	9302      	str	r3, [sp, #8]
 800f138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f13a:	9301      	str	r3, [sp, #4]
 800f13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	463b      	mov	r3, r7
 800f142:	4632      	mov	r2, r6
 800f144:	4621      	mov	r1, r4
 800f146:	4628      	mov	r0, r5
 800f148:	f7ff ff98 	bl	800f07c <_rt_thread_init>
}
 800f14c:	b005      	add	sp, #20
 800f14e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f150 <rt_thread_self>:
}
 800f150:	4b01      	ldr	r3, [pc, #4]	; (800f158 <rt_thread_self+0x8>)
 800f152:	6818      	ldr	r0, [r3, #0]
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	20007c54 	.word	0x20007c54

0800f15c <rt_thread_detach>:
{
 800f15c:	b510      	push	{r4, lr}
 800f15e:	4604      	mov	r4, r0
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 800f160:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f164:	f013 0f0f 	tst.w	r3, #15
 800f168:	d11b      	bne.n	800f1a2 <rt_thread_detach+0x46>
    rt_timer_detach(&(thread->thread_timer));
 800f16a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f16e:	f000 f981 	bl	800f474 <rt_timer_detach>
    thread->stat = RT_THREAD_CLOSE;
 800f172:	2304      	movs	r3, #4
 800f174:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 fc32 	bl	800f9e2 <rt_object_is_systemobject>
 800f17e:	2801      	cmp	r0, #1
 800f180:	d101      	bne.n	800f186 <rt_thread_detach+0x2a>
        thread->cleanup == RT_NULL)
 800f182:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f184:	b183      	cbz	r3, 800f1a8 <rt_thread_detach+0x4c>
        lock = rt_hw_interrupt_disable();
 800f186:	f7fe fb5b 	bl	800d840 <rt_hw_interrupt_disable>
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 800f18a:	f104 0214 	add.w	r2, r4, #20
    l->next->prev = n;
 800f18e:	4b08      	ldr	r3, [pc, #32]	; (800f1b0 <rt_thread_detach+0x54>)
 800f190:	6819      	ldr	r1, [r3, #0]
 800f192:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f194:	6161      	str	r1, [r4, #20]
    l->next = n;
 800f196:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f198:	61a3      	str	r3, [r4, #24]
        rt_hw_interrupt_enable(lock);
 800f19a:	f7fe fb55 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f19e:	2000      	movs	r0, #0
 800f1a0:	bd10      	pop	{r4, pc}
        rt_schedule_remove_thread(thread);
 800f1a2:	f001 ffaf 	bl	8011104 <rt_schedule_remove_thread>
 800f1a6:	e7e0      	b.n	800f16a <rt_thread_detach+0xe>
        rt_object_detach((rt_object_t)thread);
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 fbc9 	bl	800f940 <rt_object_detach>
 800f1ae:	e7f6      	b.n	800f19e <rt_thread_detach+0x42>
 800f1b0:	20007c5c 	.word	0x20007c5c

0800f1b4 <rt_thread_create>:
{
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	4605      	mov	r5, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	4690      	mov	r8, r2
 800f1c0:	461e      	mov	r6, r3
    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	2001      	movs	r0, #1
 800f1c6:	f000 fbce 	bl	800f966 <rt_object_allocate>
    if (thread == RT_NULL)
 800f1ca:	b1d0      	cbz	r0, 800f202 <rt_thread_create+0x4e>
 800f1cc:	4604      	mov	r4, r0
    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f002 fcf4 	bl	8011bbc <rt_malloc>
    if (stack_start == RT_NULL)
 800f1d4:	b180      	cbz	r0, 800f1f8 <rt_thread_create+0x44>
    _rt_thread_init(thread,
 800f1d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1d8:	9203      	str	r2, [sp, #12]
 800f1da:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800f1de:	9202      	str	r2, [sp, #8]
 800f1e0:	9601      	str	r6, [sp, #4]
 800f1e2:	9000      	str	r0, [sp, #0]
 800f1e4:	4643      	mov	r3, r8
 800f1e6:	463a      	mov	r2, r7
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f7ff ff46 	bl	800f07c <_rt_thread_init>
}
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	b004      	add	sp, #16
 800f1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rt_object_delete((rt_object_t)thread);
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f000 fbdc 	bl	800f9b6 <rt_object_delete>
        return RT_NULL;
 800f1fe:	2400      	movs	r4, #0
 800f200:	e7f6      	b.n	800f1f0 <rt_thread_create+0x3c>
        return RT_NULL;
 800f202:	2400      	movs	r4, #0
 800f204:	e7f4      	b.n	800f1f0 <rt_thread_create+0x3c>
	...

0800f208 <rt_thread_delete>:
{
 800f208:	b510      	push	{r4, lr}
 800f20a:	4604      	mov	r4, r0
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 800f20c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f210:	f013 0f0f 	tst.w	r3, #15
 800f214:	d114      	bne.n	800f240 <rt_thread_delete+0x38>
    rt_timer_detach(&(thread->thread_timer));
 800f216:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f21a:	f000 f92b 	bl	800f474 <rt_timer_detach>
    thread->stat = RT_THREAD_CLOSE;
 800f21e:	2304      	movs	r3, #4
 800f220:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    lock = rt_hw_interrupt_disable();
 800f224:	f7fe fb0c 	bl	800d840 <rt_hw_interrupt_disable>
    rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 800f228:	f104 0214 	add.w	r2, r4, #20
    l->next->prev = n;
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <rt_thread_delete+0x40>)
 800f22e:	6819      	ldr	r1, [r3, #0]
 800f230:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f232:	6161      	str	r1, [r4, #20]
    l->next = n;
 800f234:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f236:	61a3      	str	r3, [r4, #24]
    rt_hw_interrupt_enable(lock);
 800f238:	f7fe fb06 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f23c:	2000      	movs	r0, #0
 800f23e:	bd10      	pop	{r4, pc}
        rt_schedule_remove_thread(thread);
 800f240:	f001 ff60 	bl	8011104 <rt_schedule_remove_thread>
 800f244:	e7e7      	b.n	800f216 <rt_thread_delete+0xe>
 800f246:	bf00      	nop
 800f248:	20007c5c 	.word	0x20007c5c

0800f24c <rt_thread_yield>:
{
 800f24c:	b510      	push	{r4, lr}
    level = rt_hw_interrupt_disable();
 800f24e:	f7fe faf7 	bl	800d840 <rt_hw_interrupt_disable>
    thread = rt_current_thread;
 800f252:	4b14      	ldr	r3, [pc, #80]	; (800f2a4 <rt_thread_yield+0x58>)
 800f254:	681b      	ldr	r3, [r3, #0]
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
 800f256:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f25a:	f002 020f 	and.w	r2, r2, #15
 800f25e:	2a01      	cmp	r2, #1
 800f260:	d103      	bne.n	800f26a <rt_thread_yield+0x1e>
        thread->tlist.next != thread->tlist.prev)
 800f262:	695a      	ldr	r2, [r3, #20]
 800f264:	6999      	ldr	r1, [r3, #24]
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
 800f266:	428a      	cmp	r2, r1
 800f268:	d103      	bne.n	800f272 <rt_thread_yield+0x26>
    rt_hw_interrupt_enable(level);
 800f26a:	f7fe faed 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f26e:	2000      	movs	r0, #0
 800f270:	bd10      	pop	{r4, pc}
        rt_list_remove(&(thread->tlist));
 800f272:	f103 0414 	add.w	r4, r3, #20
    n->next->prev = n->prev;
 800f276:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800f278:	699a      	ldr	r2, [r3, #24]
 800f27a:	6959      	ldr	r1, [r3, #20]
 800f27c:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800f27e:	619c      	str	r4, [r3, #24]
 800f280:	615c      	str	r4, [r3, #20]
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 800f282:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800f286:	4a08      	ldr	r2, [pc, #32]	; (800f2a8 <rt_thread_yield+0x5c>)
 800f288:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    l->prev->next = n;
 800f28c:	6851      	ldr	r1, [r2, #4]
 800f28e:	600c      	str	r4, [r1, #0]
    n->prev = l->prev;
 800f290:	6851      	ldr	r1, [r2, #4]
 800f292:	6199      	str	r1, [r3, #24]
    l->prev = n;
 800f294:	6054      	str	r4, [r2, #4]
    n->next = l;
 800f296:	615a      	str	r2, [r3, #20]
        rt_hw_interrupt_enable(level);
 800f298:	f7fe fad6 	bl	800d848 <rt_hw_interrupt_enable>
        rt_schedule();
 800f29c:	f001 fed0 	bl	8011040 <rt_schedule>
        return RT_EOK;
 800f2a0:	e7e5      	b.n	800f26e <rt_thread_yield+0x22>
 800f2a2:	bf00      	nop
 800f2a4:	20007c54 	.word	0x20007c54
 800f2a8:	20007b50 	.word	0x20007b50

0800f2ac <rt_thread_suspend>:
{
 800f2ac:	b538      	push	{r3, r4, r5, lr}
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
 800f2ae:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f2b2:	f003 030f 	and.w	r3, r3, #15
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d117      	bne.n	800f2ea <rt_thread_suspend+0x3e>
 800f2ba:	4604      	mov	r4, r0
    temp = rt_hw_interrupt_disable();
 800f2bc:	f7fe fac0 	bl	800d840 <rt_hw_interrupt_disable>
 800f2c0:	4605      	mov	r5, r0
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 800f2c2:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 800f2c6:	f023 030f 	bic.w	r3, r3, #15
 800f2ca:	f043 0302 	orr.w	r3, r3, #2
 800f2ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    rt_schedule_remove_thread(thread);
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f001 ff16 	bl	8011104 <rt_schedule_remove_thread>
    rt_timer_stop(&(thread->thread_timer));
 800f2d8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f2dc:	f000 f946 	bl	800f56c <rt_timer_stop>
    rt_hw_interrupt_enable(temp);
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	f7fe fab1 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 800f2e6:	2000      	movs	r0, #0
}
 800f2e8:	bd38      	pop	{r3, r4, r5, pc}
        return -RT_ERROR;
 800f2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ee:	e7fb      	b.n	800f2e8 <rt_thread_suspend+0x3c>

0800f2f0 <rt_thread_sleep>:
{
 800f2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	ad02      	add	r5, sp, #8
 800f2f6:	f845 0d04 	str.w	r0, [r5, #-4]!
    temp = rt_hw_interrupt_disable();
 800f2fa:	f7fe faa1 	bl	800d840 <rt_hw_interrupt_disable>
 800f2fe:	4607      	mov	r7, r0
    thread = rt_current_thread;
 800f300:	4b0e      	ldr	r3, [pc, #56]	; (800f33c <rt_thread_sleep+0x4c>)
 800f302:	681c      	ldr	r4, [r3, #0]
    rt_thread_suspend(thread);
 800f304:	4620      	mov	r0, r4
 800f306:	f7ff ffd1 	bl	800f2ac <rt_thread_suspend>
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
 800f30a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800f30e:	462a      	mov	r2, r5
 800f310:	2100      	movs	r1, #0
 800f312:	4630      	mov	r0, r6
 800f314:	f000 f94e 	bl	800f5b4 <rt_timer_control>
    rt_timer_start(&(thread->thread_timer));
 800f318:	4630      	mov	r0, r6
 800f31a:	f000 f8c7 	bl	800f4ac <rt_timer_start>
    rt_hw_interrupt_enable(temp);
 800f31e:	4638      	mov	r0, r7
 800f320:	f7fe fa92 	bl	800d848 <rt_hw_interrupt_enable>
    rt_schedule();
 800f324:	f001 fe8c 	bl	8011040 <rt_schedule>
    if (thread->error == -RT_ETIMEOUT)
 800f328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f32a:	f113 0f02 	cmn.w	r3, #2
 800f32e:	d002      	beq.n	800f336 <rt_thread_sleep+0x46>
}
 800f330:	2000      	movs	r0, #0
 800f332:	b003      	add	sp, #12
 800f334:	bdf0      	pop	{r4, r5, r6, r7, pc}
        thread->error = RT_EOK;
 800f336:	2300      	movs	r3, #0
 800f338:	6323      	str	r3, [r4, #48]	; 0x30
 800f33a:	e7f9      	b.n	800f330 <rt_thread_sleep+0x40>
 800f33c:	20007c54 	.word	0x20007c54

0800f340 <rt_thread_delay>:
{
 800f340:	b508      	push	{r3, lr}
    return rt_thread_sleep(tick);
 800f342:	f7ff ffd5 	bl	800f2f0 <rt_thread_sleep>
}
 800f346:	bd08      	pop	{r3, pc}

0800f348 <rt_thread_resume>:
{
 800f348:	b538      	push	{r3, r4, r5, lr}
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
 800f34a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f34e:	f003 030f 	and.w	r3, r3, #15
 800f352:	2b02      	cmp	r3, #2
 800f354:	d119      	bne.n	800f38a <rt_thread_resume+0x42>
 800f356:	4604      	mov	r4, r0
    temp = rt_hw_interrupt_disable();
 800f358:	f7fe fa72 	bl	800d840 <rt_hw_interrupt_disable>
 800f35c:	4605      	mov	r5, r0
    rt_list_remove(&(thread->tlist));
 800f35e:	f104 0314 	add.w	r3, r4, #20
    n->next->prev = n->prev;
 800f362:	6962      	ldr	r2, [r4, #20]
 800f364:	69a1      	ldr	r1, [r4, #24]
 800f366:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800f368:	69a2      	ldr	r2, [r4, #24]
 800f36a:	6961      	ldr	r1, [r4, #20]
 800f36c:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800f36e:	61a3      	str	r3, [r4, #24]
 800f370:	6163      	str	r3, [r4, #20]
    rt_timer_stop(&thread->thread_timer);
 800f372:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f376:	f000 f8f9 	bl	800f56c <rt_timer_stop>
    rt_hw_interrupt_enable(temp);
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7fe fa64 	bl	800d848 <rt_hw_interrupt_enable>
    rt_schedule_insert_thread(thread);
 800f380:	4620      	mov	r0, r4
 800f382:	f001 fe99 	bl	80110b8 <rt_schedule_insert_thread>
    return RT_EOK;
 800f386:	2000      	movs	r0, #0
}
 800f388:	bd38      	pop	{r3, r4, r5, pc}
        return -RT_ERROR;
 800f38a:	f04f 30ff 	mov.w	r0, #4294967295
 800f38e:	e7fb      	b.n	800f388 <rt_thread_resume+0x40>

0800f390 <rt_thread_startup>:
{
 800f390:	b508      	push	{r3, lr}
    thread->current_priority = thread->init_priority;
 800f392:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
 800f396:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
    thread->number_mask = 1L << thread->current_priority;
 800f39a:	2201      	movs	r2, #1
 800f39c:	408a      	lsls	r2, r1
 800f39e:	6382      	str	r2, [r0, #56]	; 0x38
    thread->stat = RT_THREAD_SUSPEND;
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    rt_thread_resume(thread);
 800f3a6:	f7ff ffcf 	bl	800f348 <rt_thread_resume>
    if (rt_thread_self() != RT_NULL)
 800f3aa:	f7ff fed1 	bl	800f150 <rt_thread_self>
 800f3ae:	b108      	cbz	r0, 800f3b4 <rt_thread_startup+0x24>
        rt_schedule();
 800f3b0:	f001 fe46 	bl	8011040 <rt_schedule>
}
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	bd08      	pop	{r3, pc}

0800f3b8 <rt_thread_control>:
{
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	4604      	mov	r4, r0
    switch (cmd)
 800f3bc:	2901      	cmp	r1, #1
 800f3be:	d029      	beq.n	800f414 <rt_thread_control+0x5c>
 800f3c0:	4615      	mov	r5, r2
 800f3c2:	2902      	cmp	r1, #2
 800f3c4:	d002      	beq.n	800f3cc <rt_thread_control+0x14>
 800f3c6:	b311      	cbz	r1, 800f40e <rt_thread_control+0x56>
    return RT_EOK;
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	e012      	b.n	800f3f2 <rt_thread_control+0x3a>
        temp = rt_hw_interrupt_disable();
 800f3cc:	f7fe fa38 	bl	800d840 <rt_hw_interrupt_disable>
 800f3d0:	4606      	mov	r6, r0
        if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
 800f3d2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800f3d6:	f003 030f 	and.w	r3, r3, #15
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d00a      	beq.n	800f3f4 <rt_thread_control+0x3c>
            thread->current_priority = *(rt_uint8_t *)arg;
 800f3de:	782a      	ldrb	r2, [r5, #0]
 800f3e0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
            thread->number_mask = 1 << thread->current_priority;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	4093      	lsls	r3, r2
 800f3e8:	63a3      	str	r3, [r4, #56]	; 0x38
        rt_hw_interrupt_enable(temp);
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f7fe fa2c 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 800f3f0:	2000      	movs	r0, #0
}
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
            rt_schedule_remove_thread(thread);
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f001 fe85 	bl	8011104 <rt_schedule_remove_thread>
            thread->current_priority = *(rt_uint8_t *)arg;
 800f3fa:	782a      	ldrb	r2, [r5, #0]
 800f3fc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
            thread->number_mask = 1 << thread->current_priority;
 800f400:	2301      	movs	r3, #1
 800f402:	4093      	lsls	r3, r2
 800f404:	63a3      	str	r3, [r4, #56]	; 0x38
            rt_schedule_insert_thread(thread);
 800f406:	4620      	mov	r0, r4
 800f408:	f001 fe56 	bl	80110b8 <rt_schedule_insert_thread>
 800f40c:	e7ed      	b.n	800f3ea <rt_thread_control+0x32>
        return rt_thread_startup(thread);
 800f40e:	f7ff ffbf 	bl	800f390 <rt_thread_startup>
 800f412:	e7ee      	b.n	800f3f2 <rt_thread_control+0x3a>
        return rt_thread_delete(thread);
 800f414:	f7ff fef8 	bl	800f208 <rt_thread_delete>
 800f418:	e7eb      	b.n	800f3f2 <rt_thread_control+0x3a>

0800f41a <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
 800f41a:	b410      	push	{r4}

    /* set flag */
    timer->parent.flag  = flag;

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f41c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800f420:	f024 0401 	bic.w	r4, r4, #1
 800f424:	7244      	strb	r4, [r0, #9]

    timer->timeout_func = timeout;
 800f426:	61c1      	str	r1, [r0, #28]
    timer->parameter    = parameter;
 800f428:	6202      	str	r2, [r0, #32]

    timer->timeout_tick = 0;
 800f42a:	2200      	movs	r2, #0
 800f42c:	6282      	str	r2, [r0, #40]	; 0x28
    timer->init_tick    = time;
 800f42e:	6243      	str	r3, [r0, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f430:	4613      	mov	r3, r2
 800f432:	2b00      	cmp	r3, #0
 800f434:	dd02      	ble.n	800f43c <_rt_timer_init+0x22>
    {
        rt_list_init(&(timer->row[i]));
    }
}
 800f436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f43a:	4770      	bx	lr
        rt_list_init(&(timer->row[i]));
 800f43c:	1c9a      	adds	r2, r3, #2
 800f43e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800f442:	1d11      	adds	r1, r2, #4
    l->next = l->prev = l;
 800f444:	6091      	str	r1, [r2, #8]
 800f446:	6051      	str	r1, [r2, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f448:	3301      	adds	r3, #1
 800f44a:	e7f2      	b.n	800f432 <_rt_timer_init+0x18>

0800f44c <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
 800f44c:	b570      	push	{r4, r5, r6, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	4604      	mov	r4, r0
 800f452:	4615      	mov	r5, r2
 800f454:	461e      	mov	r6, r3
    /* timer check */
    RT_ASSERT(timer != RT_NULL);

    /* timer object initialization */
    rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
 800f456:	460a      	mov	r2, r1
 800f458:	210a      	movs	r1, #10
 800f45a:	f000 fa4f 	bl	800f8fc <rt_object_init>

    _rt_timer_init(timer, timeout, parameter, time, flag);
 800f45e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	9b06      	ldr	r3, [sp, #24]
 800f466:	4632      	mov	r2, r6
 800f468:	4629      	mov	r1, r5
 800f46a:	4620      	mov	r0, r4
 800f46c:	f7ff ffd5 	bl	800f41a <_rt_timer_init>
}
 800f470:	b002      	add	sp, #8
 800f472:	bd70      	pop	{r4, r5, r6, pc}

0800f474 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	4604      	mov	r4, r0
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f478:	f7fe f9e2 	bl	800d840 <rt_hw_interrupt_disable>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f47c:	2200      	movs	r2, #0
 800f47e:	2a00      	cmp	r2, #0
 800f480:	dd06      	ble.n	800f490 <rt_timer_detach+0x1c>

    _rt_timer_remove(timer);

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f482:	f7fe f9e1 	bl	800d848 <rt_hw_interrupt_enable>

    rt_object_detach((rt_object_t)timer);
 800f486:	4620      	mov	r0, r4
 800f488:	f000 fa5a 	bl	800f940 <rt_object_detach>

    return RT_EOK;
}
 800f48c:	2000      	movs	r0, #0
 800f48e:	bd70      	pop	{r4, r5, r6, pc}
        rt_list_remove(&timer->row[i]);
 800f490:	1c93      	adds	r3, r2, #2
 800f492:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f496:	1d19      	adds	r1, r3, #4
    n->next->prev = n->prev;
 800f498:	685d      	ldr	r5, [r3, #4]
 800f49a:	689e      	ldr	r6, [r3, #8]
 800f49c:	606e      	str	r6, [r5, #4]
    n->prev->next = n->next;
 800f49e:	689d      	ldr	r5, [r3, #8]
 800f4a0:	685e      	ldr	r6, [r3, #4]
 800f4a2:	602e      	str	r6, [r5, #0]
    n->next = n->prev = n;
 800f4a4:	6099      	str	r1, [r3, #8]
 800f4a6:	6059      	str	r1, [r3, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f4a8:	3201      	adds	r2, #1
 800f4aa:	e7e8      	b.n	800f47e <rt_timer_detach+0xa>

0800f4ac <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
 800f4ac:	b570      	push	{r4, r5, r6, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	4604      	mov	r4, r0
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
 800f4b2:	f7fe f9c5 	bl	800d840 <rt_hw_interrupt_disable>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2a00      	cmp	r2, #0
 800f4ba:	dd26      	ble.n	800f50a <rt_timer_start+0x5e>
    /* remove timer from list */
    _rt_timer_remove(timer);
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f4bc:	7a63      	ldrb	r3, [r4, #9]
 800f4be:	f023 0301 	bic.w	r3, r3, #1
 800f4c2:	7263      	strb	r3, [r4, #9]
    rt_hw_interrupt_enable(level);
 800f4c4:	f7fe f9c0 	bl	800d848 <rt_hw_interrupt_enable>
    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
 800f4c8:	f001 fd60 	bl	8010f8c <rt_tick_get>
 800f4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4ce:	4418      	add	r0, r3
 800f4d0:	62a0      	str	r0, [r4, #40]	; 0x28

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f4d2:	f7fe f9b5 	bl	800d840 <rt_hw_interrupt_disable>
    {
        /* insert timer to system timer list */
        timer_list = rt_timer_list;
    }

    row_head[0]  = &timer_list[0];
 800f4d6:	4b22      	ldr	r3, [pc, #136]	; (800f560 <rt_timer_start+0xb4>)
 800f4d8:	9301      	str	r3, [sp, #4]
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 800f4da:	2100      	movs	r1, #0
 800f4dc:	b341      	cbz	r1, 800f530 <rt_timer_start+0x84>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
 800f4de:	4a21      	ldr	r2, [pc, #132]	; (800f564 <rt_timer_start+0xb8>)
 800f4e0:	6813      	ldr	r3, [r2, #0]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	6013      	str	r3, [r2, #0]
    tst_nr = random_nr;

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
 800f4e6:	9b01      	ldr	r3, [sp, #4]
 800f4e8:	f104 0214 	add.w	r2, r4, #20
    l->next->prev = n;
 800f4ec:	6819      	ldr	r1, [r3, #0]
 800f4ee:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f4f0:	6819      	ldr	r1, [r3, #0]
 800f4f2:	6161      	str	r1, [r4, #20]
    l->next = n;
 800f4f4:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f4f6:	61a3      	str	r3, [r4, #24]
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
 800f4f8:	7a63      	ldrb	r3, [r4, #9]
 800f4fa:	f043 0301 	orr.w	r3, r3, #1
 800f4fe:	7263      	strb	r3, [r4, #9]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f500:	f7fe f9a2 	bl	800d848 <rt_hw_interrupt_enable>
        }
    }
#endif

    return RT_EOK;
}
 800f504:	2000      	movs	r0, #0
 800f506:	b002      	add	sp, #8
 800f508:	bd70      	pop	{r4, r5, r6, pc}
        rt_list_remove(&timer->row[i]);
 800f50a:	1c93      	adds	r3, r2, #2
 800f50c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f510:	1d19      	adds	r1, r3, #4
    n->next->prev = n->prev;
 800f512:	685d      	ldr	r5, [r3, #4]
 800f514:	689e      	ldr	r6, [r3, #8]
 800f516:	606e      	str	r6, [r5, #4]
    n->prev->next = n->next;
 800f518:	689d      	ldr	r5, [r3, #8]
 800f51a:	685e      	ldr	r6, [r3, #4]
 800f51c:	602e      	str	r6, [r5, #0]
    n->next = n->prev = n;
 800f51e:	6099      	str	r1, [r3, #8]
 800f520:	6059      	str	r1, [r3, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f522:	3201      	adds	r2, #1
 800f524:	e7c8      	b.n	800f4b8 <rt_timer_start+0xc>
             row_head[row_lvl]  = row_head[row_lvl]->next)
 800f526:	ab02      	add	r3, sp, #8
 800f528:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f52c:	f843 2c04 	str.w	r2, [r3, #-4]
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
 800f530:	ab02      	add	r3, sp, #8
 800f532:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f536:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800f53a:	00cb      	lsls	r3, r1, #3
 800f53c:	4a08      	ldr	r2, [pc, #32]	; (800f560 <rt_timer_start+0xb4>)
 800f53e:	441a      	add	r2, r3
 800f540:	6852      	ldr	r2, [r2, #4]
 800f542:	4295      	cmp	r5, r2
 800f544:	d00a      	beq.n	800f55c <rt_timer_start+0xb0>
            rt_list_t *p = row_head[row_lvl]->next;
 800f546:	682a      	ldr	r2, [r5, #0]
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
 800f548:	3314      	adds	r3, #20
 800f54a:	1ad3      	subs	r3, r2, r3
            if ((t->timeout_tick - timer->timeout_tick) == 0)
 800f54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f550:	42ab      	cmp	r3, r5
 800f552:	d0e8      	beq.n	800f526 <rt_timer_start+0x7a>
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
 800f554:	1b5b      	subs	r3, r3, r5
 800f556:	4d04      	ldr	r5, [pc, #16]	; (800f568 <rt_timer_start+0xbc>)
 800f558:	42ab      	cmp	r3, r5
 800f55a:	d8e4      	bhi.n	800f526 <rt_timer_start+0x7a>
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 800f55c:	3101      	adds	r1, #1
 800f55e:	e7bd      	b.n	800f4dc <rt_timer_start+0x30>
 800f560:	200040c4 	.word	0x200040c4
 800f564:	200040c0 	.word	0x200040c0
 800f568:	7ffffffe 	.word	0x7ffffffe

0800f56c <rt_timer_stop>:

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 800f56c:	7a43      	ldrb	r3, [r0, #9]
 800f56e:	f013 0f01 	tst.w	r3, #1
 800f572:	d01c      	beq.n	800f5ae <rt_timer_stop+0x42>
{
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	4604      	mov	r4, r0
        return -RT_ERROR;

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f578:	f7fe f962 	bl	800d840 <rt_hw_interrupt_disable>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f57c:	2200      	movs	r2, #0
 800f57e:	2a00      	cmp	r2, #0
 800f580:	dd07      	ble.n	800f592 <rt_timer_stop+0x26>

    _rt_timer_remove(timer);

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f582:	f7fe f961 	bl	800d848 <rt_hw_interrupt_enable>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f586:	7a63      	ldrb	r3, [r4, #9]
 800f588:	f023 0301 	bic.w	r3, r3, #1
 800f58c:	7263      	strb	r3, [r4, #9]

    return RT_EOK;
 800f58e:	2000      	movs	r0, #0
}
 800f590:	bd70      	pop	{r4, r5, r6, pc}
        rt_list_remove(&timer->row[i]);
 800f592:	1c93      	adds	r3, r2, #2
 800f594:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f598:	1d19      	adds	r1, r3, #4
    n->next->prev = n->prev;
 800f59a:	685d      	ldr	r5, [r3, #4]
 800f59c:	689e      	ldr	r6, [r3, #8]
 800f59e:	606e      	str	r6, [r5, #4]
    n->prev->next = n->next;
 800f5a0:	689d      	ldr	r5, [r3, #8]
 800f5a2:	685e      	ldr	r6, [r3, #4]
 800f5a4:	602e      	str	r6, [r5, #0]
    n->next = n->prev = n;
 800f5a6:	6099      	str	r1, [r3, #8]
 800f5a8:	6059      	str	r1, [r3, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f5aa:	3201      	adds	r2, #1
 800f5ac:	e7e7      	b.n	800f57e <rt_timer_stop+0x12>
        return -RT_ERROR;
 800f5ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f5b2:	4770      	bx	lr

0800f5b4 <rt_timer_control>:
{
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    switch (cmd)
 800f5b4:	2903      	cmp	r1, #3
 800f5b6:	d805      	bhi.n	800f5c4 <rt_timer_control+0x10>
 800f5b8:	e8df f001 	tbb	[pc, r1]
 800f5bc:	0e090206 	.word	0x0e090206
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
 800f5c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f5c2:	6013      	str	r3, [r2, #0]
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
        break;
    }

    return RT_EOK;
}
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	4770      	bx	lr
        timer->init_tick = *(rt_tick_t *)arg;
 800f5c8:	6813      	ldr	r3, [r2, #0]
 800f5ca:	6243      	str	r3, [r0, #36]	; 0x24
        break;
 800f5cc:	e7fa      	b.n	800f5c4 <rt_timer_control+0x10>
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
 800f5ce:	7a43      	ldrb	r3, [r0, #9]
 800f5d0:	f023 0302 	bic.w	r3, r3, #2
 800f5d4:	7243      	strb	r3, [r0, #9]
        break;
 800f5d6:	e7f5      	b.n	800f5c4 <rt_timer_control+0x10>
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
 800f5d8:	7a43      	ldrb	r3, [r0, #9]
 800f5da:	f043 0302 	orr.w	r3, r3, #2
 800f5de:	7243      	strb	r3, [r0, #9]
        break;
 800f5e0:	e7f0      	b.n	800f5c4 <rt_timer_control+0x10>
	...

0800f5e4 <rt_timer_check>:
 * corresponding timeout function will be invoked.
 *
 * @note this function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    rt_tick_t current_tick;
    register rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
 800f5e6:	f001 fcd1 	bl	8010f8c <rt_tick_get>
 800f5ea:	4607      	mov	r7, r0

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f5ec:	f7fe f928 	bl	800d840 <rt_hw_interrupt_disable>
 800f5f0:	4605      	mov	r5, r0
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
    return l->next == l;
 800f5f2:	4b21      	ldr	r3, [pc, #132]	; (800f678 <rt_timer_check+0x94>)
 800f5f4:	681c      	ldr	r4, [r3, #0]

    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
 800f5f6:	429c      	cmp	r4, r3
 800f5f8:	d103      	bne.n	800f602 <rt_timer_check+0x1e>
        else
            break;
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7fe f924 	bl	800d848 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
 800f600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 800f602:	f1a4 0614 	sub.w	r6, r4, #20
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
 800f606:	6963      	ldr	r3, [r4, #20]
 800f608:	1aff      	subs	r7, r7, r3
 800f60a:	4b1c      	ldr	r3, [pc, #112]	; (800f67c <rt_timer_check+0x98>)
 800f60c:	429f      	cmp	r7, r3
 800f60e:	d8f4      	bhi.n	800f5fa <rt_timer_check+0x16>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f610:	2100      	movs	r1, #0
 800f612:	2900      	cmp	r1, #0
 800f614:	dd10      	ble.n	800f638 <rt_timer_check+0x54>
            t->timeout_func(t->parameter);
 800f616:	68a3      	ldr	r3, [r4, #8]
 800f618:	68e0      	ldr	r0, [r4, #12]
 800f61a:	4798      	blx	r3
            current_tick = rt_tick_get();
 800f61c:	f001 fcb6 	bl	8010f8c <rt_tick_get>
 800f620:	4607      	mov	r7, r0
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 800f622:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800f626:	f003 0203 	and.w	r2, r3, #3
 800f62a:	2a03      	cmp	r2, #3
 800f62c:	d01b      	beq.n	800f666 <rt_timer_check+0x82>
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f62e:	f023 0301 	bic.w	r3, r3, #1
 800f632:	f804 3c0b 	strb.w	r3, [r4, #-11]
 800f636:	e7dc      	b.n	800f5f2 <rt_timer_check+0xe>
        rt_list_remove(&timer->row[i]);
 800f638:	f1a4 0214 	sub.w	r2, r4, #20
 800f63c:	1c8b      	adds	r3, r1, #2
 800f63e:	00db      	lsls	r3, r3, #3
 800f640:	441a      	add	r2, r3
 800f642:	3204      	adds	r2, #4
    n->next->prev = n->prev;
 800f644:	4423      	add	r3, r4
 800f646:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800f64a:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 800f64e:	6047      	str	r7, [r0, #4]
    n->prev->next = n->next;
 800f650:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800f654:	f853 7c10 	ldr.w	r7, [r3, #-16]
 800f658:	6007      	str	r7, [r0, #0]
    n->next = n->prev = n;
 800f65a:	f843 2c0c 	str.w	r2, [r3, #-12]
 800f65e:	f843 2c10 	str.w	r2, [r3, #-16]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f662:	3101      	adds	r1, #1
 800f664:	e7d5      	b.n	800f612 <rt_timer_check+0x2e>
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f666:	f023 0301 	bic.w	r3, r3, #1
 800f66a:	f804 3c0b 	strb.w	r3, [r4, #-11]
                rt_timer_start(t);
 800f66e:	4630      	mov	r0, r6
 800f670:	f7ff ff1c 	bl	800f4ac <rt_timer_start>
 800f674:	e7bd      	b.n	800f5f2 <rt_timer_check+0xe>
 800f676:	bf00      	nop
 800f678:	200040c4 	.word	0x200040c4
 800f67c:	7ffffffe 	.word	0x7ffffffe

0800f680 <rt_system_timer_init>:
 */
void rt_system_timer_init(void)
{
    int i;

    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
 800f680:	2300      	movs	r3, #0
 800f682:	b103      	cbz	r3, 800f686 <rt_system_timer_init+0x6>
    {
        rt_list_init(rt_timer_list + i);
    }
}
 800f684:	4770      	bx	lr
        rt_list_init(rt_timer_list + i);
 800f686:	4904      	ldr	r1, [pc, #16]	; (800f698 <rt_system_timer_init+0x18>)
 800f688:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    l->next = l->prev = l;
 800f68c:	6052      	str	r2, [r2, #4]
 800f68e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
 800f692:	3301      	adds	r3, #1
 800f694:	e7f5      	b.n	800f682 <rt_system_timer_init+0x2>
 800f696:	bf00      	nop
 800f698:	200040c4 	.word	0x200040c4

0800f69c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800f69c:	4b2f      	ldr	r3, [pc, #188]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f013 0f08 	tst.w	r3, #8
 800f6a4:	d116      	bne.n	800f6d4 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800f6a6:	4b2d      	ldr	r3, [pc, #180]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6ac:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800f6b0:	4a2b      	ldr	r2, [pc, #172]	; (800f760 <SystemCoreClockUpdate+0xc4>)
 800f6b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f6b6:	4a29      	ldr	r2, [pc, #164]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f6b8:	6893      	ldr	r3, [r2, #8]
 800f6ba:	f003 030c 	and.w	r3, r3, #12
 800f6be:	2b0c      	cmp	r3, #12
 800f6c0:	d848      	bhi.n	800f754 <SystemCoreClockUpdate+0xb8>
 800f6c2:	e8df f003 	tbb	[pc, r3]
 800f6c6:	470c      	.short	0x470c
 800f6c8:	47194747 	.word	0x47194747
 800f6cc:	471d4747 	.word	0x471d4747
 800f6d0:	4747      	.short	0x4747
 800f6d2:	21          	.byte	0x21
 800f6d3:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800f6d4:	4b21      	ldr	r3, [pc, #132]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f6dc:	e7e8      	b.n	800f6b0 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800f6de:	4b21      	ldr	r3, [pc, #132]	; (800f764 <SystemCoreClockUpdate+0xc8>)
 800f6e0:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800f6e2:	4b1e      	ldr	r3, [pc, #120]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f6ea:	4a1f      	ldr	r2, [pc, #124]	; (800f768 <SystemCoreClockUpdate+0xcc>)
 800f6ec:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800f6ee:	4a1d      	ldr	r2, [pc, #116]	; (800f764 <SystemCoreClockUpdate+0xc8>)
 800f6f0:	6813      	ldr	r3, [r2, #0]
 800f6f2:	40cb      	lsrs	r3, r1
 800f6f4:	6013      	str	r3, [r2, #0]
}
 800f6f6:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 800f6f8:	4b1a      	ldr	r3, [pc, #104]	; (800f764 <SystemCoreClockUpdate+0xc8>)
 800f6fa:	4a1c      	ldr	r2, [pc, #112]	; (800f76c <SystemCoreClockUpdate+0xd0>)
 800f6fc:	601a      	str	r2, [r3, #0]
      break;
 800f6fe:	e7f0      	b.n	800f6e2 <SystemCoreClockUpdate+0x46>
      SystemCoreClock = HSE_VALUE;
 800f700:	4b18      	ldr	r3, [pc, #96]	; (800f764 <SystemCoreClockUpdate+0xc8>)
 800f702:	4a1b      	ldr	r2, [pc, #108]	; (800f770 <SystemCoreClockUpdate+0xd4>)
 800f704:	601a      	str	r2, [r3, #0]
      break;
 800f706:	e7ec      	b.n	800f6e2 <SystemCoreClockUpdate+0x46>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800f708:	4b14      	ldr	r3, [pc, #80]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f70a:	68da      	ldr	r2, [r3, #12]
 800f70c:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f716:	3301      	adds	r3, #1
      switch (pllsource)
 800f718:	2a02      	cmp	r2, #2
 800f71a:	d004      	beq.n	800f726 <SystemCoreClockUpdate+0x8a>
 800f71c:	2a03      	cmp	r2, #3
 800f71e:	d015      	beq.n	800f74c <SystemCoreClockUpdate+0xb0>
          pllvco = (msirange / pllm);
 800f720:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 800f724:	e002      	b.n	800f72c <SystemCoreClockUpdate+0x90>
          pllvco = (HSI_VALUE / pllm);
 800f726:	4a11      	ldr	r2, [pc, #68]	; (800f76c <SystemCoreClockUpdate+0xd0>)
 800f728:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800f72c:	490b      	ldr	r1, [pc, #44]	; (800f75c <SystemCoreClockUpdate+0xc0>)
 800f72e:	68ca      	ldr	r2, [r1, #12]
 800f730:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800f734:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800f738:	68ca      	ldr	r2, [r1, #12]
 800f73a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800f73e:	3201      	adds	r2, #1
 800f740:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 800f742:	fbb3 f3f2 	udiv	r3, r3, r2
 800f746:	4a07      	ldr	r2, [pc, #28]	; (800f764 <SystemCoreClockUpdate+0xc8>)
 800f748:	6013      	str	r3, [r2, #0]
      break;
 800f74a:	e7ca      	b.n	800f6e2 <SystemCoreClockUpdate+0x46>
          pllvco = (HSE_VALUE / pllm);
 800f74c:	4a08      	ldr	r2, [pc, #32]	; (800f770 <SystemCoreClockUpdate+0xd4>)
 800f74e:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 800f752:	e7eb      	b.n	800f72c <SystemCoreClockUpdate+0x90>
      SystemCoreClock = msirange;
 800f754:	4b03      	ldr	r3, [pc, #12]	; (800f764 <SystemCoreClockUpdate+0xc8>)
 800f756:	6019      	str	r1, [r3, #0]
      break;
 800f758:	e7c3      	b.n	800f6e2 <SystemCoreClockUpdate+0x46>
 800f75a:	bf00      	nop
 800f75c:	40021000 	.word	0x40021000
 800f760:	08012108 	.word	0x08012108
 800f764:	20004000 	.word	0x20004000
 800f768:	080120f8 	.word	0x080120f8
 800f76c:	00f42400 	.word	0x00f42400
 800f770:	007a1200 	.word	0x007a1200

0800f774 <SysClock_Config>:
//函数返回：1：成功；0：失败
//参数说明：msirange：MSI时钟频率等级
//功能概要：初始化时钟频率
//=====================================================================
uint8_t SysClock_Config(uint32_t msirange)
{
 800f774:	b082      	sub	sp, #8
  uint32_t vos;
  uint32_t latency = 0;  /* default value 0WS */

  if(READ_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN) != 0U)
 800f776:	4b23      	ldr	r3, [pc, #140]	; (800f804 <SysClock_Config+0x90>)
 800f778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f77a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800f77e:	d015      	beq.n	800f7ac <SysClock_Config+0x38>
  {
	vos = (PWR->CR1 & PWR_CR1_VOS);
 800f780:	4b21      	ldr	r3, [pc, #132]	; (800f808 <SysClock_Config+0x94>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		 } while(0);
	vos = (PWR->CR1 & PWR_CR1_VOS);
	CLEAR_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
  }

  if(vos == PWR_CR1_VOS_0)
 800f788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f78c:	d021      	beq.n	800f7d2 <SysClock_Config+0x5e>
  uint32_t latency = 0;  /* default value 0WS */
 800f78e:	2100      	movs	r1, #0
	  }
	}
	/* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }

  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (latency));
 800f790:	4a1e      	ldr	r2, [pc, #120]	; (800f80c <SysClock_Config+0x98>)
 800f792:	6813      	ldr	r3, [r2, #0]
 800f794:	f023 0307 	bic.w	r3, r3, #7
 800f798:	430b      	orrs	r3, r1
 800f79a:	6013      	str	r3, [r2, #0]

   /* Check that the new number of wait states is taken into account to access the Flash
      memory by reading the FLASH_ACR register */
   if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 800f79c:	6813      	ldr	r3, [r2, #0]
 800f79e:	f003 0307 	and.w	r3, r3, #7
 800f7a2:	428b      	cmp	r3, r1
 800f7a4:	d01f      	beq.n	800f7e6 <SysClock_Config+0x72>
   {
     return 0;
 800f7a6:	2000      	movs	r0, #0
   }
   SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
   	MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, (0xB0));
   return 1;

}
 800f7a8:	b002      	add	sp, #8
 800f7aa:	4770      	bx	lr
		   SET_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
 800f7ac:	4a15      	ldr	r2, [pc, #84]	; (800f804 <SysClock_Config+0x90>)
 800f7ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f7b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7b4:	6593      	str	r3, [r2, #88]	; 0x58
		   tmpreg = READ_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
 800f7b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f7b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7bc:	9301      	str	r3, [sp, #4]
		   (void)(tmpreg);
 800f7be:	9b01      	ldr	r3, [sp, #4]
	vos = (PWR->CR1 & PWR_CR1_VOS);
 800f7c0:	4b11      	ldr	r3, [pc, #68]	; (800f808 <SysClock_Config+0x94>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	CLEAR_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
 800f7c8:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800f7ca:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800f7ce:	6591      	str	r1, [r2, #88]	; 0x58
 800f7d0:	e7da      	b.n	800f788 <SysClock_Config+0x14>
	if(msirange > RCC_CR_MSIRANGE_8)
 800f7d2:	2880      	cmp	r0, #128	; 0x80
 800f7d4:	d903      	bls.n	800f7de <SysClock_Config+0x6a>
	  if(msirange > RCC_CR_MSIRANGE_10)
 800f7d6:	28a0      	cmp	r0, #160	; 0xa0
 800f7d8:	d903      	bls.n	800f7e2 <SysClock_Config+0x6e>
		latency = 2; /* 2WS */
 800f7da:	2102      	movs	r1, #2
 800f7dc:	e7d8      	b.n	800f790 <SysClock_Config+0x1c>
  uint32_t latency = 0;  /* default value 0WS */
 800f7de:	2100      	movs	r1, #0
 800f7e0:	e7d6      	b.n	800f790 <SysClock_Config+0x1c>
		latency = 1; /* 1WS */
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	e7d4      	b.n	800f790 <SysClock_Config+0x1c>
   SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800f7e6:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800f7ea:	6813      	ldr	r3, [r2, #0]
 800f7ec:	f043 0308 	orr.w	r3, r3, #8
 800f7f0:	6013      	str	r3, [r2, #0]
   	MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, (0xB0));
 800f7f2:	6813      	ldr	r3, [r2, #0]
 800f7f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f7f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800f7fc:	6013      	str	r3, [r2, #0]
   return 1;
 800f7fe:	2001      	movs	r0, #1
 800f800:	e7d2      	b.n	800f7a8 <SysClock_Config+0x34>
 800f802:	bf00      	nop
 800f804:	40021000 	.word	0x40021000
 800f808:	40007000 	.word	0x40007000
 800f80c:	40022000 	.word	0x40022000

0800f810 <SystemInit>:
{
 800f810:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f812:	4c11      	ldr	r4, [pc, #68]	; (800f858 <SystemInit+0x48>)
 800f814:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800f818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f81c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800f820:	4b0e      	ldr	r3, [pc, #56]	; (800f85c <SystemInit+0x4c>)
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	f042 0201 	orr.w	r2, r2, #1
 800f828:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800f82a:	2100      	movs	r1, #0
 800f82c:	6099      	str	r1, [r3, #8]
  RCC->CR &= 0xEAF6FFFFU;
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800f834:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f838:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800f83a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f83e:	60da      	str	r2, [r3, #12]
  RCC->CR &= 0xFFFBFFFFU;
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f846:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 800f848:	6199      	str	r1, [r3, #24]
  SysClock_Config(0xB0);
 800f84a:	20b0      	movs	r0, #176	; 0xb0
 800f84c:	f7ff ff92 	bl	800f774 <SysClock_Config>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f854:	60a3      	str	r3, [r4, #8]
}
 800f856:	bd10      	pop	{r4, pc}
 800f858:	e000ed00 	.word	0xe000ed00
 800f85c:	40021000 	.word	0x40021000

0800f860 <thread_SPThread2>:
//参数说明：无
//功能概要：抢夺信号量
//内部调用：无
//======================================================================
void thread_SPThread2()
{
 800f860:	b510      	push	{r4, lr}
    //（1）======申明局部变量===========================================
    int SPcount;      //记录信号量的个数
    printf("第一次进入线程2！\n");
 800f862:	4816      	ldr	r0, [pc, #88]	; (800f8bc <thread_SPThread2+0x5c>)
 800f864:	f7ff fbc8 	bl	800eff8 <myprintf>
 800f868:	e014      	b.n	800f894 <thread_SPThread2+0x34>
		if(SPcount==0)
		{
			printf("SP个数为0，线程2等待\n");

		}
		rt_sem_take(SP,RT_WAITING_FOREVER); //获取一个信号量
 800f86a:	4c15      	ldr	r4, [pc, #84]	; (800f8c0 <thread_SPThread2+0x60>)
 800f86c:	f04f 31ff 	mov.w	r1, #4294967295
 800f870:	6820      	ldr	r0, [r4, #0]
 800f872:	f000 fb42 	bl	800fefa <rt_sem_take>
		SPcount=SP->value;
 800f876:	6823      	ldr	r3, [r4, #0]
		printf("线程2获取1个SP，SP还剩%d\n",SPcount);
 800f878:	8b99      	ldrh	r1, [r3, #28]
 800f87a:	4812      	ldr	r0, [pc, #72]	; (800f8c4 <thread_SPThread2+0x64>)
 800f87c:	f7ff fbbc 	bl	800eff8 <myprintf>
		delay_ms(2000);
 800f880:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f884:	f7ff fd5c 	bl	800f340 <rt_thread_delay>
		rt_sem_release(SP);   //释放一个信号量
 800f888:	6820      	ldr	r0, [r4, #0]
 800f88a:	f000 fb9c 	bl	800ffc6 <rt_sem_release>
        printf("线程2成功释放1个SP\n");
 800f88e:	480e      	ldr	r0, [pc, #56]	; (800f8c8 <thread_SPThread2+0x68>)
 800f890:	f7ff fbb2 	bl	800eff8 <myprintf>
		delay_ms(1000);
 800f894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f898:	f7ff fd52 	bl	800f340 <rt_thread_delay>
    	SPcount=SP->value;   //获取信号量的值
 800f89c:	4b08      	ldr	r3, [pc, #32]	; (800f8c0 <thread_SPThread2+0x60>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	8b9c      	ldrh	r4, [r3, #28]
    	printf("当前SP为%d\n",SPcount);
 800f8a2:	4621      	mov	r1, r4
 800f8a4:	4809      	ldr	r0, [pc, #36]	; (800f8cc <thread_SPThread2+0x6c>)
 800f8a6:	f7ff fba7 	bl	800eff8 <myprintf>
		printf("线程2请求1个SP\n");
 800f8aa:	4809      	ldr	r0, [pc, #36]	; (800f8d0 <thread_SPThread2+0x70>)
 800f8ac:	f7ff fba4 	bl	800eff8 <myprintf>
		if(SPcount==0)
 800f8b0:	2c00      	cmp	r4, #0
 800f8b2:	d1da      	bne.n	800f86a <thread_SPThread2+0xa>
			printf("SP个数为0，线程2等待\n");
 800f8b4:	4807      	ldr	r0, [pc, #28]	; (800f8d4 <thread_SPThread2+0x74>)
 800f8b6:	f7ff fb9f 	bl	800eff8 <myprintf>
 800f8ba:	e7d6      	b.n	800f86a <thread_SPThread2+0xa>
 800f8bc:	08012138 	.word	0x08012138
 800f8c0:	20007318 	.word	0x20007318
 800f8c4:	08012180 	.word	0x08012180
 800f8c8:	0801219c 	.word	0x0801219c
 800f8cc:	0801214c 	.word	0x0801214c
 800f8d0:	08012158 	.word	0x08012158
 800f8d4:	08012168 	.word	0x08012168

0800f8d8 <rt_object_get_information>:
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
 800f8d8:	2300      	movs	r3, #0
 800f8da:	2b06      	cmp	r3, #6
 800f8dc:	dc09      	bgt.n	800f8f2 <rt_object_get_information+0x1a>
        if (rt_object_container[index].type == type) return &rt_object_container[index];
 800f8de:	011a      	lsls	r2, r3, #4
 800f8e0:	4905      	ldr	r1, [pc, #20]	; (800f8f8 <rt_object_get_information+0x20>)
 800f8e2:	5c8a      	ldrb	r2, [r1, r2]
 800f8e4:	4282      	cmp	r2, r0
 800f8e6:	d001      	beq.n	800f8ec <rt_object_get_information+0x14>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	e7f6      	b.n	800f8da <rt_object_get_information+0x2>
        if (rt_object_container[index].type == type) return &rt_object_container[index];
 800f8ec:	eb01 1003 	add.w	r0, r1, r3, lsl #4
 800f8f0:	4770      	bx	lr

    return RT_NULL;
 800f8f2:	2000      	movs	r0, #0
}
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	20004004 	.word	0x20004004

0800f8fc <rt_object_init>:
 * @param name the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
 800f8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fe:	4604      	mov	r4, r0
 800f900:	460e      	mov	r6, r1
 800f902:	4617      	mov	r7, r2
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif

    /* get object information */
    information = rt_object_get_information(type);
 800f904:	4608      	mov	r0, r1
 800f906:	f7ff ffe7 	bl	800f8d8 <rt_object_get_information>
 800f90a:	4605      	mov	r5, r0
    RT_ASSERT(information != RT_NULL);

    /* check object type to avoid re-initialization */

    /* enter critical */
    rt_enter_critical();
 800f90c:	f001 fc20 	bl	8011150 <rt_enter_critical>
//
//        obj = rt_list_entry(node, struct rt_object, list);
//        RT_ASSERT(obj != object);
//    }
    /* leave critical */
    rt_exit_critical();
 800f910:	f001 fc2a 	bl	8011168 <rt_exit_critical>

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
 800f914:	f066 067f 	orn	r6, r6, #127	; 0x7f
 800f918:	7226      	strb	r6, [r4, #8]
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
 800f91a:	2208      	movs	r2, #8
 800f91c:	4639      	mov	r1, r7
 800f91e:	4620      	mov	r0, r4
 800f920:	f000 ff9a 	bl	8010858 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800f924:	f7fd ff8c 	bl	800d840 <rt_hw_interrupt_disable>
    }
    else
#endif
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
 800f928:	1d2a      	adds	r2, r5, #4
 800f92a:	f104 030c 	add.w	r3, r4, #12
    l->next->prev = n;
 800f92e:	6869      	ldr	r1, [r5, #4]
 800f930:	604b      	str	r3, [r1, #4]
    n->next = l->next;
 800f932:	6869      	ldr	r1, [r5, #4]
 800f934:	60e1      	str	r1, [r4, #12]
    l->next = n;
 800f936:	606b      	str	r3, [r5, #4]
    n->prev = l;
 800f938:	6122      	str	r2, [r4, #16]
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800f93a:	f7fd ff85 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f940 <rt_object_detach>:
 * and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
 800f940:	b510      	push	{r4, lr}
 800f942:	4604      	mov	r4, r0
    RT_ASSERT(object != RT_NULL);

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = 0;
 800f944:	2300      	movs	r3, #0
 800f946:	7203      	strb	r3, [r0, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800f948:	f7fd ff7a 	bl	800d840 <rt_hw_interrupt_disable>

    /* remove from old list */
    rt_list_remove(&(object->list));
 800f94c:	f104 030c 	add.w	r3, r4, #12
    n->next->prev = n->prev;
 800f950:	68e2      	ldr	r2, [r4, #12]
 800f952:	6921      	ldr	r1, [r4, #16]
 800f954:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800f956:	6922      	ldr	r2, [r4, #16]
 800f958:	68e1      	ldr	r1, [r4, #12]
 800f95a:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800f95c:	6123      	str	r3, [r4, #16]
 800f95e:	60e3      	str	r3, [r4, #12]

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800f960:	f7fd ff72 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f964:	bd10      	pop	{r4, pc}

0800f966 <rt_object_allocate>:
 * @param name the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
 800f966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f968:	4607      	mov	r7, r0
 800f96a:	460e      	mov	r6, r1
#endif

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get object information */
    information = rt_object_get_information(type);
 800f96c:	f7ff ffb4 	bl	800f8d8 <rt_object_get_information>
 800f970:	4605      	mov	r5, r0
    RT_ASSERT(information != RT_NULL);

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
 800f972:	68c0      	ldr	r0, [r0, #12]
 800f974:	f002 f922 	bl	8011bbc <rt_malloc>
    if (object == RT_NULL)
 800f978:	b1d8      	cbz	r0, 800f9b2 <rt_object_allocate+0x4c>
 800f97a:	4604      	mov	r4, r0
        /* no memory can be allocated */
        return RT_NULL;
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
 800f97c:	68ea      	ldr	r2, [r5, #12]
 800f97e:	2100      	movs	r1, #0
 800f980:	f000 ff12 	bl	80107a8 <rt_memset>

    /* initialize object's parameters */

    /* set object type */
    object->type = type;
 800f984:	7227      	strb	r7, [r4, #8]

    /* set object flag */
    object->flag = 0;
 800f986:	2300      	movs	r3, #0
 800f988:	7263      	strb	r3, [r4, #9]

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
 800f98a:	2208      	movs	r2, #8
 800f98c:	4631      	mov	r1, r6
 800f98e:	4620      	mov	r0, r4
 800f990:	f000 ff62 	bl	8010858 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800f994:	f7fd ff54 	bl	800d840 <rt_hw_interrupt_disable>
    }
    else
#endif
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
 800f998:	1d2a      	adds	r2, r5, #4
 800f99a:	f104 030c 	add.w	r3, r4, #12
    l->next->prev = n;
 800f99e:	6869      	ldr	r1, [r5, #4]
 800f9a0:	604b      	str	r3, [r1, #4]
    n->next = l->next;
 800f9a2:	6869      	ldr	r1, [r5, #4]
 800f9a4:	60e1      	str	r1, [r4, #12]
    l->next = n;
 800f9a6:	606b      	str	r3, [r5, #4]
    n->prev = l;
 800f9a8:	6122      	str	r2, [r4, #16]
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800f9aa:	f7fd ff4d 	bl	800d848 <rt_hw_interrupt_enable>

    /* return object */
    return object;
}
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return RT_NULL;
 800f9b2:	2400      	movs	r4, #0
 800f9b4:	e7fb      	b.n	800f9ae <rt_object_allocate+0x48>

0800f9b6 <rt_object_delete>:
 * This function will delete an object and release object memory.
 *
 * @param object the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
 800f9b6:	b510      	push	{r4, lr}
 800f9b8:	4604      	mov	r4, r0
    RT_ASSERT(!(object->type & RT_Object_Class_Static));

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	7203      	strb	r3, [r0, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800f9be:	f7fd ff3f 	bl	800d840 <rt_hw_interrupt_disable>

    /* remove from old list */
    rt_list_remove(&(object->list));
 800f9c2:	f104 030c 	add.w	r3, r4, #12
    n->next->prev = n->prev;
 800f9c6:	68e2      	ldr	r2, [r4, #12]
 800f9c8:	6921      	ldr	r1, [r4, #16]
 800f9ca:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800f9cc:	6922      	ldr	r2, [r4, #16]
 800f9ce:	68e1      	ldr	r1, [r4, #12]
 800f9d0:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800f9d2:	6123      	str	r3, [r4, #16]
 800f9d4:	60e3      	str	r3, [r4, #12]

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800f9d6:	f7fd ff37 	bl	800d848 <rt_hw_interrupt_enable>

    /* free the memory of object */
    RT_KERNEL_FREE(object);
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f002 f97c 	bl	8011cd8 <rt_free>
}
 800f9e0:	bd10      	pop	{r4, pc}

0800f9e2 <rt_object_is_systemobject>:
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
    /* object check */
    RT_ASSERT(object != RT_NULL);

    if (object->type & RT_Object_Class_Static)
 800f9e2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	db01      	blt.n	800f9ee <rt_object_is_systemobject+0xc>
        return RT_TRUE;

    return RT_FALSE;
 800f9ea:	2000      	movs	r0, #0
}
 800f9ec:	4770      	bx	lr
        return RT_TRUE;
 800f9ee:	2001      	movs	r0, #1
 800f9f0:	4770      	bx	lr
	...

0800f9f4 <thread_bluelight>:
//参数说明：无
//功能概要：蓝灯线程中，每10秒设置绿灯事件
//内部调用：无
//======================================================================
void thread_bluelight()
{
 800f9f4:	b500      	push	{lr}
 800f9f6:	b085      	sub	sp, #20
    //（1）======申明局部变量==========================================
    uint32_t recvedstate;

    printf("---第一次进入运行蓝灯线程!\r\n");
 800f9f8:	481d      	ldr	r0, [pc, #116]	; (800fa70 <thread_bluelight+0x7c>)
 800f9fa:	f7ff fafd 	bl	800eff8 <myprintf>
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_ON);
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2101      	movs	r1, #1
 800fa02:	f240 1009 	movw	r0, #265	; 0x109
 800fa06:	f000 f9fb 	bl	800fe00 <gpio_init>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fa12:	f000 f9f5 	bl	800fe00 <gpio_init>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 800fa16:	2201      	movs	r2, #1
 800fa18:	4611      	mov	r1, r2
 800fa1a:	f240 1007 	movw	r0, #263	; 0x107
 800fa1e:	f000 f9ef 	bl	800fe00 <gpio_init>
    

    //（2）======主循环（开始）==========================================
    while (1)   //主循环
    {
      rt_event_recv(EventWord,BLUE_LIGHT_EVENT,RT_EVENT_FLAG_OR|RT_EVENT_FLAG_CLEAR,RT_WAITING_FOREVER,&recvedstate);//等待接收蓝灯事件信号
 800fa22:	4b14      	ldr	r3, [pc, #80]	; (800fa74 <thread_bluelight+0x80>)
 800fa24:	6818      	ldr	r0, [r3, #0]
 800fa26:	ab03      	add	r3, sp, #12
 800fa28:	9300      	str	r3, [sp, #0]
 800fa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2e:	2206      	movs	r2, #6
 800fa30:	2108      	movs	r1, #8
 800fa32:	f000 fc2c 	bl	801028e <rt_event_recv>
      if(recvedstate==BLUE_LIGHT_EVENT)
 800fa36:	9b03      	ldr	r3, [sp, #12]
 800fa38:	2b08      	cmp	r3, #8
 800fa3a:	d1f2      	bne.n	800fa22 <thread_bluelight+0x2e>
     {  //如果接收完成且正确
    	uart_send_string(UART_User,(void *)"----进入蓝灯线程-----\r\n");
 800fa3c:	490e      	ldr	r1, [pc, #56]	; (800fa78 <thread_bluelight+0x84>)
 800fa3e:	2002      	movs	r0, #2
 800fa40:	f001 fd6e 	bl	8011520 <uart_send_string>
    	uart_send_string(UART_User,(void *)"在蓝灯线程中，设置绿灯事件\r\n");
 800fa44:	490d      	ldr	r1, [pc, #52]	; (800fa7c <thread_bluelight+0x88>)
 800fa46:	2002      	movs	r0, #2
 800fa48:	f001 fd6a 	bl	8011520 <uart_send_string>
    	//设置GREEN_LIGHT_EVENT事件位
        rt_event_send(EventWord,GREEN_LIGHT_EVENT);
 800fa4c:	2104      	movs	r1, #4
 800fa4e:	4b09      	ldr	r3, [pc, #36]	; (800fa74 <thread_bluelight+0x80>)
 800fa50:	6818      	ldr	r0, [r3, #0]
 800fa52:	f000 fbd0 	bl	80101f6 <rt_event_send>
        uart_send_string(UART_User,(void *)"------蓝灯闪烁------\r\n");
 800fa56:	490a      	ldr	r1, [pc, #40]	; (800fa80 <thread_bluelight+0x8c>)
 800fa58:	2002      	movs	r0, #2
 800fa5a:	f001 fd61 	bl	8011520 <uart_send_string>
	  	  gpio_reverse(LIGHT_BLUE);
 800fa5e:	f240 1009 	movw	r0, #265	; 0x109
 800fa62:	f000 fa05 	bl	800fe70 <gpio_reverse>
        delay_ms(10000);
 800fa66:	f242 7010 	movw	r0, #10000	; 0x2710
 800fa6a:	f7ff fc69 	bl	800f340 <rt_thread_delay>
 800fa6e:	e7d8      	b.n	800fa22 <thread_bluelight+0x2e>
 800fa70:	080121b0 	.word	0x080121b0
 800fa74:	20007340 	.word	0x20007340
 800fa78:	080121d0 	.word	0x080121d0
 800fa7c:	080121e8 	.word	0x080121e8
 800fa80:	08012208 	.word	0x08012208

0800fa84 <main>:
//声明使用到的内部函数
//main.c使用的内部函数声明处
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程，参见书稿）
int main(void)
{
 800fa84:	b508      	push	{r3, lr}
	OS_start(app_init);  //启动RTOS并执行主线程
 800fa86:	4802      	ldr	r0, [pc, #8]	; (800fa90 <main+0xc>)
 800fa88:	f000 f82b 	bl	800fae2 <OS_start>
}
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	bd08      	pop	{r3, pc}
 800fa90:	080116e1 	.word	0x080116e1

0800fa94 <rt_application_init>:
//函数返回：无
//参数说明：无
//功能概要：创建主线程，并将其加入线程就绪列表，等待调度器启动后调度主线程运行
//=========================================================================
void rt_application_init(void (*func)(void))
{
 800fa94:	b500      	push	{lr}
 800fa96:	b083      	sub	sp, #12
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    //（1）创建主线程，并为其分配运行所需资源
    tid = rt_thread_create("main", (void *)func, RT_NULL,
 800fa98:	2314      	movs	r3, #20
 800fa9a:	9301      	str	r3, [sp, #4]
 800fa9c:	230a      	movs	r3, #10
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800faa4:	2200      	movs	r2, #0
 800faa6:	4601      	mov	r1, r0
 800faa8:	4803      	ldr	r0, [pc, #12]	; (800fab8 <rt_application_init+0x24>)
 800faaa:	f7ff fb83 	bl	800f1b4 <rt_thread_create>

    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif
    //（2）将主线程加入线程就绪列表，等待调度器启动后运行
    rt_thread_startup(tid);
 800faae:	f7ff fc6f 	bl	800f390 <rt_thread_startup>
}
 800fab2:	b003      	add	sp, #12
 800fab4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fab8:	08012220 	.word	0x08012220

0800fabc <rtthread_startup>:
{
 800fabc:	b510      	push	{r4, lr}
 800fabe:	4604      	mov	r4, r0
    rt_hw_interrupt_disable(); //关中断
 800fac0:	f7fd febe 	bl	800d840 <rt_hw_interrupt_disable>
    rt_hw_board_init();
 800fac4:	f001 fb8c 	bl	80111e0 <rt_hw_board_init>
    rt_system_timer_init();
 800fac8:	f7ff fdda 	bl	800f680 <rt_system_timer_init>
    rt_system_scheduler_init();
 800facc:	f001 fa7a 	bl	8010fc4 <rt_system_scheduler_init>
    rt_application_init((void *)func);
 800fad0:	4620      	mov	r0, r4
 800fad2:	f7ff ffdf 	bl	800fa94 <rt_application_init>
    rt_thread_idle_init();
 800fad6:	f001 fde3 	bl	80116a0 <rt_thread_idle_init>
    rt_system_scheduler_start();
 800fada:	f001 fa99 	bl	8011010 <rt_system_scheduler_start>
}
 800fade:	2000      	movs	r0, #0
 800fae0:	bd10      	pop	{r4, pc}

0800fae2 <OS_start>:
{
 800fae2:	b508      	push	{r3, lr}
	rtthread_startup((void *)func);  //启动RTOS并执行主线程app_init
 800fae4:	f7ff ffea 	bl	800fabc <rtthread_startup>
}
 800fae8:	bd08      	pop	{r3, pc}
	...

0800faec <thread_SPThread3>:
//参数说明：无
//功能概要：抢夺信号量
//内部调用：无
//======================================================================
void thread_SPThread3()
{
 800faec:	b510      	push	{r4, lr}
    //（1）======申明局部变量===========================================
    int SPcount;      //记录信号量的个数
    printf("第一次进入线程3！\n");
 800faee:	4820      	ldr	r0, [pc, #128]	; (800fb70 <thread_SPThread3+0x84>)
 800faf0:	f7ff fa82 	bl	800eff8 <myprintf>
	gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 800faf4:	2201      	movs	r2, #1
 800faf6:	4611      	mov	r1, r2
 800faf8:	f240 1007 	movw	r0, #263	; 0x107
 800fafc:	f000 f980 	bl	800fe00 <gpio_init>
 800fb00:	e01b      	b.n	800fb3a <thread_SPThread3+0x4e>
		if(SPcount==0)
		{
			printf("SP个数为0，线程3等待\n");

		}
		rt_sem_take(SP,RT_WAITING_FOREVER); //获取一个信号量
 800fb02:	4c1c      	ldr	r4, [pc, #112]	; (800fb74 <thread_SPThread3+0x88>)
 800fb04:	f04f 31ff 	mov.w	r1, #4294967295
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	f000 f9f6 	bl	800fefa <rt_sem_take>
		SPcount=SP->value;                 //获取信号量的值
 800fb0e:	6823      	ldr	r3, [r4, #0]
		printf("线程3获取1个SP，SP还剩%d\n",SPcount);
 800fb10:	8b99      	ldrh	r1, [r3, #28]
 800fb12:	4819      	ldr	r0, [pc, #100]	; (800fb78 <thread_SPThread3+0x8c>)
 800fb14:	f7ff fa70 	bl	800eff8 <myprintf>
		delay_ms(3000);
 800fb18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800fb1c:	f7ff fc10 	bl	800f340 <rt_thread_delay>
	    printf("转换红灯状态\n");
 800fb20:	4816      	ldr	r0, [pc, #88]	; (800fb7c <thread_SPThread3+0x90>)
 800fb22:	f7ff fa69 	bl	800eff8 <myprintf>
		gpio_reverse(LIGHT_RED);
 800fb26:	f240 1007 	movw	r0, #263	; 0x107
 800fb2a:	f000 f9a1 	bl	800fe70 <gpio_reverse>
		rt_sem_release(SP);   //释放一个信号量
 800fb2e:	6820      	ldr	r0, [r4, #0]
 800fb30:	f000 fa49 	bl	800ffc6 <rt_sem_release>
		printf("线程3成功释放1个SP\n");
 800fb34:	4812      	ldr	r0, [pc, #72]	; (800fb80 <thread_SPThread3+0x94>)
 800fb36:	f7ff fa5f 	bl	800eff8 <myprintf>
		gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	f240 1009 	movw	r0, #265	; 0x109
 800fb42:	f000 f95d 	bl	800fe00 <gpio_init>
    	delay_ms(1000);    //延时1秒
 800fb46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fb4a:	f7ff fbf9 	bl	800f340 <rt_thread_delay>
    	SPcount=SP->value; //获取信号量的值
 800fb4e:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <thread_SPThread3+0x88>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	8b9c      	ldrh	r4, [r3, #28]
    	printf("当前SP个数为%d\n",SPcount);
 800fb54:	4621      	mov	r1, r4
 800fb56:	480b      	ldr	r0, [pc, #44]	; (800fb84 <thread_SPThread3+0x98>)
 800fb58:	f7ff fa4e 	bl	800eff8 <myprintf>
    	printf("线程3请求1个SP\n");
 800fb5c:	480a      	ldr	r0, [pc, #40]	; (800fb88 <thread_SPThread3+0x9c>)
 800fb5e:	f7ff fa4b 	bl	800eff8 <myprintf>
		if(SPcount==0)
 800fb62:	2c00      	cmp	r4, #0
 800fb64:	d1cd      	bne.n	800fb02 <thread_SPThread3+0x16>
			printf("SP个数为0，线程3等待\n");
 800fb66:	4809      	ldr	r0, [pc, #36]	; (800fb8c <thread_SPThread3+0xa0>)
 800fb68:	f7ff fa46 	bl	800eff8 <myprintf>
 800fb6c:	e7c9      	b.n	800fb02 <thread_SPThread3+0x16>
 800fb6e:	bf00      	nop
 800fb70:	08012228 	.word	0x08012228
 800fb74:	20007318 	.word	0x20007318
 800fb78:	08012274 	.word	0x08012274
 800fb7c:	08012290 	.word	0x08012290
 800fb80:	080122a0 	.word	0x080122a0
 800fb84:	0801223c 	.word	0x0801223c
 800fb88:	0801224c 	.word	0x0801224c
 800fb8c:	0801225c 	.word	0x0801225c

0800fb90 <flash_erase>:
//======================================================================
uint8_t flash_erase(uint16_t sect)
{
	
    //等待之前最后一个flash操作完成
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fb90:	4b14      	ldr	r3, [pc, #80]	; (800fbe4 <flash_erase+0x54>)
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fb98:	d1fa      	bne.n	800fb90 <flash_erase>
    //清除之前的编程导致的所有错误标志位
	FLASH->SR &= 0xFFFFFFUL;
 800fb9a:	4b12      	ldr	r3, [pc, #72]	; (800fbe4 <flash_erase+0x54>)
 800fb9c:	691a      	ldr	r2, [r3, #16]
 800fb9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800fba2:	611a      	str	r2, [r3, #16]
    //清闪存即时编程位
    FLASH->CR &= ~FLASH_CR_PG;
 800fba4:	695a      	ldr	r2, [r3, #20]
 800fba6:	f022 0201 	bic.w	r2, r2, #1
 800fbaa:	615a      	str	r2, [r3, #20]
    
    //使能扇区擦除
    FLASH->CR |= FLASH_CR_PER;
 800fbac:	695a      	ldr	r2, [r3, #20]
 800fbae:	f042 0202 	orr.w	r2, r2, #2
 800fbb2:	615a      	str	r2, [r3, #20]
    //设置擦除的扇区
    FLASH->CR &= ~FLASH_CR_PNB;
 800fbb4:	695a      	ldr	r2, [r3, #20]
 800fbb6:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 800fbba:	615a      	str	r2, [r3, #20]
    FLASH->CR |= (uint32_t)(sect << 3u);
 800fbbc:	695a      	ldr	r2, [r3, #20]
 800fbbe:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800fbc2:	6158      	str	r0, [r3, #20]
    //开始扇区擦除
    FLASH->CR |= FLASH_CR_STRT;
 800fbc4:	695a      	ldr	r2, [r3, #20]
 800fbc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fbca:	615a      	str	r2, [r3, #20]
    //等待擦除操作完成
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fbcc:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <flash_erase+0x54>)
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fbd4:	d1fa      	bne.n	800fbcc <flash_erase+0x3c>
    //禁止扇区擦除
    FLASH->CR &= ~FLASH_CR_PER;
 800fbd6:	4a03      	ldr	r2, [pc, #12]	; (800fbe4 <flash_erase+0x54>)
 800fbd8:	6953      	ldr	r3, [r2, #20]
 800fbda:	f023 0302 	bic.w	r3, r3, #2
 800fbde:	6153      	str	r3, [r2, #20]
    
    return 0;  //成功返回
}
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	4770      	bx	lr
 800fbe4:	40022000 	.word	0x40022000

0800fbe8 <flash_read_logic>:
//       offset:扇区内部偏移地址（0~2024，要求为0,4,8,12，......）
//       N：读字节数目（4~2048,要求为4,8,12,......）//
//功能概要：读取flash存储器的sect扇区的 offset处开始的N字节，到RAM区dest处
//=======================================================================
void flash_read_logic(uint8_t *dest,uint16_t sect,uint16_t offset,uint16_t N)
{
 800fbe8:	b508      	push	{r3, lr}
    uint8_t *src;
    src=(uint8_t *)(FLASH_BASE+sect*FLASH_PAGE_SIZE+offset);
 800fbea:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800fbee:	eb02 21c1 	add.w	r1, r2, r1, lsl #11
    memcpy(dest,src,N);
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	f002 f986 	bl	8011f04 <memcpy>
}
 800fbf8:	bd08      	pop	{r3, pc}

0800fbfa <flash_read_physical>:
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
 800fbfa:	b508      	push	{r3, lr}
    uint8_t *src;
    src=(uint8_t *)addr;
    memcpy(dest,src,N);
 800fbfc:	f002 f982 	bl	8011f04 <memcpy>
}
 800fc00:	bd08      	pop	{r3, pc}

0800fc02 <flash_isempty>:
//参数说明：所要探测的flash区域初始地址
//功能概要：flash判空操作
//======================================================================

uint8_t flash_isempty(uint16_t sect,uint16_t N)
{
 800fc02:	b5b0      	push	{r4, r5, r7, lr}
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	460c      	mov	r4, r1
    uint16_t i,flag;
    uint8_t dest[N];
 800fc08:	1dcb      	adds	r3, r1, #7
 800fc0a:	08db      	lsrs	r3, r3, #3
 800fc0c:	466a      	mov	r2, sp
 800fc0e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800fc12:	469d      	mov	sp, r3
 800fc14:	466d      	mov	r5, sp
    uint8_t *src;
    flag = 1;
    src=(uint8_t *)(FLASH_BASE+sect*FLASH_PAGE_SIZE);
 800fc16:	f500 3180 	add.w	r1, r0, #65536	; 0x10000
    memcpy(dest,src,N);
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	02c9      	lsls	r1, r1, #11
 800fc1e:	4668      	mov	r0, sp
 800fc20:	f002 f970 	bl	8011f04 <memcpy>
    for(i = 0; i<N; i++)   //遍历区域内字节
 800fc24:	2300      	movs	r3, #0
 800fc26:	42a3      	cmp	r3, r4
 800fc28:	d205      	bcs.n	800fc36 <flash_isempty+0x34>
    {
        if(dest[i]!=0xff)   //非空
 800fc2a:	5cea      	ldrb	r2, [r5, r3]
 800fc2c:	2aff      	cmp	r2, #255	; 0xff
 800fc2e:	d105      	bne.n	800fc3c <flash_isempty+0x3a>
    for(i = 0; i<N; i++)   //遍历区域内字节
 800fc30:	3301      	adds	r3, #1
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	e7f7      	b.n	800fc26 <flash_isempty+0x24>
    flag = 1;
 800fc36:	2001      	movs	r0, #1
            flag=0;
            break;
        }
    }
    return flag;
}
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bdb0      	pop	{r4, r5, r7, pc}
            flag=0;
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	e7fb      	b.n	800fc38 <flash_isempty+0x36>

0800fc40 <flash_write_DoubleWord>:
//              （例如：0x08000004，Flash首地址为0x08000000）
//       data：写入的双字
//功能概要：Flash双字写入操作（STM32L433每次只能实现双字写入，先写低位字，再写高位字）
//======================================================================
uint8_t flash_write_DoubleWord(uint32_t addr,uint32_t data_l,uint32_t data_h)
{
 800fc40:	b410      	push	{r4}
    //清数据缓冲区
    if((FLASH->ACR & FLASH_ACR_DCEN) != 0U)
 800fc42:	4b0c      	ldr	r3, [pc, #48]	; (800fc74 <flash_write_DoubleWord+0x34>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800fc4a:	d004      	beq.n	800fc56 <flash_write_DoubleWord+0x16>
    {
        FLASH->ACR &= ~FLASH_ACR_DCEN;
 800fc4c:	4c09      	ldr	r4, [pc, #36]	; (800fc74 <flash_write_DoubleWord+0x34>)
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc54:	6023      	str	r3, [r4, #0]
    }
    
    //使能Flash即时编程
    FLASH->CR |= FLASH_CR_PG;
 800fc56:	4b07      	ldr	r3, [pc, #28]	; (800fc74 <flash_write_DoubleWord+0x34>)
 800fc58:	695c      	ldr	r4, [r3, #20]
 800fc5a:	f044 0401 	orr.w	r4, r4, #1
 800fc5e:	615c      	str	r4, [r3, #20]
    
    //先写入低位字
    *(__IO uint32_t*)addr = data_l;
 800fc60:	6001      	str	r1, [r0, #0]
    
    //再写入高位字
    *(__IO uint32_t*)(addr+4U) = data_h;
 800fc62:	6042      	str	r2, [r0, #4]
    
    //禁止Flash即时编程
    FLASH->CR &= ~FLASH_CR_PG;
 800fc64:	695a      	ldr	r2, [r3, #20]
 800fc66:	f022 0201 	bic.w	r2, r2, #1
 800fc6a:	615a      	str	r2, [r3, #20]
    
    return 0;    //返回成功
}
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc72:	4770      	bx	lr
 800fc74:	40022000 	.word	0x40022000

0800fc78 <flash_Best>:
//			N：待写入数据字节数
//			buf:待写入数据的首地址
//功能概要：首位地址都对齐的情况下的数据写入
//======================================================================
uint8_t flash_Best(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf)
{
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	4617      	mov	r7, r2
 800fc7c:	461d      	mov	r5, r3
    uint32_t temp_l,temp_h;
    uint32_t addr;
    uint16_t i;
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fc7e:	4b18      	ldr	r3, [pc, #96]	; (800fce0 <flash_Best+0x68>)
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fc86:	d1fa      	bne.n	800fc7e <flash_Best+0x6>
    //计算双字写入绝对地址
    addr = (uint32_t)(FLASH_BASE+sect*FLASH_PAGE_SIZE+offset);
 800fc88:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800fc8c:	eb01 26c0 	add.w	r6, r1, r0, lsl #11
    //循环写入双字，每8个数写一次
    for(i = 0; i < N; i+=8)
 800fc90:	2400      	movs	r4, #0
 800fc92:	e01b      	b.n	800fccc <flash_Best+0x54>
    {
        //低位字赋值
        temp_l = (uint32_t)((buf[i])|(buf[i+1]<<8)|(buf[i+2]<<16)|(buf[i+3]<<24));
 800fc94:	5d28      	ldrb	r0, [r5, r4]
 800fc96:	192b      	adds	r3, r5, r4
 800fc98:	7859      	ldrb	r1, [r3, #1]
 800fc9a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800fc9e:	7899      	ldrb	r1, [r3, #2]
 800fca0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800fca4:	78d9      	ldrb	r1, [r3, #3]
        //高位字赋值
        temp_h = (uint32_t)((buf[i+4])|(buf[i+5]<<8)|(buf[i+6]<<16)|(buf[i+7]<<24));
 800fca6:	791a      	ldrb	r2, [r3, #4]
 800fca8:	f893 c005 	ldrb.w	ip, [r3, #5]
 800fcac:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800fcb0:	f893 c006 	ldrb.w	ip, [r3, #6]
 800fcb4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800fcb8:	79db      	ldrb	r3, [r3, #7]
        //在绝对地址(addr+i)，实现双字写入
        flash_write_DoubleWord((addr+i),temp_l,temp_h);
 800fcba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800fcbe:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 800fcc2:	19a0      	adds	r0, r4, r6
 800fcc4:	f7ff ffbc 	bl	800fc40 <flash_write_DoubleWord>
    for(i = 0; i < N; i+=8)
 800fcc8:	3408      	adds	r4, #8
 800fcca:	b2a4      	uxth	r4, r4
 800fccc:	42bc      	cmp	r4, r7
 800fcce:	d3e1      	bcc.n	800fc94 <flash_Best+0x1c>
    }
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fcd0:	4b03      	ldr	r3, [pc, #12]	; (800fce0 <flash_Best+0x68>)
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fcd8:	d1fa      	bne.n	800fcd0 <flash_Best+0x58>
    return 0;
}
 800fcda:	2000      	movs	r0, #0
 800fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcde:	bf00      	nop
 800fce0:	40022000 	.word	0x40022000

0800fce4 <flash_write>:
{
 800fce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce8:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 800fcec:	4607      	mov	r7, r0
 800fcee:	4614      	mov	r4, r2
 800fcf0:	461d      	mov	r5, r3
	FLASH->SR &= 0xFFFFFFUL;
 800fcf2:	4a22      	ldr	r2, [pc, #136]	; (800fd7c <flash_write+0x98>)
 800fcf4:	6913      	ldr	r3, [r2, #16]
 800fcf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fcfa:	6113      	str	r3, [r2, #16]
    if(offset+N>MCU_SECTORSIZE)
 800fcfc:	1863      	adds	r3, r4, r1
 800fcfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd02:	dc09      	bgt.n	800fd18 <flash_write+0x34>
 800fd04:	460e      	mov	r6, r1
        flash_read_logic(data,sect,0,MCU_SECTORSIZE); //将当前扇区的全部值读入数组中
 800fd06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	4601      	mov	r1, r0
 800fd0e:	4668      	mov	r0, sp
 800fd10:	f7ff ff6a 	bl	800fbe8 <flash_read_logic>
        for(i = 0;i<N;i++)
 800fd14:	2300      	movs	r3, #0
 800fd16:	e01b      	b.n	800fd50 <flash_write+0x6c>
 800fd18:	4688      	mov	r8, r1
        flash_write(sect,offset,MCU_SECTORSIZE-offset,buf);
 800fd1a:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
 800fd1e:	462b      	mov	r3, r5
 800fd20:	b292      	uxth	r2, r2
 800fd22:	f7ff ffdf 	bl	800fce4 <flash_write>
        flash_write(sect+1,0,N-(MCU_SECTORSIZE-offset),buf+(MCU_SECTORSIZE-offset));
 800fd26:	eb08 0204 	add.w	r2, r8, r4
 800fd2a:	b292      	uxth	r2, r2
 800fd2c:	f5c8 6300 	rsb	r3, r8, #2048	; 0x800
 800fd30:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800fd34:	1c78      	adds	r0, r7, #1
 800fd36:	442b      	add	r3, r5
 800fd38:	b292      	uxth	r2, r2
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	b280      	uxth	r0, r0
 800fd3e:	f7ff ffd1 	bl	800fce4 <flash_write>
 800fd42:	e011      	b.n	800fd68 <flash_write+0x84>
            data[offset+i] = buf[i];
 800fd44:	199a      	adds	r2, r3, r6
 800fd46:	5ce9      	ldrb	r1, [r5, r3]
 800fd48:	f80d 1002 	strb.w	r1, [sp, r2]
        for(i = 0;i<N;i++)
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	d3f7      	bcc.n	800fd44 <flash_write+0x60>
        flash_erase(sect);
 800fd54:	4638      	mov	r0, r7
 800fd56:	f7ff ff1b 	bl	800fb90 <flash_erase>
        flash_Best(sect,0,MCU_SECTORSIZE,data);
 800fd5a:	466b      	mov	r3, sp
 800fd5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd60:	2100      	movs	r1, #0
 800fd62:	4638      	mov	r0, r7
 800fd64:	f7ff ff88 	bl	800fc78 <flash_Best>
	while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fd68:	4b04      	ldr	r3, [pc, #16]	; (800fd7c <flash_write+0x98>)
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fd70:	d1fa      	bne.n	800fd68 <flash_write+0x84>
}
 800fd72:	2000      	movs	r0, #0
 800fd74:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 800fd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7c:	40022000 	.word	0x40022000

0800fd80 <flash_write_physical>:
{
 800fd80:	b510      	push	{r4, lr}
 800fd82:	4603      	mov	r3, r0
    sect = (addr-MCU_FLASH_ADDR_START)/MCU_SECTORSIZE;
 800fd84:	f3c0 20cf 	ubfx	r0, r0, #11, #16
    offset = addr-(sect*MCU_SECTORSIZE)-MCU_FLASH_ADDR_START;
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	02c4      	lsls	r4, r0, #11
 800fd8c:	b2a4      	uxth	r4, r4
 800fd8e:	1b1c      	subs	r4, r3, r4
    flash_write(sect,offset,N,buf);
 800fd90:	4613      	mov	r3, r2
 800fd92:	460a      	mov	r2, r1
 800fd94:	b2a1      	uxth	r1, r4
 800fd96:	f7ff ffa5 	bl	800fce4 <flash_write>
	while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fd9a:	4b03      	ldr	r3, [pc, #12]	; (800fda8 <flash_write_physical+0x28>)
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fda2:	d1fa      	bne.n	800fd9a <flash_write_physical+0x1a>
}
 800fda4:	2000      	movs	r0, #0
 800fda6:	bd10      	pop	{r4, pc}
 800fda8:	40022000 	.word	0x40022000

0800fdac <gpio_get_port_pin>:
//功能概要：将传进参数port_pin进行解析，得出具体端口号与引脚号，分别赋值给port与pin,返回。
//       （例：(PTB_NUM)|(9)解析为PORTB与9，并将其分别赋值给port与pin）。
//=====================================================================
void gpio_get_port_pin(uint16_t port_pin,uint8_t* port,uint8_t* pin)
{
	*port = (port_pin>>8);
 800fdac:	0a03      	lsrs	r3, r0, #8
 800fdae:	700b      	strb	r3, [r1, #0]
	*pin = port_pin;
 800fdb0:	7010      	strb	r0, [r2, #0]
}
 800fdb2:	4770      	bx	lr

0800fdb4 <gpio_set>:
{
 800fdb4:	b510      	push	{r4, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	460c      	mov	r4, r1
	gpio_get_port_pin(port_pin,&port,&pin);
 800fdba:	f10d 0206 	add.w	r2, sp, #6
 800fdbe:	f10d 0107 	add.w	r1, sp, #7
 800fdc2:	f7ff fff3 	bl	800fdac <gpio_get_port_pin>
	if(7 == port) //GPIOH
 800fdc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fdca:	2b07      	cmp	r3, #7
 800fdcc:	d00b      	beq.n	800fde6 <gpio_set+0x32>
		gpio_ptr = GPIO_ARR[port];
 800fdce:	4a0b      	ldr	r2, [pc, #44]	; (800fdfc <gpio_set+0x48>)
 800fdd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	if(1 == state)    //高电平(该引脚对应置位寄存器置1)
 800fdd4:	2c01      	cmp	r4, #1
 800fdd6:	d00b      	beq.n	800fdf0 <gpio_set+0x3c>
		gpio_ptr->BRR = (uint32_t)(1u<<pin);
 800fdd8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800fddc:	2301      	movs	r3, #1
 800fdde:	408b      	lsls	r3, r1
 800fde0:	6293      	str	r3, [r2, #40]	; 0x28
}
 800fde2:	b002      	add	sp, #8
 800fde4:	bd10      	pop	{r4, pc}
		gpio_ptr = GPIO_ARR[port-2];
 800fde6:	3b02      	subs	r3, #2
 800fde8:	4a04      	ldr	r2, [pc, #16]	; (800fdfc <gpio_set+0x48>)
 800fdea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fdee:	e7f1      	b.n	800fdd4 <gpio_set+0x20>
		gpio_ptr->BSRR = (uint32_t)(1u<<pin);
 800fdf0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	408b      	lsls	r3, r1
 800fdf8:	6193      	str	r3, [r2, #24]
 800fdfa:	e7f2      	b.n	800fde2 <gpio_set+0x2e>
 800fdfc:	20004074 	.word	0x20004074

0800fe00 <gpio_init>:
{
 800fe00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe02:	b083      	sub	sp, #12
 800fe04:	4605      	mov	r5, r0
 800fe06:	460c      	mov	r4, r1
 800fe08:	4616      	mov	r6, r2
	gpio_get_port_pin(port_pin,&port,&pin);
 800fe0a:	f10d 0206 	add.w	r2, sp, #6
 800fe0e:	f10d 0107 	add.w	r1, sp, #7
 800fe12:	f7ff ffcb 	bl	800fdac <gpio_get_port_pin>
	if(7 == port) //GPIOH
 800fe16:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fe1a:	2907      	cmp	r1, #7
 800fe1c:	d015      	beq.n	800fe4a <gpio_init+0x4a>
		gpio_ptr = GPIO_ARR[port];
 800fe1e:	4b12      	ldr	r3, [pc, #72]	; (800fe68 <gpio_init+0x68>)
 800fe20:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN<<(port * 1u));
 800fe24:	4f11      	ldr	r7, [pc, #68]	; (800fe6c <gpio_init+0x6c>)
 800fe26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe28:	2201      	movs	r2, #1
 800fe2a:	408a      	lsls	r2, r1
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	temp = gpio_ptr->MODER;
 800fe30:	6801      	ldr	r1, [r0, #0]
	temp &= ~(GPIO_MODER_MODE0 << (pin * 2u));
 800fe32:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe36:	005b      	lsls	r3, r3, #1
 800fe38:	2203      	movs	r2, #3
 800fe3a:	409a      	lsls	r2, r3
 800fe3c:	ea21 0202 	bic.w	r2, r1, r2
	if(dir == 1)  //定义为输出引脚
 800fe40:	2c01      	cmp	r4, #1
 800fe42:	d007      	beq.n	800fe54 <gpio_init+0x54>
		gpio_ptr->MODER = temp;
 800fe44:	6002      	str	r2, [r0, #0]
}
 800fe46:	b003      	add	sp, #12
 800fe48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_ptr = GPIO_ARR[port-2];
 800fe4a:	1e8b      	subs	r3, r1, #2
 800fe4c:	4a06      	ldr	r2, [pc, #24]	; (800fe68 <gpio_init+0x68>)
 800fe4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe52:	e7e7      	b.n	800fe24 <gpio_init+0x24>
		temp |= (GPIO_OUTPUT << (pin * 2u));
 800fe54:	2101      	movs	r1, #1
 800fe56:	fa01 f303 	lsl.w	r3, r1, r3
 800fe5a:	431a      	orrs	r2, r3
		gpio_ptr->MODER = temp;
 800fe5c:	6002      	str	r2, [r0, #0]
		gpio_set(port_pin,state);    //调用gpio_set函数，设定引脚初始状态
 800fe5e:	4631      	mov	r1, r6
 800fe60:	4628      	mov	r0, r5
 800fe62:	f7ff ffa7 	bl	800fdb4 <gpio_set>
 800fe66:	e7ee      	b.n	800fe46 <gpio_init+0x46>
 800fe68:	20004074 	.word	0x20004074
 800fe6c:	40021000 	.word	0x40021000

0800fe70 <gpio_reverse>:
{
 800fe70:	b500      	push	{lr}
 800fe72:	b083      	sub	sp, #12
	gpio_get_port_pin(port_pin,&port,&pin);
 800fe74:	f10d 0206 	add.w	r2, sp, #6
 800fe78:	f10d 0107 	add.w	r1, sp, #7
 800fe7c:	f7ff ff96 	bl	800fdac <gpio_get_port_pin>
	if(7 == port) //GPIOH
 800fe80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe84:	2b07      	cmp	r3, #7
 800fe86:	d00d      	beq.n	800fea4 <gpio_reverse+0x34>
		gpio_ptr = GPIO_ARR[port];
 800fe88:	4a0a      	ldr	r2, [pc, #40]	; (800feb4 <gpio_reverse+0x44>)
 800fe8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	if ((gpio_ptr->ODR & (1u<<pin)) != 0x00u)
 800fe8e:	6951      	ldr	r1, [r2, #20]
 800fe90:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800fe94:	2301      	movs	r3, #1
 800fe96:	4083      	lsls	r3, r0
 800fe98:	4219      	tst	r1, r3
 800fe9a:	d108      	bne.n	800feae <gpio_reverse+0x3e>
		gpio_ptr->BSRR = (uint32_t)(1u<<pin);
 800fe9c:	6193      	str	r3, [r2, #24]
}
 800fe9e:	b003      	add	sp, #12
 800fea0:	f85d fb04 	ldr.w	pc, [sp], #4
		gpio_ptr = GPIO_ARR[port-2];
 800fea4:	3b02      	subs	r3, #2
 800fea6:	4a03      	ldr	r2, [pc, #12]	; (800feb4 <gpio_reverse+0x44>)
 800fea8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800feac:	e7ef      	b.n	800fe8e <gpio_reverse+0x1e>
		gpio_ptr->BRR = (uint32_t)(1u<<pin);
 800feae:	6293      	str	r3, [r2, #40]	; 0x28
 800feb0:	e7f5      	b.n	800fe9e <gpio_reverse+0x2e>
 800feb2:	bf00      	nop
 800feb4:	20004074 	.word	0x20004074

0800feb8 <rt_sem_init>:
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
 800feb8:	b570      	push	{r4, r5, r6, lr}
 800feba:	4604      	mov	r4, r0
 800febc:	4616      	mov	r6, r2
 800febe:	461d      	mov	r5, r3
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(value < 0x10000U);

    /* init object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
 800fec0:	460a      	mov	r2, r1
 800fec2:	2102      	movs	r1, #2
 800fec4:	f7ff fd1a 	bl	800f8fc <rt_object_init>
    rt_list_init(&(ipc->suspend_thread));
 800fec8:	f104 0314 	add.w	r3, r4, #20
    l->next = l->prev = l;
 800fecc:	61a3      	str	r3, [r4, #24]
 800fece:	6163      	str	r3, [r4, #20]

    /* init ipc object */
    rt_ipc_object_init(&(sem->parent));

    /* set init value */
    sem->value = (rt_uint16_t)value;
 800fed0:	83a6      	strh	r6, [r4, #28]

    /* set parent */
    sem->parent.parent.flag = flag;
 800fed2:	7265      	strb	r5, [r4, #9]

    return RT_EOK;
}
 800fed4:	2000      	movs	r0, #0
 800fed6:	bd70      	pop	{r4, r5, r6, pc}

0800fed8 <rt_sem_create>:
 * @return the created semaphore, RT_NULL on error happen
 *
 * @see rt_sem_init
 */
rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	460d      	mov	r5, r1
 800fedc:	4614      	mov	r4, r2

    RT_DEBUG_NOT_IN_INTERRUPT;
    RT_ASSERT(value < 0x10000U);

    /* allocate object */
    sem = (rt_sem_t)rt_object_allocate(RT_Object_Class_Semaphore, name);
 800fede:	4601      	mov	r1, r0
 800fee0:	2002      	movs	r0, #2
 800fee2:	f7ff fd40 	bl	800f966 <rt_object_allocate>
    if (sem == RT_NULL)
 800fee6:	4603      	mov	r3, r0
 800fee8:	b128      	cbz	r0, 800fef6 <rt_sem_create+0x1e>
    rt_list_init(&(ipc->suspend_thread));
 800feea:	f100 0214 	add.w	r2, r0, #20
 800feee:	6182      	str	r2, [r0, #24]
 800fef0:	6142      	str	r2, [r0, #20]

    /* init ipc object */
    rt_ipc_object_init(&(sem->parent));

    /* set init value */
    sem->value = value;
 800fef2:	8385      	strh	r5, [r0, #28]

    /* set parent */
    sem->parent.parent.flag = flag;
 800fef4:	7244      	strb	r4, [r0, #9]

    return sem;
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	bd38      	pop	{r3, r4, r5, pc}

0800fefa <rt_sem_take>:
 * @param time the waiting time
 *
 * @return the error code
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
 800fefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	4605      	mov	r5, r0
 800ff02:	9101      	str	r1, [sp, #4]
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 800ff04:	f7fd fc9c 	bl	800d840 <rt_hw_interrupt_disable>
 800ff08:	4607      	mov	r7, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
 800ff0a:	8bab      	ldrh	r3, [r5, #28]
 800ff0c:	b9f3      	cbnz	r3, 800ff4c <rt_sem_take+0x52>
        rt_hw_interrupt_enable(temp);
    }
    else
    {
        /* no waiting, return with timeout */
        if (time == 0)
 800ff0e:	9b01      	ldr	r3, [sp, #4]
 800ff10:	b313      	cbz	r3, 800ff58 <rt_sem_take+0x5e>
            /* current context checking */
            RT_DEBUG_IN_THREAD_CONTEXT;

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
 800ff12:	f7ff f91d 	bl	800f150 <rt_thread_self>
 800ff16:	4604      	mov	r4, r0

            /* reset thread error number */
            thread->error = RT_EOK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	6303      	str	r3, [r0, #48]	; 0x30

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            rt_ipc_list_suspend(&(sem->parent.suspend_thread),
 800ff1c:	f105 0614 	add.w	r6, r5, #20
 800ff20:	f895 8009 	ldrb.w	r8, [r5, #9]
    rt_thread_suspend(thread);
 800ff24:	f7ff f9c2 	bl	800f2ac <rt_thread_suspend>
    switch (flag)
 800ff28:	f1b8 0f00 	cmp.w	r8, #0
 800ff2c:	d019      	beq.n	800ff62 <rt_sem_take+0x68>
 800ff2e:	f1b8 0f01 	cmp.w	r8, #1
 800ff32:	d01f      	beq.n	800ff74 <rt_sem_take+0x7a>
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (time > 0)
 800ff34:	9b01      	ldr	r3, [sp, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	dc3a      	bgt.n	800ffb0 <rt_sem_take+0xb6>
                                 &time);
                rt_timer_start(&(thread->thread_timer));
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
 800ff3a:	4638      	mov	r0, r7
 800ff3c:	f7fd fc84 	bl	800d848 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
 800ff40:	f001 f87e 	bl	8011040 <rt_schedule>

            if (thread->error != RT_EOK)
 800ff44:	6b20      	ldr	r0, [r4, #48]	; 0x30
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));

    return RT_EOK;
}
 800ff46:	b002      	add	sp, #8
 800ff48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sem->value --;
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	83ab      	strh	r3, [r5, #28]
        rt_hw_interrupt_enable(temp);
 800ff50:	f7fd fc7a 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 800ff54:	2000      	movs	r0, #0
 800ff56:	e7f6      	b.n	800ff46 <rt_sem_take+0x4c>
            rt_hw_interrupt_enable(temp);
 800ff58:	f7fd fc76 	bl	800d848 <rt_hw_interrupt_enable>
            return -RT_ETIMEOUT;
 800ff5c:	f06f 0001 	mvn.w	r0, #1
 800ff60:	e7f1      	b.n	800ff46 <rt_sem_take+0x4c>
        rt_list_insert_before(list, &(thread->tlist));
 800ff62:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 800ff66:	6872      	ldr	r2, [r6, #4]
 800ff68:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 800ff6a:	6872      	ldr	r2, [r6, #4]
 800ff6c:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 800ff6e:	6073      	str	r3, [r6, #4]
    n->next = l;
 800ff70:	6166      	str	r6, [r4, #20]
 800ff72:	e7df      	b.n	800ff34 <rt_sem_take+0x3a>
            for (n = list->next; n != list; n = n->next)
 800ff74:	696b      	ldr	r3, [r5, #20]
 800ff76:	429e      	cmp	r6, r3
 800ff78:	d00f      	beq.n	800ff9a <rt_sem_take+0xa0>
                if (thread->current_priority < sthread->current_priority)
 800ff7a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800ff7e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ff82:	4291      	cmp	r1, r2
 800ff84:	d301      	bcc.n	800ff8a <rt_sem_take+0x90>
            for (n = list->next; n != list; n = n->next)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	e7f5      	b.n	800ff76 <rt_sem_take+0x7c>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 800ff8a:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 800ff8e:	6859      	ldr	r1, [r3, #4]
 800ff90:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 800ff92:	6859      	ldr	r1, [r3, #4]
 800ff94:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 800ff96:	605a      	str	r2, [r3, #4]
    n->next = l;
 800ff98:	6163      	str	r3, [r4, #20]
            if (n == list)
 800ff9a:	429e      	cmp	r6, r3
 800ff9c:	d1ca      	bne.n	800ff34 <rt_sem_take+0x3a>
                rt_list_insert_before(list, &(thread->tlist));
 800ff9e:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 800ffa2:	6872      	ldr	r2, [r6, #4]
 800ffa4:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 800ffa6:	6872      	ldr	r2, [r6, #4]
 800ffa8:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 800ffaa:	6073      	str	r3, [r6, #4]
    n->next = l;
 800ffac:	6166      	str	r6, [r4, #20]
 800ffae:	e7c1      	b.n	800ff34 <rt_sem_take+0x3a>
                rt_timer_control(&(thread->thread_timer),
 800ffb0:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 800ffb4:	aa01      	add	r2, sp, #4
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f7ff fafb 	bl	800f5b4 <rt_timer_control>
                rt_timer_start(&(thread->thread_timer));
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	f7ff fa74 	bl	800f4ac <rt_timer_start>
 800ffc4:	e7b9      	b.n	800ff3a <rt_sem_take+0x40>

0800ffc6 <rt_sem_release>:
 * @param sem the semaphore object
 *
 * @return the error code
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
 800ffc6:	b538      	push	{r3, r4, r5, lr}
 800ffc8:	4604      	mov	r4, r0
    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));

    need_schedule = RT_FALSE;

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 800ffca:	f7fd fc39 	bl	800d840 <rt_hw_interrupt_disable>
 800ffce:	4605      	mov	r5, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
 800ffd0:	f104 0314 	add.w	r3, r4, #20
    return l->next == l;
 800ffd4:	6960      	ldr	r0, [r4, #20]
 800ffd6:	4283      	cmp	r3, r0
 800ffd8:	d009      	beq.n	800ffee <rt_sem_release+0x28>
    rt_thread_resume(thread);
 800ffda:	3814      	subs	r0, #20
 800ffdc:	f7ff f9b4 	bl	800f348 <rt_thread_resume>
    {
        /* resume the suspended thread */
        rt_ipc_list_resume(&(sem->parent.suspend_thread));
        need_schedule = RT_TRUE;
 800ffe0:	2401      	movs	r4, #1
    }
    else
        sem->value ++; /* increase value */

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	f7fd fc30 	bl	800d848 <rt_hw_interrupt_enable>

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
 800ffe8:	b934      	cbnz	r4, 800fff8 <rt_sem_release+0x32>
        rt_schedule();

    return RT_EOK;
}
 800ffea:	2000      	movs	r0, #0
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
        sem->value ++; /* increase value */
 800ffee:	8ba3      	ldrh	r3, [r4, #28]
 800fff0:	3301      	adds	r3, #1
 800fff2:	83a3      	strh	r3, [r4, #28]
    need_schedule = RT_FALSE;
 800fff4:	2400      	movs	r4, #0
 800fff6:	e7f4      	b.n	800ffe2 <rt_sem_release+0x1c>
        rt_schedule();
 800fff8:	f001 f822 	bl	8011040 <rt_schedule>
 800fffc:	e7f5      	b.n	800ffea <rt_sem_release+0x24>

0800fffe <rt_mutex_create>:
 * @return the created mutex, RT_NULL on error happen
 *
 * @see rt_mutex_init
 */
rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
 800fffe:	b510      	push	{r4, lr}
 8010000:	460c      	mov	r4, r1
    struct rt_mutex *mutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* allocate object */
    mutex = (rt_mutex_t)rt_object_allocate(RT_Object_Class_Mutex, name);
 8010002:	4601      	mov	r1, r0
 8010004:	2003      	movs	r0, #3
 8010006:	f7ff fcae 	bl	800f966 <rt_object_allocate>
    if (mutex == RT_NULL)
 801000a:	4603      	mov	r3, r0
 801000c:	b158      	cbz	r0, 8010026 <rt_mutex_create+0x28>
    rt_list_init(&(ipc->suspend_thread));
 801000e:	f100 0214 	add.w	r2, r0, #20
    l->next = l->prev = l;
 8010012:	6182      	str	r2, [r0, #24]
 8010014:	6142      	str	r2, [r0, #20]
        return mutex;

    /* init ipc object */
    rt_ipc_object_init(&(mutex->parent));

    mutex->value              = 1;
 8010016:	2201      	movs	r2, #1
 8010018:	8382      	strh	r2, [r0, #28]
    mutex->owner              = RT_NULL;
 801001a:	2200      	movs	r2, #0
 801001c:	6202      	str	r2, [r0, #32]
    mutex->original_priority  = 0xFF;
 801001e:	21ff      	movs	r1, #255	; 0xff
 8010020:	7781      	strb	r1, [r0, #30]
    mutex->hold               = 0;
 8010022:	77c2      	strb	r2, [r0, #31]

    /* set flag */
    mutex->parent.parent.flag = flag;
 8010024:	7244      	strb	r4, [r0, #9]

    return mutex;
}
 8010026:	4618      	mov	r0, r3
 8010028:	bd10      	pop	{r4, pc}

0801002a <rt_mutex_take>:
 * @param time the waiting time
 *
 * @return the error code
 */
rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
 801002a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	4606      	mov	r6, r0
 8010032:	9101      	str	r1, [sp, #4]
    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);

    /* get current thread */
    thread = rt_thread_self();
 8010034:	f7ff f88c 	bl	800f150 <rt_thread_self>
 8010038:	4604      	mov	r4, r0

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 801003a:	f7fd fc01 	bl	800d840 <rt_hw_interrupt_disable>
 801003e:	4680      	mov	r8, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    /* reset thread error */
    thread->error = RT_EOK;
 8010040:	2300      	movs	r3, #0
 8010042:	6323      	str	r3, [r4, #48]	; 0x30

    if (mutex->owner == thread)
 8010044:	6a33      	ldr	r3, [r6, #32]
 8010046:	42a3      	cmp	r3, r4
 8010048:	d137      	bne.n	80100ba <rt_mutex_take+0x90>
    {
        /* it's the same thread */
        mutex->hold ++;
 801004a:	7ff3      	ldrb	r3, [r6, #31]
 801004c:	3301      	adds	r3, #1
 801004e:	77f3      	strb	r3, [r6, #31]
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 8010050:	4640      	mov	r0, r8
 8010052:	f7fd fbf9 	bl	800d848 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));

    return RT_EOK;
 8010056:	2000      	movs	r0, #0
}
 8010058:	b002      	add	sp, #8
 801005a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mutex->value --;
 801005e:	3b01      	subs	r3, #1
 8010060:	83b3      	strh	r3, [r6, #28]
            mutex->owner             = thread;
 8010062:	6234      	str	r4, [r6, #32]
            mutex->original_priority = thread->current_priority;
 8010064:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8010068:	77b3      	strb	r3, [r6, #30]
            mutex->hold ++;
 801006a:	7ff3      	ldrb	r3, [r6, #31]
 801006c:	3301      	adds	r3, #1
 801006e:	77f3      	strb	r3, [r6, #31]
 8010070:	e7ee      	b.n	8010050 <rt_mutex_take+0x26>
                thread->error = -RT_ETIMEOUT;
 8010072:	f06f 0501 	mvn.w	r5, #1
 8010076:	6325      	str	r5, [r4, #48]	; 0x30
                rt_hw_interrupt_enable(temp);
 8010078:	4640      	mov	r0, r8
 801007a:	f7fd fbe5 	bl	800d848 <rt_hw_interrupt_enable>
                return -RT_ETIMEOUT;
 801007e:	4628      	mov	r0, r5
 8010080:	e7ea      	b.n	8010058 <rt_mutex_take+0x2e>
                    rt_thread_control(mutex->owner,
 8010082:	f104 0235 	add.w	r2, r4, #53	; 0x35
 8010086:	2102      	movs	r1, #2
 8010088:	f7ff f996 	bl	800f3b8 <rt_thread_control>
 801008c:	e022      	b.n	80100d4 <rt_mutex_take+0xaa>
        rt_list_insert_before(list, &(thread->tlist));
 801008e:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 8010092:	686a      	ldr	r2, [r5, #4]
 8010094:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 8010096:	686a      	ldr	r2, [r5, #4]
 8010098:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 801009a:	606b      	str	r3, [r5, #4]
    n->next = l;
 801009c:	6165      	str	r5, [r4, #20]
                if (time > 0)
 801009e:	9b01      	ldr	r3, [sp, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	dc3f      	bgt.n	8010124 <rt_mutex_take+0xfa>
                rt_hw_interrupt_enable(temp);
 80100a4:	4640      	mov	r0, r8
 80100a6:	f7fd fbcf 	bl	800d848 <rt_hw_interrupt_enable>
                rt_schedule();
 80100aa:	f000 ffc9 	bl	8011040 <rt_schedule>
                if (thread->error != RT_EOK)
 80100ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d042      	beq.n	801013a <rt_mutex_take+0x110>
                    if (thread->error == -RT_EINTR) goto __again;
 80100b4:	f110 0f09 	cmn.w	r0, #9
 80100b8:	d1ce      	bne.n	8010058 <rt_mutex_take+0x2e>
        if (mutex->value > 0)
 80100ba:	8bb3      	ldrh	r3, [r6, #28]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1ce      	bne.n	801005e <rt_mutex_take+0x34>
            if (time == 0)
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d0d5      	beq.n	8010072 <rt_mutex_take+0x48>
                if (thread->current_priority < mutex->owner->current_priority)
 80100c6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80100ca:	6a30      	ldr	r0, [r6, #32]
 80100cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d3d6      	bcc.n	8010082 <rt_mutex_take+0x58>
                rt_ipc_list_suspend(&(mutex->parent.suspend_thread),
 80100d4:	f106 0514 	add.w	r5, r6, #20
 80100d8:	7a77      	ldrb	r7, [r6, #9]
    rt_thread_suspend(thread);
 80100da:	4620      	mov	r0, r4
 80100dc:	f7ff f8e6 	bl	800f2ac <rt_thread_suspend>
    switch (flag)
 80100e0:	2f00      	cmp	r7, #0
 80100e2:	d0d4      	beq.n	801008e <rt_mutex_take+0x64>
 80100e4:	2f01      	cmp	r7, #1
 80100e6:	d1da      	bne.n	801009e <rt_mutex_take+0x74>
            for (n = list->next; n != list; n = n->next)
 80100e8:	6973      	ldr	r3, [r6, #20]
 80100ea:	429d      	cmp	r5, r3
 80100ec:	d00f      	beq.n	801010e <rt_mutex_take+0xe4>
                if (thread->current_priority < sthread->current_priority)
 80100ee:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80100f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80100f6:	4291      	cmp	r1, r2
 80100f8:	d301      	bcc.n	80100fe <rt_mutex_take+0xd4>
            for (n = list->next; n != list; n = n->next)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	e7f5      	b.n	80100ea <rt_mutex_take+0xc0>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 80100fe:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 8010102:	6859      	ldr	r1, [r3, #4]
 8010104:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 8010106:	6859      	ldr	r1, [r3, #4]
 8010108:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 801010a:	605a      	str	r2, [r3, #4]
    n->next = l;
 801010c:	6163      	str	r3, [r4, #20]
            if (n == list)
 801010e:	429d      	cmp	r5, r3
 8010110:	d1c5      	bne.n	801009e <rt_mutex_take+0x74>
                rt_list_insert_before(list, &(thread->tlist));
 8010112:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 8010116:	686a      	ldr	r2, [r5, #4]
 8010118:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 801011a:	686a      	ldr	r2, [r5, #4]
 801011c:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 801011e:	606b      	str	r3, [r5, #4]
    n->next = l;
 8010120:	6165      	str	r5, [r4, #20]
 8010122:	e7bc      	b.n	801009e <rt_mutex_take+0x74>
                    rt_timer_control(&(thread->thread_timer),
 8010124:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 8010128:	aa01      	add	r2, sp, #4
 801012a:	2100      	movs	r1, #0
 801012c:	4628      	mov	r0, r5
 801012e:	f7ff fa41 	bl	800f5b4 <rt_timer_control>
                    rt_timer_start(&(thread->thread_timer));
 8010132:	4628      	mov	r0, r5
 8010134:	f7ff f9ba 	bl	800f4ac <rt_timer_start>
 8010138:	e7b4      	b.n	80100a4 <rt_mutex_take+0x7a>
                    temp = rt_hw_interrupt_disable();
 801013a:	f7fd fb81 	bl	800d840 <rt_hw_interrupt_disable>
 801013e:	4680      	mov	r8, r0
 8010140:	e786      	b.n	8010050 <rt_mutex_take+0x26>

08010142 <rt_mutex_release>:
 * @param mutex the mutex object
 *
 * @return the error code
 */
rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
 8010142:	b570      	push	{r4, r5, r6, lr}
 8010144:	4604      	mov	r4, r0

    /* only thread could release mutex because we need test the ownership */
    RT_DEBUG_IN_THREAD_CONTEXT;

    /* get current thread */
    thread = rt_thread_self();
 8010146:	f7ff f803 	bl	800f150 <rt_thread_self>
 801014a:	4606      	mov	r6, r0

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 801014c:	f7fd fb78 	bl	800d840 <rt_hw_interrupt_disable>
 8010150:	4605      	mov	r5, r0
                  thread->name, mutex->value, mutex->hold));

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));

    /* mutex only can be released by owner */
    if (thread != mutex->owner)
 8010152:	6a20      	ldr	r0, [r4, #32]
 8010154:	42b0      	cmp	r0, r6
 8010156:	d11b      	bne.n	8010190 <rt_mutex_release+0x4e>

        return -RT_ERROR;
    }

    /* decrease hold */
    mutex->hold --;
 8010158:	7fe3      	ldrb	r3, [r4, #31]
 801015a:	3b01      	subs	r3, #1
 801015c:	b2db      	uxtb	r3, r3
 801015e:	77e3      	strb	r3, [r4, #31]
    /* if no hold */
    if (mutex->hold == 0)
 8010160:	bb6b      	cbnz	r3, 80101be <rt_mutex_release+0x7c>
    {
        /* change the owner thread to original priority */
        if (mutex->original_priority != mutex->owner->current_priority)
 8010162:	7fa2      	ldrb	r2, [r4, #30]
 8010164:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8010168:	429a      	cmp	r2, r3
 801016a:	d119      	bne.n	80101a0 <rt_mutex_release+0x5e>
                              RT_THREAD_CTRL_CHANGE_PRIORITY,
                              &(mutex->original_priority));
        }

        /* wakeup suspended thread */
        if (!rt_list_isempty(&mutex->parent.suspend_thread))
 801016c:	f104 0314 	add.w	r3, r4, #20
    return l->next == l;
 8010170:	6962      	ldr	r2, [r4, #20]
 8010172:	4293      	cmp	r3, r2
 8010174:	d01a      	beq.n	80101ac <rt_mutex_release+0x6a>
        {
            /* get suspended thread */
            thread = rt_list_entry(mutex->parent.suspend_thread.next,
 8010176:	f1a2 0014 	sub.w	r0, r2, #20

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n",
                                        thread->name));

            /* set new owner and priority */
            mutex->owner             = thread;
 801017a:	6220      	str	r0, [r4, #32]
            mutex->original_priority = thread->current_priority;
 801017c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8010180:	77a3      	strb	r3, [r4, #30]
            mutex->hold ++;
 8010182:	7fe3      	ldrb	r3, [r4, #31]
 8010184:	3301      	adds	r3, #1
 8010186:	77e3      	strb	r3, [r4, #31]
    rt_thread_resume(thread);
 8010188:	f7ff f8de 	bl	800f348 <rt_thread_resume>

            /* resume thread */
            rt_ipc_list_resume(&(mutex->parent.suspend_thread));

            need_schedule = RT_TRUE;
 801018c:	2401      	movs	r4, #1
 801018e:	e017      	b.n	80101c0 <rt_mutex_release+0x7e>
        thread->error = -RT_ERROR;
 8010190:	f04f 34ff 	mov.w	r4, #4294967295
 8010194:	6334      	str	r4, [r6, #48]	; 0x30
        rt_hw_interrupt_enable(temp);
 8010196:	4628      	mov	r0, r5
 8010198:	f7fd fb56 	bl	800d848 <rt_hw_interrupt_enable>
        return -RT_ERROR;
 801019c:	4620      	mov	r0, r4
 801019e:	e014      	b.n	80101ca <rt_mutex_release+0x88>
            rt_thread_control(mutex->owner,
 80101a0:	f104 021e 	add.w	r2, r4, #30
 80101a4:	2102      	movs	r1, #2
 80101a6:	f7ff f907 	bl	800f3b8 <rt_thread_control>
 80101aa:	e7df      	b.n	801016c <rt_mutex_release+0x2a>
        }
        else
        {
            /* increase value */
            mutex->value ++;
 80101ac:	8ba3      	ldrh	r3, [r4, #28]
 80101ae:	3301      	adds	r3, #1
 80101b0:	83a3      	strh	r3, [r4, #28]

            /* clear owner */
            mutex->owner             = RT_NULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	6223      	str	r3, [r4, #32]
            mutex->original_priority = 0xff;
 80101b6:	22ff      	movs	r2, #255	; 0xff
 80101b8:	77a2      	strb	r2, [r4, #30]
    need_schedule = RT_FALSE;
 80101ba:	461c      	mov	r4, r3
 80101bc:	e000      	b.n	80101c0 <rt_mutex_release+0x7e>
 80101be:	2400      	movs	r4, #0
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 80101c0:	4628      	mov	r0, r5
 80101c2:	f7fd fb41 	bl	800d848 <rt_hw_interrupt_enable>

    /* perform a schedule */
    if (need_schedule == RT_TRUE)
 80101c6:	b90c      	cbnz	r4, 80101cc <rt_mutex_release+0x8a>
        rt_schedule();

    return RT_EOK;
 80101c8:	2000      	movs	r0, #0
}
 80101ca:	bd70      	pop	{r4, r5, r6, pc}
        rt_schedule();
 80101cc:	f000 ff38 	bl	8011040 <rt_schedule>
    return RT_EOK;
 80101d0:	2000      	movs	r0, #0
 80101d2:	e7fa      	b.n	80101ca <rt_mutex_release+0x88>

080101d4 <rt_event_create>:
 *
 * @return the created event, RT_NULL on error happen
 */
//事件创建函数
rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
 80101d4:	b510      	push	{r4, lr}
 80101d6:	460c      	mov	r4, r1
    rt_event_t event;

    RT_DEBUG_NOT_IN_INTERRUPT;

    //分配对象
    event = (rt_event_t)rt_object_allocate(RT_Object_Class_Event, name);
 80101d8:	4601      	mov	r1, r0
 80101da:	2004      	movs	r0, #4
 80101dc:	f7ff fbc3 	bl	800f966 <rt_object_allocate>
    if (event == RT_NULL)
 80101e0:	4603      	mov	r3, r0
 80101e2:	b130      	cbz	r0, 80101f2 <rt_event_create+0x1e>
        return event;

    //设置阻塞唤醒的模式
    event->parent.parent.flag = flag;
 80101e4:	7244      	strb	r4, [r0, #9]
    rt_list_init(&(ipc->suspend_thread));
 80101e6:	f100 0214 	add.w	r2, r0, #20
    l->next = l->prev = l;
 80101ea:	6182      	str	r2, [r0, #24]
 80101ec:	6142      	str	r2, [r0, #20]

    //初始化事件对象
    rt_ipc_object_init(&(event->parent));

    //事件集合清零
    event->set = 0;
 80101ee:	2200      	movs	r2, #0
 80101f0:	61c2      	str	r2, [r0, #28]

    return event;
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	bd10      	pop	{r4, pc}

080101f6 <rt_event_send>:
    //事件对象检查
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);

    if (set == 0)
 80101f6:	2900      	cmp	r1, #0
 80101f8:	d046      	beq.n	8010288 <rt_event_send+0x92>
{
 80101fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fc:	f100 0514 	add.w	r5, r0, #20
 8010200:	460e      	mov	r6, r1
 8010202:	4604      	mov	r4, r0

    need_schedule = RT_FALSE;

    //关中断
    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8010204:	f7fd fb1c 	bl	800d840 <rt_hw_interrupt_disable>
 8010208:	4607      	mov	r7, r0

    //设置事件
    /* set event */
    event->set |= set;
 801020a:	69e3      	ldr	r3, [r4, #28]
 801020c:	4333      	orrs	r3, r6
 801020e:	61e3      	str	r3, [r4, #28]
    return l->next == l;
 8010210:	6963      	ldr	r3, [r4, #20]
//			                                                           ((rt_uint32_t)(list2->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next->next)-0x14));

    if (!rt_list_isempty(&event->parent.suspend_thread))
 8010212:	429d      	cmp	r5, r3
 8010214:	d001      	beq.n	801021a <rt_event_send+0x24>
    need_schedule = RT_FALSE;
 8010216:	2600      	movs	r6, #0
 8010218:	e015      	b.n	8010246 <rt_event_send+0x50>
 801021a:	2600      	movs	r6, #0
        }
    }

    //开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 801021c:	4638      	mov	r0, r7
 801021e:	f7fd fb13 	bl	800d848 <rt_hw_interrupt_enable>



    //线程调度
    /* do a schedule */
    if (need_schedule == RT_TRUE)
 8010222:	bb6e      	cbnz	r6, 8010280 <rt_event_send+0x8a>
//	printf("9-4.调用rt_list_remove后就绪列表中的线程：%x->%x->%x->%x->%x\r\n",((rt_uint32_t)(list2)-0x14),
//			                                                           ((rt_uint32_t)(list2->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next->next)-0x14));
    return RT_EOK;
 8010224:	2000      	movs	r0, #0
}
 8010226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            n = n->next;
 8010228:	681e      	ldr	r6, [r3, #0]
                if (thread->event_info & RT_EVENT_FLAG_CLEAR)
 801022a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801022e:	f012 0f04 	tst.w	r2, #4
 8010232:	d004      	beq.n	801023e <rt_event_send+0x48>
                    event->set &= ~thread->event_set;
 8010234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010236:	69e3      	ldr	r3, [r4, #28]
 8010238:	ea23 0302 	bic.w	r3, r3, r2
 801023c:	61e3      	str	r3, [r4, #28]
                rt_thread_resume(thread);
 801023e:	f7ff f883 	bl	800f348 <rt_thread_resume>
 8010242:	4633      	mov	r3, r6
                need_schedule = RT_TRUE;
 8010244:	2601      	movs	r6, #1
        while (n != &(event->parent.suspend_thread))
 8010246:	42ab      	cmp	r3, r5
 8010248:	d0e8      	beq.n	801021c <rt_event_send+0x26>
            thread = rt_list_entry(n, struct rt_thread, tlist);
 801024a:	f1a3 0014 	sub.w	r0, r3, #20
            if (thread->event_info & RT_EVENT_FLAG_AND)
 801024e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010252:	f012 0f01 	tst.w	r2, #1
 8010256:	d005      	beq.n	8010264 <rt_event_send+0x6e>
                if ((thread->event_set & event->set) == thread->event_set)
 8010258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801025a:	69e1      	ldr	r1, [r4, #28]
 801025c:	438a      	bics	r2, r1
 801025e:	d0e3      	beq.n	8010228 <rt_event_send+0x32>
            n = n->next;
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	e7f0      	b.n	8010246 <rt_event_send+0x50>
            else if (thread->event_info & RT_EVENT_FLAG_OR)
 8010264:	f012 0f02 	tst.w	r2, #2
 8010268:	d008      	beq.n	801027c <rt_event_send+0x86>
                if (thread->event_set & event->set)
 801026a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801026c:	69e1      	ldr	r1, [r4, #28]
 801026e:	400a      	ands	r2, r1
 8010270:	d002      	beq.n	8010278 <rt_event_send+0x82>
                    thread->event_set = thread->event_set & event->set;
 8010272:	629a      	str	r2, [r3, #40]	; 0x28
            n = n->next;
 8010274:	681e      	ldr	r6, [r3, #0]
 8010276:	e7d8      	b.n	801022a <rt_event_send+0x34>
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	e7e4      	b.n	8010246 <rt_event_send+0x50>
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	e7e2      	b.n	8010246 <rt_event_send+0x50>
        rt_schedule();
 8010280:	f000 fede 	bl	8011040 <rt_schedule>
    return RT_EOK;
 8010284:	2000      	movs	r0, #0
 8010286:	e7ce      	b.n	8010226 <rt_event_send+0x30>
        return -RT_ERROR;
 8010288:	f04f 30ff 	mov.w	r0, #4294967295
}
 801028c:	4770      	bx	lr

0801028e <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   option,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
 801028e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	9301      	str	r3, [sp, #4]
    //检查参数
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);

    if (set == 0)
 8010296:	2900      	cmp	r1, #0
 8010298:	f000 808a 	beq.w	80103b0 <rt_event_recv+0x122>
 801029c:	4688      	mov	r8, r1
 801029e:	4615      	mov	r5, r2
 80102a0:	4606      	mov	r6, r0
    //初始化状态
    /* init status */
    status = -RT_ERROR;
    //获得当前线程
    /* get current thread */
    thread = rt_thread_self();
 80102a2:	f7fe ff55 	bl	800f150 <rt_thread_self>
 80102a6:	4604      	mov	r4, r0
    //重置线程错误码
    /* reset thread error */
    thread->error = RT_EOK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	6303      	str	r3, [r0, #48]	; 0x30

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(event->parent.parent)));

    //关中断
    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 80102ac:	f7fd fac8 	bl	800d840 <rt_hw_interrupt_disable>
 80102b0:	4607      	mov	r7, r0

    //检查事件位
    /* check event set */
    if (option & RT_EVENT_FLAG_AND)
 80102b2:	f015 0f01 	tst.w	r5, #1
 80102b6:	d00e      	beq.n	80102d6 <rt_event_recv+0x48>
    {
        if ((event->set & set) == set)
 80102b8:	69f3      	ldr	r3, [r6, #28]
 80102ba:	ea38 0303 	bics.w	r3, r8, r3
 80102be:	d011      	beq.n	80102e4 <rt_event_recv+0x56>
        //接收事件清除
        /* received event */
        if (option & RT_EVENT_FLAG_CLEAR)
            event->set &= ~set;
    }
    else if (timeout == 0)
 80102c0:	9b01      	ldr	r3, [sp, #4]
 80102c2:	b9f3      	cbnz	r3, 8010302 <rt_event_recv+0x74>
    {
        /* no waiting */
        thread->error = -RT_ETIMEOUT;
 80102c4:	f06f 0301 	mvn.w	r3, #1
 80102c8:	6323      	str	r3, [r4, #48]	; 0x30
        if (recved)
            *recved = thread->event_set;
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 80102ca:	f7fd fabd 	bl	800d848 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(event->parent.parent)));

    return thread->error;
 80102ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 80102d0:	b002      	add	sp, #8
 80102d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (option & RT_EVENT_FLAG_OR)
 80102d6:	f015 0f02 	tst.w	r5, #2
 80102da:	d0f1      	beq.n	80102c0 <rt_event_recv+0x32>
        if (event->set & set)
 80102dc:	69f3      	ldr	r3, [r6, #28]
 80102de:	ea13 0f08 	tst.w	r3, r8
 80102e2:	d0ed      	beq.n	80102c0 <rt_event_recv+0x32>
        if (recved)
 80102e4:	9b08      	ldr	r3, [sp, #32]
 80102e6:	b123      	cbz	r3, 80102f2 <rt_event_recv+0x64>
            *recved = (event->set & set);
 80102e8:	69f3      	ldr	r3, [r6, #28]
 80102ea:	ea03 0308 	and.w	r3, r3, r8
 80102ee:	9a08      	ldr	r2, [sp, #32]
 80102f0:	6013      	str	r3, [r2, #0]
        if (option & RT_EVENT_FLAG_CLEAR)
 80102f2:	f015 0f04 	tst.w	r5, #4
 80102f6:	d0e8      	beq.n	80102ca <rt_event_recv+0x3c>
            event->set &= ~set;
 80102f8:	69f3      	ldr	r3, [r6, #28]
 80102fa:	ea23 0308 	bic.w	r3, r3, r8
 80102fe:	61f3      	str	r3, [r6, #28]
 8010300:	e7e3      	b.n	80102ca <rt_event_recv+0x3c>
        thread->event_set  = set;
 8010302:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        thread->event_info = option;
 8010306:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        rt_ipc_list_suspend(&(event->parent.suspend_thread),
 801030a:	f106 0514 	add.w	r5, r6, #20
 801030e:	f896 8009 	ldrb.w	r8, [r6, #9]
    rt_thread_suspend(thread);
 8010312:	4620      	mov	r0, r4
 8010314:	f7fe ffca 	bl	800f2ac <rt_thread_suspend>
    switch (flag)
 8010318:	f1b8 0f00 	cmp.w	r8, #0
 801031c:	d016      	beq.n	801034c <rt_event_recv+0xbe>
 801031e:	f1b8 0f01 	cmp.w	r8, #1
 8010322:	d01c      	beq.n	801035e <rt_event_recv+0xd0>
        if (timeout > 0)
 8010324:	9b01      	ldr	r3, [sp, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	dc37      	bgt.n	801039a <rt_event_recv+0x10c>
        rt_hw_interrupt_enable(level);
 801032a:	4638      	mov	r0, r7
 801032c:	f7fd fa8c 	bl	800d848 <rt_hw_interrupt_enable>
        rt_schedule();
 8010330:	f000 fe86 	bl	8011040 <rt_schedule>
        if (thread->error != RT_EOK)
 8010334:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010336:	2800      	cmp	r0, #0
 8010338:	d1ca      	bne.n	80102d0 <rt_event_recv+0x42>
        level = rt_hw_interrupt_disable();
 801033a:	f7fd fa81 	bl	800d840 <rt_hw_interrupt_disable>
        if (recved)
 801033e:	9b08      	ldr	r3, [sp, #32]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0c2      	beq.n	80102ca <rt_event_recv+0x3c>
            *recved = thread->event_set;
 8010344:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010346:	9a08      	ldr	r2, [sp, #32]
 8010348:	6013      	str	r3, [r2, #0]
 801034a:	e7be      	b.n	80102ca <rt_event_recv+0x3c>
        rt_list_insert_before(list, &(thread->tlist));
 801034c:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 8010350:	686a      	ldr	r2, [r5, #4]
 8010352:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 8010354:	686a      	ldr	r2, [r5, #4]
 8010356:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 8010358:	606b      	str	r3, [r5, #4]
    n->next = l;
 801035a:	6165      	str	r5, [r4, #20]
 801035c:	e7e2      	b.n	8010324 <rt_event_recv+0x96>
            for (n = list->next; n != list; n = n->next)
 801035e:	6973      	ldr	r3, [r6, #20]
 8010360:	e000      	b.n	8010364 <rt_event_recv+0xd6>
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	429d      	cmp	r5, r3
 8010366:	d00d      	beq.n	8010384 <rt_event_recv+0xf6>
                if (thread->current_priority < sthread->current_priority)
 8010368:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 801036c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010370:	4291      	cmp	r1, r2
 8010372:	d2f6      	bcs.n	8010362 <rt_event_recv+0xd4>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 8010374:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 8010378:	6859      	ldr	r1, [r3, #4]
 801037a:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 801037c:	6859      	ldr	r1, [r3, #4]
 801037e:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 8010380:	605a      	str	r2, [r3, #4]
    n->next = l;
 8010382:	6163      	str	r3, [r4, #20]
            if (n == list)
 8010384:	429d      	cmp	r5, r3
 8010386:	d1cd      	bne.n	8010324 <rt_event_recv+0x96>
                rt_list_insert_before(list, &(thread->tlist));
 8010388:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 801038c:	686a      	ldr	r2, [r5, #4]
 801038e:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 8010390:	686a      	ldr	r2, [r5, #4]
 8010392:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 8010394:	606b      	str	r3, [r5, #4]
    n->next = l;
 8010396:	6165      	str	r5, [r4, #20]
 8010398:	e7c4      	b.n	8010324 <rt_event_recv+0x96>
            rt_timer_control(&(thread->thread_timer),
 801039a:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 801039e:	aa01      	add	r2, sp, #4
 80103a0:	2100      	movs	r1, #0
 80103a2:	4628      	mov	r0, r5
 80103a4:	f7ff f906 	bl	800f5b4 <rt_timer_control>
            rt_timer_start(&(thread->thread_timer));
 80103a8:	4628      	mov	r0, r5
 80103aa:	f7ff f87f 	bl	800f4ac <rt_timer_start>
 80103ae:	e7bc      	b.n	801032a <rt_event_recv+0x9c>
        return -RT_ERROR;
 80103b0:	f04f 30ff 	mov.w	r0, #4294967295
 80103b4:	e78c      	b.n	80102d0 <rt_event_recv+0x42>

080103b6 <rt_mq_delete>:
 * @param mq the message queue object
 *
 * @return the error code
 */
rt_err_t rt_mq_delete(rt_mq_t mq)
{
 80103b6:	b570      	push	{r4, r5, r6, lr}
 80103b8:	4606      	mov	r6, r0
    RT_ASSERT(mq != RT_NULL);
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
    RT_ASSERT(rt_object_is_systemobject(&mq->parent.parent) == RT_FALSE);

    /* resume all suspended thread */
    rt_ipc_list_resume_all(&(mq->parent.suspend_thread));
 80103ba:	f100 0414 	add.w	r4, r0, #20
 80103be:	e00c      	b.n	80103da <rt_mq_delete+0x24>
        temp = rt_hw_interrupt_disable();
 80103c0:	f7fd fa3e 	bl	800d840 <rt_hw_interrupt_disable>
 80103c4:	4605      	mov	r5, r0
        thread = rt_list_entry(list->next, struct rt_thread, tlist);
 80103c6:	6820      	ldr	r0, [r4, #0]
        thread->error = -RT_ERROR;
 80103c8:	f04f 33ff 	mov.w	r3, #4294967295
 80103cc:	61c3      	str	r3, [r0, #28]
        rt_thread_resume(thread);
 80103ce:	3814      	subs	r0, #20
 80103d0:	f7fe ffba 	bl	800f348 <rt_thread_resume>
        rt_hw_interrupt_enable(temp);
 80103d4:	4628      	mov	r0, r5
 80103d6:	f7fd fa37 	bl	800d848 <rt_hw_interrupt_enable>
    return l->next == l;
 80103da:	6823      	ldr	r3, [r4, #0]
    while (!rt_list_isempty(list))
 80103dc:	429c      	cmp	r4, r3
 80103de:	d1ef      	bne.n	80103c0 <rt_mq_delete+0xa>

    /* free message queue pool */
    RT_KERNEL_FREE(mq->msg_pool);
 80103e0:	69f0      	ldr	r0, [r6, #28]
 80103e2:	f001 fc79 	bl	8011cd8 <rt_free>

    /* delete message queue object */
    rt_object_delete(&(mq->parent.parent));
 80103e6:	4630      	mov	r0, r6
 80103e8:	f7ff fae5 	bl	800f9b6 <rt_object_delete>

    return RT_EOK;
}
 80103ec:	2000      	movs	r0, #0
 80103ee:	bd70      	pop	{r4, r5, r6, pc}

080103f0 <rt_mq_create>:
{
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	460d      	mov	r5, r1
 80103f4:	4616      	mov	r6, r2
 80103f6:	461f      	mov	r7, r3
    mq = (rt_mq_t)rt_object_allocate(RT_Object_Class_MessageQueue, name);
 80103f8:	4601      	mov	r1, r0
 80103fa:	2006      	movs	r0, #6
 80103fc:	f7ff fab3 	bl	800f966 <rt_object_allocate>
    if (mq == RT_NULL)
 8010400:	4604      	mov	r4, r0
 8010402:	b360      	cbz	r0, 801045e <rt_mq_create+0x6e>
    mq->parent.parent.flag = flag;
 8010404:	7247      	strb	r7, [r0, #9]
    rt_list_init(&(ipc->suspend_thread));
 8010406:	f100 0314 	add.w	r3, r0, #20
    l->next = l->prev = l;
 801040a:	6183      	str	r3, [r0, #24]
 801040c:	6143      	str	r3, [r0, #20]
    mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
 801040e:	1ceb      	adds	r3, r5, #3
 8010410:	b29b      	uxth	r3, r3
 8010412:	f023 0303 	bic.w	r3, r3, #3
 8010416:	b29b      	uxth	r3, r3
 8010418:	8403      	strh	r3, [r0, #32]
    mq->max_msgs = max_msgs;
 801041a:	b2b0      	uxth	r0, r6
 801041c:	8460      	strh	r0, [r4, #34]	; 0x22
    mq->msg_pool = RT_KERNEL_MALLOC((mq->msg_size + sizeof(struct rt_mq_message)) * mq->max_msgs);
 801041e:	3304      	adds	r3, #4
 8010420:	fb00 f003 	mul.w	r0, r0, r3
 8010424:	f001 fbca 	bl	8011bbc <rt_malloc>
 8010428:	61e0      	str	r0, [r4, #28]
    if (mq->msg_pool == RT_NULL)
 801042a:	b120      	cbz	r0, 8010436 <rt_mq_create+0x46>
    mq->msg_queue_head = RT_NULL;
 801042c:	2200      	movs	r2, #0
 801042e:	62a2      	str	r2, [r4, #40]	; 0x28
    mq->msg_queue_tail = RT_NULL;
 8010430:	62e2      	str	r2, [r4, #44]	; 0x2c
    mq->msg_queue_free = RT_NULL;
 8010432:	6322      	str	r2, [r4, #48]	; 0x30
    for (temp = 0; temp < mq->max_msgs; temp ++)
 8010434:	e00e      	b.n	8010454 <rt_mq_create+0x64>
        rt_mq_delete(mq);
 8010436:	4620      	mov	r0, r4
 8010438:	f7ff ffbd 	bl	80103b6 <rt_mq_delete>
        return RT_NULL;
 801043c:	2400      	movs	r4, #0
 801043e:	e00e      	b.n	801045e <rt_mq_create+0x6e>
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 8010440:	69e1      	ldr	r1, [r4, #28]
                                        temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 8010442:	8c23      	ldrh	r3, [r4, #32]
 8010444:	3304      	adds	r3, #4
 8010446:	fb03 f302 	mul.w	r3, r3, r2
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 801044a:	18c8      	adds	r0, r1, r3
        head->next = mq->msg_queue_free;
 801044c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801044e:	50cd      	str	r5, [r1, r3]
        mq->msg_queue_free = head;
 8010450:	6320      	str	r0, [r4, #48]	; 0x30
    for (temp = 0; temp < mq->max_msgs; temp ++)
 8010452:	3201      	adds	r2, #1
 8010454:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8010456:	4293      	cmp	r3, r2
 8010458:	dcf2      	bgt.n	8010440 <rt_mq_create+0x50>
    mq->entry = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	84a3      	strh	r3, [r4, #36]	; 0x24
}
 801045e:	4620      	mov	r0, r4
 8010460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010462 <rt_mq_send>:
//         buffer：需要发送的消息的缓冲区
//         size：需要发送的消息的大小
//功能概要： 将消息放到消息队列中
//=========================================================================
rt_err_t rt_mq_send(rt_mq_t mq, void *buffer, rt_size_t size)
{
 8010462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    RT_ASSERT(buffer != RT_NULL); //发送的消息是否为空
    RT_ASSERT(size != 0); //发送的消息大小是否为0

    //（3）判断需要发送的消息的大小
    /* greater than one message size */
    if (size > mq->msg_size)
 8010464:	8c03      	ldrh	r3, [r0, #32]
 8010466:	4293      	cmp	r3, r2
 8010468:	d339      	bcc.n	80104de <rt_mq_send+0x7c>
 801046a:	4616      	mov	r6, r2
 801046c:	460f      	mov	r7, r1
 801046e:	4604      	mov	r4, r0

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));

    //关中断
    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010470:	f7fd f9e6 	bl	800d840 <rt_hw_interrupt_disable>

    //（4）获取一个空闲链表，必须有一个空闲链表项
    /* get a free list, there must be an empty item */
    msg = (struct rt_mq_message *)mq->msg_queue_free;
 8010474:	6b25      	ldr	r5, [r4, #48]	; 0x30
    //（4.1）如果没有空闲链表
    /* message queue is full */
    if (msg == RT_NULL)
 8010476:	b335      	cbz	r5, 80104c6 <rt_mq_send+0x64>
    }


    //若空闲列表不为空，移动空闲链表指针
    /* move free list pointer */
    mq->msg_queue_free = msg->next;
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	6323      	str	r3, [r4, #48]	; 0x30

    //开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 801047c:	f7fd f9e4 	bl	800d848 <rt_hw_interrupt_enable>


    /* the msg is the new tailer of list, the next shall be NULL */
    msg->next = RT_NULL;  //这个消息是新链表的尾部，其下一个指针为RT_NULL
 8010480:	4628      	mov	r0, r5
 8010482:	2300      	movs	r3, #0
 8010484:	f840 3b04 	str.w	r3, [r0], #4

    //（4.3）复制消息内容
    /* copy buffer */
    rt_memcpy(msg + 1, buffer, size); //拷贝消息至msg + 1地址处
 8010488:	4632      	mov	r2, r6
 801048a:	4639      	mov	r1, r7
 801048c:	f000 f9b5 	bl	80107fa <rt_memcpy>

	

    //关总中断
    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010490:	f7fd f9d6 	bl	800d840 <rt_hw_interrupt_disable>
 8010494:	4606      	mov	r6, r0
    //（4.4）将消息放入消息队列
    /* link msg to message queue */
    if (mq->msg_queue_tail != RT_NULL) //若已经存在消息队列尾部链表
 8010496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010498:	b103      	cbz	r3, 801049c <rt_mq_send+0x3a>
    {
        /* if the tail exists, */
    	//尾部的next指针指向该消息
        ((struct rt_mq_message *)mq->msg_queue_tail)->next = msg;
 801049a:	601d      	str	r5, [r3, #0]
    }

    //设置新的消息队列尾部链表
    /* set new tail */
    mq->msg_queue_tail = msg;
 801049c:	62e5      	str	r5, [r4, #44]	; 0x2c
    //如果头部链表是空的，则设置头部链表指针
    /* if the head is empty, set head */
    if (mq->msg_queue_head == RT_NULL)
 801049e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80104a0:	b1b3      	cbz	r3, 80104d0 <rt_mq_send+0x6e>
        mq->msg_queue_head = msg;

    //（4.5）消息个数加一
    /* increase message entry */
    mq->entry ++;
 80104a2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80104a4:	3301      	adds	r3, #1
 80104a6:	84a3      	strh	r3, [r4, #36]	; 0x24

    

    //（5）若有线程因等待消息而阻塞，则将该线性从阻塞队列中恢复
    /* resume suspended thread */
    if (!rt_list_isempty(&mq->parent.suspend_thread))
 80104a8:	f104 0314 	add.w	r3, r4, #20
    return l->next == l;
 80104ac:	6960      	ldr	r0, [r4, #20]
 80104ae:	4283      	cmp	r3, r0
 80104b0:	d010      	beq.n	80104d4 <rt_mq_send+0x72>
    rt_thread_resume(thread);
 80104b2:	3814      	subs	r0, #20
 80104b4:	f7fe ff48 	bl	800f348 <rt_thread_resume>
    {
        rt_ipc_list_resume(&(mq->parent.suspend_thread));

        /* enable interrupt */
        rt_hw_interrupt_enable(temp); //开中断
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7fd f9c5 	bl	800d848 <rt_hw_interrupt_enable>

        rt_schedule();//发起一次线程调度
 80104be:	f000 fdbf 	bl	8011040 <rt_schedule>

        return RT_EOK;
 80104c2:	2000      	movs	r0, #0
//    开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);

    return RT_EOK;
}
 80104c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rt_hw_interrupt_enable(temp);
 80104c6:	f7fd f9bf 	bl	800d848 <rt_hw_interrupt_enable>
        return -RT_EFULL;
 80104ca:	f06f 0002 	mvn.w	r0, #2
 80104ce:	e7f9      	b.n	80104c4 <rt_mq_send+0x62>
        mq->msg_queue_head = msg;
 80104d0:	62a5      	str	r5, [r4, #40]	; 0x28
 80104d2:	e7e6      	b.n	80104a2 <rt_mq_send+0x40>
    rt_hw_interrupt_enable(temp);
 80104d4:	4630      	mov	r0, r6
 80104d6:	f7fd f9b7 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 80104da:	2000      	movs	r0, #0
 80104dc:	e7f2      	b.n	80104c4 <rt_mq_send+0x62>
        return -RT_ERROR;
 80104de:	f04f 30ff 	mov.w	r0, #4294967295
 80104e2:	e7ef      	b.n	80104c4 <rt_mq_send+0x62>

080104e4 <rt_mq_recv>:
//=========================================================================
rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
 80104e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	b083      	sub	sp, #12
 80104ea:	4606      	mov	r6, r0
 80104ec:	4689      	mov	r9, r1
 80104ee:	4692      	mov	sl, r2
 80104f0:	9301      	str	r3, [sp, #4]
    //初始化延时滴答
    /* initialize delta tick */
    tick_delta = 0;
    //获取当前运行的线程
    /* get current thread */
    thread = rt_thread_self();
 80104f2:	f7fe fe2d 	bl	800f150 <rt_thread_self>
 80104f6:	4604      	mov	r4, r0
    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mq->parent.parent)));

    //关中断
    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 80104f8:	f7fd f9a2 	bl	800d840 <rt_hw_interrupt_disable>
 80104fc:	4607      	mov	r7, r0

    //消息数为0
    /* for non-blocking call */
    if (mq->entry == 0 && timeout == 0)
 80104fe:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8010500:	2b00      	cmp	r3, #0
 8010502:	d177      	bne.n	80105f4 <rt_mq_recv+0x110>
 8010504:	9b01      	ldr	r3, [sp, #4]
 8010506:	b113      	cbz	r3, 801050e <rt_mq_recv+0x2a>
 8010508:	f04f 0800 	mov.w	r8, #0
 801050c:	e024      	b.n	8010558 <rt_mq_recv+0x74>
    {
        rt_hw_interrupt_enable(temp);
 801050e:	f7fd f99b 	bl	800d848 <rt_hw_interrupt_enable>

        return -RT_ETIMEOUT;
 8010512:	f06f 0001 	mvn.w	r0, #1
 8010516:	e08b      	b.n	8010630 <rt_mq_recv+0x14c>
        //不等待 返回超时
        /* no waiting, return timeout */
        if (timeout == 0)
        {
            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
 8010518:	4638      	mov	r0, r7
 801051a:	f7fd f995 	bl	800d848 <rt_hw_interrupt_enable>

            thread->error = -RT_ETIMEOUT;
 801051e:	f06f 0001 	mvn.w	r0, #1
 8010522:	6320      	str	r0, [r4, #48]	; 0x30

            return -RT_ETIMEOUT;
 8010524:	e084      	b.n	8010630 <rt_mq_recv+0x14c>
        rt_list_insert_before(list, &(thread->tlist));
 8010526:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 801052a:	686a      	ldr	r2, [r5, #4]
 801052c:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 801052e:	686a      	ldr	r2, [r5, #4]
 8010530:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 8010532:	606b      	str	r3, [r5, #4]
    n->next = l;
 8010534:	6165      	str	r5, [r4, #20]
                            thread,
                            mq->parent.parent.flag);

        //有等待时间 启动线程计时器
        /* has waiting time, start thread timer */
        if (timeout > 0)
 8010536:	9b01      	ldr	r3, [sp, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dc40      	bgt.n	80105be <rt_mq_recv+0xda>
            rt_timer_start(&(thread->thread_timer));
        }

        //开中断
        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
 801053c:	4638      	mov	r0, r7
 801053e:	f7fd f983 	bl	800d848 <rt_hw_interrupt_enable>

        //线程调度
        /* re-schedule */
        rt_schedule();
 8010542:	f000 fd7d 	bl	8011040 <rt_schedule>

        /* recv message */
        if (thread->error != RT_EOK)
 8010546:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010548:	2800      	cmp	r0, #0
 801054a:	d171      	bne.n	8010630 <rt_mq_recv+0x14c>
            /* return error */
            return thread->error;
        }

        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
 801054c:	f7fd f978 	bl	800d840 <rt_hw_interrupt_disable>
 8010550:	4607      	mov	r7, r0

        /* if it's not waiting forever and then re-calculate timeout tick */
        if (timeout > 0)
 8010552:	9b01      	ldr	r3, [sp, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	dc40      	bgt.n	80105da <rt_mq_recv+0xf6>
    while (mq->entry == 0)
 8010558:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 801055a:	2b00      	cmp	r3, #0
 801055c:	d14d      	bne.n	80105fa <rt_mq_recv+0x116>
        thread->error = RT_EOK;
 801055e:	2300      	movs	r3, #0
 8010560:	6323      	str	r3, [r4, #48]	; 0x30
        if (timeout == 0)
 8010562:	9b01      	ldr	r3, [sp, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d0d7      	beq.n	8010518 <rt_mq_recv+0x34>
        rt_ipc_list_suspend(&(mq->parent.suspend_thread),
 8010568:	f106 0514 	add.w	r5, r6, #20
 801056c:	f896 b009 	ldrb.w	fp, [r6, #9]
    rt_thread_suspend(thread);
 8010570:	4620      	mov	r0, r4
 8010572:	f7fe fe9b 	bl	800f2ac <rt_thread_suspend>
    switch (flag)
 8010576:	f1bb 0f00 	cmp.w	fp, #0
 801057a:	d0d4      	beq.n	8010526 <rt_mq_recv+0x42>
 801057c:	f1bb 0f01 	cmp.w	fp, #1
 8010580:	d1d9      	bne.n	8010536 <rt_mq_recv+0x52>
            for (n = list->next; n != list; n = n->next)
 8010582:	6973      	ldr	r3, [r6, #20]
 8010584:	429d      	cmp	r5, r3
 8010586:	d00f      	beq.n	80105a8 <rt_mq_recv+0xc4>
                if (thread->current_priority < sthread->current_priority)
 8010588:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 801058c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010590:	4291      	cmp	r1, r2
 8010592:	d301      	bcc.n	8010598 <rt_mq_recv+0xb4>
            for (n = list->next; n != list; n = n->next)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	e7f5      	b.n	8010584 <rt_mq_recv+0xa0>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 8010598:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 801059c:	6859      	ldr	r1, [r3, #4]
 801059e:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 80105a0:	6859      	ldr	r1, [r3, #4]
 80105a2:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 80105a4:	605a      	str	r2, [r3, #4]
    n->next = l;
 80105a6:	6163      	str	r3, [r4, #20]
            if (n == list)
 80105a8:	429d      	cmp	r5, r3
 80105aa:	d1c4      	bne.n	8010536 <rt_mq_recv+0x52>
                rt_list_insert_before(list, &(thread->tlist));
 80105ac:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 80105b0:	686a      	ldr	r2, [r5, #4]
 80105b2:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 80105b4:	686a      	ldr	r2, [r5, #4]
 80105b6:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 80105b8:	606b      	str	r3, [r5, #4]
    n->next = l;
 80105ba:	6165      	str	r5, [r4, #20]
 80105bc:	e7bb      	b.n	8010536 <rt_mq_recv+0x52>
            tick_delta = rt_tick_get();
 80105be:	f000 fce5 	bl	8010f8c <rt_tick_get>
 80105c2:	4680      	mov	r8, r0
            rt_timer_control(&(thread->thread_timer),
 80105c4:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 80105c8:	aa01      	add	r2, sp, #4
 80105ca:	2100      	movs	r1, #0
 80105cc:	4628      	mov	r0, r5
 80105ce:	f7fe fff1 	bl	800f5b4 <rt_timer_control>
            rt_timer_start(&(thread->thread_timer));
 80105d2:	4628      	mov	r0, r5
 80105d4:	f7fe ff6a 	bl	800f4ac <rt_timer_start>
 80105d8:	e7b0      	b.n	801053c <rt_mq_recv+0x58>
        {
            tick_delta = rt_tick_get() - tick_delta;
 80105da:	f000 fcd7 	bl	8010f8c <rt_tick_get>
 80105de:	eba0 0808 	sub.w	r8, r0, r8
            timeout -= tick_delta;
 80105e2:	9b01      	ldr	r3, [sp, #4]
 80105e4:	eba3 0308 	sub.w	r3, r3, r8
 80105e8:	9301      	str	r3, [sp, #4]
            if (timeout < 0)
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	dab4      	bge.n	8010558 <rt_mq_recv+0x74>
                timeout = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	e7b1      	b.n	8010558 <rt_mq_recv+0x74>
 80105f4:	f04f 0800 	mov.w	r8, #0
 80105f8:	e7ae      	b.n	8010558 <rt_mq_recv+0x74>

//    printf("2-3.从等待队列中移除接收线程\n");
//    printf("2-4.接收线程开始接收消息\n");
    //获取消息队列的头指针
    /* get message from queue */
    msg = (struct rt_mq_message *)mq->msg_queue_head;
 80105fa:	6ab4      	ldr	r4, [r6, #40]	; 0x28

    //移动消息队列的头指针
    /* move message queue head */
    mq->msg_queue_head = msg->next;
 80105fc:	6822      	ldr	r2, [r4, #0]
 80105fe:	62b2      	str	r2, [r6, #40]	; 0x28
    /* reach queue tail, set to NULL */  //若到达消息队列尾部
    if (mq->msg_queue_tail == msg)
 8010600:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8010602:	42a2      	cmp	r2, r4
 8010604:	d017      	beq.n	8010636 <rt_mq_recv+0x152>
        mq->msg_queue_tail = RT_NULL;

    //消息数减一
    /* decrease message entry */
    mq->entry --;
 8010606:	3b01      	subs	r3, #1
 8010608:	84b3      	strh	r3, [r6, #36]	; 0x24

    //开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 801060a:	4638      	mov	r0, r7
 801060c:	f7fd f91c 	bl	800d848 <rt_hw_interrupt_enable>

    //将消息内容放入指定的存储地址
    /* copy message */
    rt_memcpy(buffer, msg + 1, size > mq->msg_size ? mq->msg_size : size);
 8010610:	8c32      	ldrh	r2, [r6, #32]
 8010612:	4552      	cmp	r2, sl
 8010614:	bf28      	it	cs
 8010616:	4652      	movcs	r2, sl
 8010618:	1d21      	adds	r1, r4, #4
 801061a:	4648      	mov	r0, r9
 801061c:	f000 f8ed 	bl	80107fa <rt_memcpy>


    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010620:	f7fd f90e 	bl	800d840 <rt_hw_interrupt_disable>

    //消息放入空闲列表
    /* put message to free list */
    msg->next = (struct rt_mq_message *)mq->msg_queue_free;
 8010624:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8010626:	6023      	str	r3, [r4, #0]
    mq->msg_queue_free = msg;
 8010628:	6334      	str	r4, [r6, #48]	; 0x30

   
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 801062a:	f7fd f90d 	bl	800d848 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));

    return RT_EOK;
 801062e:	2000      	movs	r0, #0
}
 8010630:	b003      	add	sp, #12
 8010632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mq->msg_queue_tail = RT_NULL;
 8010636:	2200      	movs	r2, #0
 8010638:	62f2      	str	r2, [r6, #44]	; 0x2c
 801063a:	e7e4      	b.n	8010606 <rt_mq_recv+0x122>

0801063c <print_number>:
#endif
                          int   base,
                          int   s,
                          int   type)
#endif
{
 801063c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010640:	b084      	sub	sp, #16
 8010642:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010644:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    register int i;
    register int size;

    size = s;

    digits = (type & LARGE) ? large_digits : small_digits;
 8010646:	f017 0f40 	tst.w	r7, #64	; 0x40
 801064a:	d019      	beq.n	8010680 <print_number+0x44>
 801064c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80107a0 <print_number+0x164>
    if (type & LEFT)
 8010650:	f017 0f10 	tst.w	r7, #16
 8010654:	d001      	beq.n	801065a <print_number+0x1e>
        type &= ~ZEROPAD;
 8010656:	f027 0701 	bic.w	r7, r7, #1

    c = (type & ZEROPAD) ? '0' : ' ';
 801065a:	f017 0f01 	tst.w	r7, #1
 801065e:	d012      	beq.n	8010686 <print_number+0x4a>
 8010660:	f04f 0c30 	mov.w	ip, #48	; 0x30

    /* get sign */
    sign = 0;
    if (type & SIGN)
 8010664:	f017 0f02 	tst.w	r7, #2
 8010668:	d014      	beq.n	8010694 <print_number+0x58>
    {
        if (num < 0)
 801066a:	2a00      	cmp	r2, #0
 801066c:	db0e      	blt.n	801068c <print_number+0x50>
        {
            sign = '-';
            num = -num;
        }
        else if (type & PLUS)
 801066e:	f017 0f04 	tst.w	r7, #4
 8010672:	d126      	bne.n	80106c2 <print_number+0x86>
            sign = '+';
        else if (type & SPACE)
 8010674:	f017 0f08 	tst.w	r7, #8
 8010678:	d126      	bne.n	80106c8 <print_number+0x8c>
    sign = 0;
 801067a:	f04f 0e00 	mov.w	lr, #0
 801067e:	e00b      	b.n	8010698 <print_number+0x5c>
    digits = (type & LARGE) ? large_digits : small_digits;
 8010680:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80107a4 <print_number+0x168>
 8010684:	e7e4      	b.n	8010650 <print_number+0x14>
    c = (type & ZEROPAD) ? '0' : ' ';
 8010686:	f04f 0c20 	mov.w	ip, #32
 801068a:	e7eb      	b.n	8010664 <print_number+0x28>
            num = -num;
 801068c:	4252      	negs	r2, r2
            sign = '-';
 801068e:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8010692:	e001      	b.n	8010698 <print_number+0x5c>
    sign = 0;
 8010694:	f04f 0e00 	mov.w	lr, #0
            size--;
    }
#endif

    i = 0;
    if (num == 0)
 8010698:	bba2      	cbnz	r2, 8010704 <print_number+0xc8>
        tmp[i++] = '0';
 801069a:	2330      	movs	r3, #48	; 0x30
 801069c:	f88d 3000 	strb.w	r3, [sp]
 80106a0:	2401      	movs	r4, #1
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
 80106a2:	42b4      	cmp	r4, r6
 80106a4:	dc30      	bgt.n	8010708 <print_number+0xcc>
 80106a6:	4635      	mov	r5, r6
        precision = i;
    size -= precision;
 80106a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106aa:	1b52      	subs	r2, r2, r5
#else
    size -= i;
#endif

    if (!(type & (ZEROPAD | LEFT)))
 80106ac:	f017 0f11 	tst.w	r7, #17
 80106b0:	d136      	bne.n	8010720 <print_number+0xe4>
    {
        if ((sign) && (size > 0))
 80106b2:	f1be 0f00 	cmp.w	lr, #0
 80106b6:	d002      	beq.n	80106be <print_number+0x82>
 80106b8:	2a00      	cmp	r2, #0
 80106ba:	dd00      	ble.n	80106be <print_number+0x82>
            size--;
 80106bc:	3a01      	subs	r2, #1
        precision = i;
 80106be:	4613      	mov	r3, r2
 80106c0:	e026      	b.n	8010710 <print_number+0xd4>
            sign = '+';
 80106c2:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 80106c6:	e7e7      	b.n	8010698 <print_number+0x5c>
            sign = ' ';
 80106c8:	f04f 0e20 	mov.w	lr, #32
 80106cc:	e7e4      	b.n	8010698 <print_number+0x5c>
        res = (int)(((unsigned long)*n) % 10U);
 80106ce:	4d33      	ldr	r5, [pc, #204]	; (801079c <print_number+0x160>)
 80106d0:	fba5 9502 	umull	r9, r5, r5, r2
 80106d4:	08ed      	lsrs	r5, r5, #3
 80106d6:	46aa      	mov	sl, r5
 80106d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80106dc:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80106e0:	eba2 0909 	sub.w	r9, r2, r9
        *n = (long)(((unsigned long)*n) / 10U);
 80106e4:	4652      	mov	r2, sl
            tmp[i++] = digits[divide(&num, base)];
 80106e6:	f818 9009 	ldrb.w	r9, [r8, r9]
 80106ea:	ad04      	add	r5, sp, #16
 80106ec:	4425      	add	r5, r4
 80106ee:	f805 9c10 	strb.w	r9, [r5, #-16]
 80106f2:	3401      	adds	r4, #1
        while (num != 0)
 80106f4:	2a00      	cmp	r2, #0
 80106f6:	d0d4      	beq.n	80106a2 <print_number+0x66>
    if (base == 10)
 80106f8:	2b0a      	cmp	r3, #10
 80106fa:	d0e8      	beq.n	80106ce <print_number+0x92>
        res = (int)(((unsigned long)*n) % 16U);
 80106fc:	f002 090f 	and.w	r9, r2, #15
        *n = (long)(((unsigned long)*n) / 16U);
 8010700:	0912      	lsrs	r2, r2, #4
 8010702:	e7f0      	b.n	80106e6 <print_number+0xaa>
    i = 0;
 8010704:	2400      	movs	r4, #0
 8010706:	e7f5      	b.n	80106f4 <print_number+0xb8>
        precision = i;
 8010708:	4625      	mov	r5, r4
 801070a:	e7cd      	b.n	80106a8 <print_number+0x6c>

        while (size-- > 0)
        {
            if (buf < end)
                *buf = ' ';
            ++ buf;
 801070c:	3001      	adds	r0, #1
        while (size-- > 0)
 801070e:	4613      	mov	r3, r2
 8010710:	1e5a      	subs	r2, r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	dd04      	ble.n	8010720 <print_number+0xe4>
            if (buf < end)
 8010716:	4288      	cmp	r0, r1
 8010718:	d2f8      	bcs.n	801070c <print_number+0xd0>
                *buf = ' ';
 801071a:	2320      	movs	r3, #32
 801071c:	7003      	strb	r3, [r0, #0]
 801071e:	e7f5      	b.n	801070c <print_number+0xd0>
        }
    }

    if (sign)
 8010720:	f1be 0f00 	cmp.w	lr, #0
 8010724:	d005      	beq.n	8010732 <print_number+0xf6>
    {
        if (buf < end)
 8010726:	4288      	cmp	r0, r1
 8010728:	d201      	bcs.n	801072e <print_number+0xf2>
        {
            *buf = sign;
 801072a:	f880 e000 	strb.w	lr, [r0]
        }
        -- size;
 801072e:	3a01      	subs	r2, #1
        ++ buf;
 8010730:	3001      	adds	r0, #1
        }
    }
#endif

    /* no align to the left */
    if (!(type & LEFT))
 8010732:	f017 0f10 	tst.w	r7, #16
 8010736:	d003      	beq.n	8010740 <print_number+0x104>
 8010738:	4613      	mov	r3, r2
 801073a:	e00b      	b.n	8010754 <print_number+0x118>
    {
        while (size-- > 0)
        {
            if (buf < end)
                *buf = c;
            ++ buf;
 801073c:	3001      	adds	r0, #1
        while (size-- > 0)
 801073e:	461a      	mov	r2, r3
 8010740:	1e53      	subs	r3, r2, #1
 8010742:	2a00      	cmp	r2, #0
 8010744:	dd06      	ble.n	8010754 <print_number+0x118>
            if (buf < end)
 8010746:	4288      	cmp	r0, r1
 8010748:	d2f8      	bcs.n	801073c <print_number+0x100>
                *buf = c;
 801074a:	f880 c000 	strb.w	ip, [r0]
 801074e:	e7f5      	b.n	801073c <print_number+0x100>
#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
    {
        if (buf < end)
            *buf = '0';
        ++ buf;
 8010750:	3001      	adds	r0, #1
    while (i < precision--)
 8010752:	4615      	mov	r5, r2
 8010754:	1e6a      	subs	r2, r5, #1
 8010756:	42a5      	cmp	r5, r4
 8010758:	dd06      	ble.n	8010768 <print_number+0x12c>
        if (buf < end)
 801075a:	4288      	cmp	r0, r1
 801075c:	d2f8      	bcs.n	8010750 <print_number+0x114>
            *buf = '0';
 801075e:	2530      	movs	r5, #48	; 0x30
 8010760:	7005      	strb	r5, [r0, #0]
 8010762:	e7f5      	b.n	8010750 <print_number+0x114>
    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
    {
        if (buf < end)
            *buf = tmp[i];
        ++ buf;
 8010764:	3001      	adds	r0, #1
    while (i-- > 0 && (precision_bak != 0))
 8010766:	4614      	mov	r4, r2
 8010768:	1e62      	subs	r2, r4, #1
 801076a:	2c00      	cmp	r4, #0
 801076c:	dd0a      	ble.n	8010784 <print_number+0x148>
 801076e:	b14e      	cbz	r6, 8010784 <print_number+0x148>
        if (buf < end)
 8010770:	4288      	cmp	r0, r1
 8010772:	d2f7      	bcs.n	8010764 <print_number+0x128>
            *buf = tmp[i];
 8010774:	ac04      	add	r4, sp, #16
 8010776:	4414      	add	r4, r2
 8010778:	f814 4c10 	ldrb.w	r4, [r4, #-16]
 801077c:	7004      	strb	r4, [r0, #0]
 801077e:	e7f1      	b.n	8010764 <print_number+0x128>

    while (size-- > 0)
    {
        if (buf < end)
            *buf = ' ';
        ++ buf;
 8010780:	3001      	adds	r0, #1
    while (size-- > 0)
 8010782:	4613      	mov	r3, r2
 8010784:	1e5a      	subs	r2, r3, #1
 8010786:	2b00      	cmp	r3, #0
 8010788:	dd04      	ble.n	8010794 <print_number+0x158>
        if (buf < end)
 801078a:	4288      	cmp	r0, r1
 801078c:	d2f8      	bcs.n	8010780 <print_number+0x144>
            *buf = ' ';
 801078e:	2320      	movs	r3, #32
 8010790:	7003      	strb	r3, [r0, #0]
 8010792:	e7f5      	b.n	8010780 <print_number+0x144>
    }

    return buf;
}
 8010794:	b004      	add	sp, #16
 8010796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801079a:	bf00      	nop
 801079c:	cccccccd 	.word	0xcccccccd
 80107a0:	080123b4 	.word	0x080123b4
 80107a4:	080123d0 	.word	0x080123d0

080107a8 <rt_memset>:
{
 80107a8:	b410      	push	{r4}
    if (!TOO_SMALL(count) && !UNALIGNED(s))
 80107aa:	2a03      	cmp	r2, #3
 80107ac:	d921      	bls.n	80107f2 <rt_memset+0x4a>
 80107ae:	b2cc      	uxtb	r4, r1
 80107b0:	f010 0f03 	tst.w	r0, #3
 80107b4:	d11f      	bne.n	80107f6 <rt_memset+0x4e>
            buffer = (d << 8) | d;
 80107b6:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
            buffer |= (buffer << 16);
 80107ba:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
        aligned_addr = (unsigned long *)s;
 80107be:	4603      	mov	r3, r0
 80107c0:	e005      	b.n	80107ce <rt_memset+0x26>
            *aligned_addr++ = buffer;
 80107c2:	601c      	str	r4, [r3, #0]
            *aligned_addr++ = buffer;
 80107c4:	605c      	str	r4, [r3, #4]
            *aligned_addr++ = buffer;
 80107c6:	609c      	str	r4, [r3, #8]
            *aligned_addr++ = buffer;
 80107c8:	60dc      	str	r4, [r3, #12]
            count -= 4 * LBLOCKSIZE;
 80107ca:	3a10      	subs	r2, #16
            *aligned_addr++ = buffer;
 80107cc:	3310      	adds	r3, #16
        while (count >= LBLOCKSIZE * 4)
 80107ce:	2a0f      	cmp	r2, #15
 80107d0:	d8f7      	bhi.n	80107c2 <rt_memset+0x1a>
 80107d2:	e002      	b.n	80107da <rt_memset+0x32>
            *aligned_addr++ = buffer;
 80107d4:	601c      	str	r4, [r3, #0]
            count -= LBLOCKSIZE;
 80107d6:	3a04      	subs	r2, #4
            *aligned_addr++ = buffer;
 80107d8:	3304      	adds	r3, #4
        while (count >= LBLOCKSIZE)
 80107da:	2a03      	cmp	r2, #3
 80107dc:	d8fa      	bhi.n	80107d4 <rt_memset+0x2c>
 80107de:	e002      	b.n	80107e6 <rt_memset+0x3e>
        *m++ = (char)d;
 80107e0:	7019      	strb	r1, [r3, #0]
 80107e2:	3301      	adds	r3, #1
    while (count--)
 80107e4:	4622      	mov	r2, r4
 80107e6:	1e54      	subs	r4, r2, #1
 80107e8:	2a00      	cmp	r2, #0
 80107ea:	d1f9      	bne.n	80107e0 <rt_memset+0x38>
}
 80107ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107f0:	4770      	bx	lr
    char *m = (char *)s;
 80107f2:	4603      	mov	r3, r0
 80107f4:	e7f7      	b.n	80107e6 <rt_memset+0x3e>
 80107f6:	4603      	mov	r3, r0
 80107f8:	e7f5      	b.n	80107e6 <rt_memset+0x3e>

080107fa <rt_memcpy>:
{
 80107fa:	b410      	push	{r4}
    if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
 80107fc:	2a0f      	cmp	r2, #15
 80107fe:	d929      	bls.n	8010854 <rt_memcpy+0x5a>
 8010800:	ea41 0300 	orr.w	r3, r1, r0
 8010804:	f013 0f03 	tst.w	r3, #3
 8010808:	d00f      	beq.n	801082a <rt_memcpy+0x30>
    char *dst_ptr = (char *)dst;
 801080a:	4603      	mov	r3, r0
 801080c:	e01c      	b.n	8010848 <rt_memcpy+0x4e>
            *aligned_dst++ = *aligned_src++;
 801080e:	680c      	ldr	r4, [r1, #0]
 8010810:	601c      	str	r4, [r3, #0]
            *aligned_dst++ = *aligned_src++;
 8010812:	684c      	ldr	r4, [r1, #4]
 8010814:	605c      	str	r4, [r3, #4]
            *aligned_dst++ = *aligned_src++;
 8010816:	688c      	ldr	r4, [r1, #8]
 8010818:	609c      	str	r4, [r3, #8]
            *aligned_dst++ = *aligned_src++;
 801081a:	68cc      	ldr	r4, [r1, #12]
 801081c:	60dc      	str	r4, [r3, #12]
            len -= BIGBLOCKSIZE;
 801081e:	3a10      	subs	r2, #16
            *aligned_dst++ = *aligned_src++;
 8010820:	3110      	adds	r1, #16
 8010822:	3310      	adds	r3, #16
        while (len >= BIGBLOCKSIZE)
 8010824:	2a0f      	cmp	r2, #15
 8010826:	d8f2      	bhi.n	801080e <rt_memcpy+0x14>
 8010828:	e006      	b.n	8010838 <rt_memcpy+0x3e>
        aligned_dst = (long *)dst_ptr;
 801082a:	4603      	mov	r3, r0
 801082c:	e7fa      	b.n	8010824 <rt_memcpy+0x2a>
            *aligned_dst++ = *aligned_src++;
 801082e:	680c      	ldr	r4, [r1, #0]
 8010830:	601c      	str	r4, [r3, #0]
            len -= LITTLEBLOCKSIZE;
 8010832:	3a04      	subs	r2, #4
            *aligned_dst++ = *aligned_src++;
 8010834:	3104      	adds	r1, #4
 8010836:	3304      	adds	r3, #4
        while (len >= LITTLEBLOCKSIZE)
 8010838:	2a03      	cmp	r2, #3
 801083a:	d8f8      	bhi.n	801082e <rt_memcpy+0x34>
 801083c:	e004      	b.n	8010848 <rt_memcpy+0x4e>
        *dst_ptr++ = *src_ptr++;
 801083e:	780a      	ldrb	r2, [r1, #0]
 8010840:	701a      	strb	r2, [r3, #0]
    while (len--)
 8010842:	4622      	mov	r2, r4
        *dst_ptr++ = *src_ptr++;
 8010844:	3101      	adds	r1, #1
 8010846:	3301      	adds	r3, #1
    while (len--)
 8010848:	1e54      	subs	r4, r2, #1
 801084a:	2a00      	cmp	r2, #0
 801084c:	d1f7      	bne.n	801083e <rt_memcpy+0x44>
}
 801084e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010852:	4770      	bx	lr
    char *dst_ptr = (char *)dst;
 8010854:	4603      	mov	r3, r0
 8010856:	e7f7      	b.n	8010848 <rt_memcpy+0x4e>

08010858 <rt_strncpy>:
    if (n != 0)
 8010858:	b19a      	cbz	r2, 8010882 <rt_strncpy+0x2a>
{
 801085a:	b430      	push	{r4, r5}
 801085c:	4613      	mov	r3, r2
        char *d = dst;
 801085e:	4604      	mov	r4, r0
            if ((*d++ = *s++) == 0)
 8010860:	1c4d      	adds	r5, r1, #1
 8010862:	1c62      	adds	r2, r4, #1
 8010864:	7809      	ldrb	r1, [r1, #0]
 8010866:	7021      	strb	r1, [r4, #0]
 8010868:	b139      	cbz	r1, 801087a <rt_strncpy+0x22>
 801086a:	4614      	mov	r4, r2
 801086c:	4629      	mov	r1, r5
        } while (--n != 0);
 801086e:	3b01      	subs	r3, #1
 8010870:	d1f6      	bne.n	8010860 <rt_strncpy+0x8>
 8010872:	e004      	b.n	801087e <rt_strncpy+0x26>
                    *d++ = 0;
 8010874:	2100      	movs	r1, #0
 8010876:	7011      	strb	r1, [r2, #0]
 8010878:	3201      	adds	r2, #1
                while (--n != 0)
 801087a:	3b01      	subs	r3, #1
 801087c:	d1fa      	bne.n	8010874 <rt_strncpy+0x1c>
}
 801087e:	bc30      	pop	{r4, r5}
 8010880:	4770      	bx	lr
 8010882:	4770      	bx	lr

08010884 <rt_strlen>:
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
 8010884:	4603      	mov	r3, r0
 8010886:	e000      	b.n	801088a <rt_strlen+0x6>
 8010888:	3301      	adds	r3, #1
 801088a:	781a      	ldrb	r2, [r3, #0]
 801088c:	2a00      	cmp	r2, #0
 801088e:	d1fb      	bne.n	8010888 <rt_strlen+0x4>
}
 8010890:	1a18      	subs	r0, r3, r0
 8010892:	4770      	bx	lr

08010894 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char       *buf,
                        rt_size_t   size,
                        const char *fmt,
                        va_list     args)
{
 8010894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	b087      	sub	sp, #28
 801089a:	4682      	mov	sl, r0
 801089c:	9104      	str	r1, [sp, #16]
 801089e:	4614      	mov	r4, r2
 80108a0:	9305      	str	r3, [sp, #20]

    str = buf;
    end = buf + size;

    /* Make sure end is always >= buf */
    if (end < buf)
 80108a2:	eb10 0801 	adds.w	r8, r0, r1
 80108a6:	d303      	bcc.n	80108b0 <rt_vsnprintf+0x1c>
    {
        end  = ((char *) - 1);
        size = end - buf;
 80108a8:	43c3      	mvns	r3, r0
 80108aa:	9304      	str	r3, [sp, #16]
        end  = ((char *) - 1);
 80108ac:	f04f 38ff 	mov.w	r8, #4294967295
 80108b0:	4657      	mov	r7, sl
 80108b2:	e001      	b.n	80108b8 <rt_vsnprintf+0x24>
    {
        if (*fmt != '%')
        {
            if (str < end)
                *str = *fmt;
            ++ str;
 80108b4:	3701      	adds	r7, #1
    for (; *fmt ; ++fmt)
 80108b6:	3401      	adds	r4, #1
 80108b8:	7823      	ldrb	r3, [r4, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 8162 	beq.w	8010b84 <rt_vsnprintf+0x2f0>
        if (*fmt != '%')
 80108c0:	2b25      	cmp	r3, #37	; 0x25
 80108c2:	d003      	beq.n	80108cc <rt_vsnprintf+0x38>
            if (str < end)
 80108c4:	4547      	cmp	r7, r8
 80108c6:	d2f5      	bcs.n	80108b4 <rt_vsnprintf+0x20>
                *str = *fmt;
 80108c8:	703b      	strb	r3, [r7, #0]
 80108ca:	e7f3      	b.n	80108b4 <rt_vsnprintf+0x20>
            continue;
        }

        /* process flags */
        flags = 0;
 80108cc:	2500      	movs	r5, #0
 80108ce:	e002      	b.n	80108d6 <rt_vsnprintf+0x42>

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
            if (*fmt == '-') flags |= LEFT;
 80108d0:	f045 0510 	orr.w	r5, r5, #16
{
 80108d4:	4614      	mov	r4, r2
            ++ fmt;
 80108d6:	1c62      	adds	r2, r4, #1
            if (*fmt == '-') flags |= LEFT;
 80108d8:	7863      	ldrb	r3, [r4, #1]
 80108da:	2b2d      	cmp	r3, #45	; 0x2d
 80108dc:	d0f8      	beq.n	80108d0 <rt_vsnprintf+0x3c>
            else if (*fmt == '+') flags |= PLUS;
 80108de:	2b2b      	cmp	r3, #43	; 0x2b
 80108e0:	d008      	beq.n	80108f4 <rt_vsnprintf+0x60>
            else if (*fmt == ' ') flags |= SPACE;
 80108e2:	2b20      	cmp	r3, #32
 80108e4:	d009      	beq.n	80108fa <rt_vsnprintf+0x66>
            else if (*fmt == '#') flags |= SPECIAL;
 80108e6:	2b23      	cmp	r3, #35	; 0x23
 80108e8:	d00a      	beq.n	8010900 <rt_vsnprintf+0x6c>
            else if (*fmt == '0') flags |= ZEROPAD;
 80108ea:	2b30      	cmp	r3, #48	; 0x30
 80108ec:	d10b      	bne.n	8010906 <rt_vsnprintf+0x72>
 80108ee:	f045 0501 	orr.w	r5, r5, #1
 80108f2:	e7ef      	b.n	80108d4 <rt_vsnprintf+0x40>
            else if (*fmt == '+') flags |= PLUS;
 80108f4:	f045 0504 	orr.w	r5, r5, #4
 80108f8:	e7ec      	b.n	80108d4 <rt_vsnprintf+0x40>
            else if (*fmt == ' ') flags |= SPACE;
 80108fa:	f045 0508 	orr.w	r5, r5, #8
 80108fe:	e7e9      	b.n	80108d4 <rt_vsnprintf+0x40>
            else if (*fmt == '#') flags |= SPECIAL;
 8010900:	f045 0520 	orr.w	r5, r5, #32
 8010904:	e7e6      	b.n	80108d4 <rt_vsnprintf+0x40>
            else break;
        }

        /* get field width */
        field_width = -1;
        if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 8010906:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801090a:	2909      	cmp	r1, #9
 801090c:	d91c      	bls.n	8010948 <rt_vsnprintf+0xb4>
        else if (*fmt == '*')
 801090e:	2b2a      	cmp	r3, #42	; 0x2a
 8010910:	d01c      	beq.n	801094c <rt_vsnprintf+0xb8>
        field_width = -1;
 8010912:	f04f 36ff 	mov.w	r6, #4294967295
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
        if (*fmt == '.')
 8010916:	7813      	ldrb	r3, [r2, #0]
 8010918:	2b2e      	cmp	r3, #46	; 0x2e
 801091a:	d022      	beq.n	8010962 <rt_vsnprintf+0xce>
        precision = -1;
 801091c:	f04f 39ff 	mov.w	r9, #4294967295
        /* get the conversion qualifier */
        qualifier = 0;
#ifdef RT_PRINTF_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
 8010920:	7811      	ldrb	r1, [r2, #0]
 8010922:	2968      	cmp	r1, #104	; 0x68
 8010924:	d048      	beq.n	80109b8 <rt_vsnprintf+0x124>
 8010926:	296c      	cmp	r1, #108	; 0x6c
 8010928:	d046      	beq.n	80109b8 <rt_vsnprintf+0x124>
 801092a:	4614      	mov	r4, r2
        qualifier = 0;
 801092c:	2100      	movs	r1, #0
 801092e:	e044      	b.n	80109ba <rt_vsnprintf+0x126>
        i = i * 10 + *((*s)++) - '0';
 8010930:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8010934:	0073      	lsls	r3, r6, #1
 8010936:	3201      	adds	r2, #1
 8010938:	185e      	adds	r6, r3, r1
 801093a:	3e30      	subs	r6, #48	; 0x30
    while (isdigit(**s))
 801093c:	7811      	ldrb	r1, [r2, #0]
 801093e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010942:	2b09      	cmp	r3, #9
 8010944:	d9f4      	bls.n	8010930 <rt_vsnprintf+0x9c>
 8010946:	e7e6      	b.n	8010916 <rt_vsnprintf+0x82>
    register int i = 0;
 8010948:	2600      	movs	r6, #0
 801094a:	e7f7      	b.n	801093c <rt_vsnprintf+0xa8>
            ++ fmt;
 801094c:	1ca2      	adds	r2, r4, #2
            field_width = rt_va_arg(args, int);
 801094e:	9b05      	ldr	r3, [sp, #20]
 8010950:	1d19      	adds	r1, r3, #4
 8010952:	9105      	str	r1, [sp, #20]
 8010954:	681e      	ldr	r6, [r3, #0]
            if (field_width < 0)
 8010956:	2e00      	cmp	r6, #0
 8010958:	dadd      	bge.n	8010916 <rt_vsnprintf+0x82>
                field_width = -field_width;
 801095a:	4276      	negs	r6, r6
                flags |= LEFT;
 801095c:	f045 0510 	orr.w	r5, r5, #16
 8010960:	e7d9      	b.n	8010916 <rt_vsnprintf+0x82>
            ++ fmt;
 8010962:	1c51      	adds	r1, r2, #1
            if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 8010964:	7853      	ldrb	r3, [r2, #1]
 8010966:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801096a:	2809      	cmp	r0, #9
 801096c:	d91a      	bls.n	80109a4 <rt_vsnprintf+0x110>
            else if (*fmt == '*')
 801096e:	2b2a      	cmp	r3, #42	; 0x2a
 8010970:	d01b      	beq.n	80109aa <rt_vsnprintf+0x116>
            ++ fmt;
 8010972:	460a      	mov	r2, r1
            if (precision < 0) precision = 0;
 8010974:	f04f 0900 	mov.w	r9, #0
 8010978:	e7d2      	b.n	8010920 <rt_vsnprintf+0x8c>
        i = i * 10 + *((*s)++) - '0';
 801097a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 801097e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8010982:	3101      	adds	r1, #1
 8010984:	eb03 0902 	add.w	r9, r3, r2
 8010988:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    while (isdigit(**s))
 801098c:	780a      	ldrb	r2, [r1, #0]
 801098e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010992:	2b09      	cmp	r3, #9
 8010994:	d9f1      	bls.n	801097a <rt_vsnprintf+0xe6>
 8010996:	460a      	mov	r2, r1
            if (precision < 0) precision = 0;
 8010998:	f1b9 0f00 	cmp.w	r9, #0
 801099c:	dac0      	bge.n	8010920 <rt_vsnprintf+0x8c>
 801099e:	f04f 0900 	mov.w	r9, #0
 80109a2:	e7bd      	b.n	8010920 <rt_vsnprintf+0x8c>
    register int i = 0;
 80109a4:	f04f 0900 	mov.w	r9, #0
 80109a8:	e7f0      	b.n	801098c <rt_vsnprintf+0xf8>
                ++ fmt;
 80109aa:	3202      	adds	r2, #2
                precision = rt_va_arg(args, int);
 80109ac:	9b05      	ldr	r3, [sp, #20]
 80109ae:	1d19      	adds	r1, r3, #4
 80109b0:	9105      	str	r1, [sp, #20]
 80109b2:	f8d3 9000 	ldr.w	r9, [r3]
 80109b6:	e7ef      	b.n	8010998 <rt_vsnprintf+0x104>
#endif
        {
            qualifier = *fmt;
            ++ fmt;
 80109b8:	1c54      	adds	r4, r2, #1
        }

        /* the default base */
        base = 10;

        switch (*fmt)
 80109ba:	7823      	ldrb	r3, [r4, #0]
 80109bc:	3b25      	subs	r3, #37	; 0x25
 80109be:	2b53      	cmp	r3, #83	; 0x53
 80109c0:	f200 80ad 	bhi.w	8010b1e <rt_vsnprintf+0x28a>
 80109c4:	e8df f003 	tbb	[pc, r3]
 80109c8:	ababab9b 	.word	0xababab9b
 80109cc:	abababab 	.word	0xabababab
 80109d0:	abababab 	.word	0xabababab
 80109d4:	abababab 	.word	0xabababab
 80109d8:	abababab 	.word	0xabababab
 80109dc:	abababab 	.word	0xabababab
 80109e0:	abababab 	.word	0xabababab
 80109e4:	abababab 	.word	0xabababab
 80109e8:	abababab 	.word	0xabababab
 80109ec:	abababab 	.word	0xabababab
 80109f0:	abababab 	.word	0xabababab
 80109f4:	abababab 	.word	0xabababab
 80109f8:	a3ababab 	.word	0xa3ababab
 80109fc:	abababab 	.word	0xabababab
 8010a00:	abababab 	.word	0xabababab
 8010a04:	a72aabab 	.word	0xa72aabab
 8010a08:	abababab 	.word	0xabababab
 8010a0c:	abababa7 	.word	0xabababa7
 8010a10:	85a1abab 	.word	0x85a1abab
 8010a14:	ab49abab 	.word	0xab49abab
 8010a18:	bcababba 	.word	0xbcababba
        {
        case 'c':
            if (!(flags & LEFT))
 8010a1c:	f015 0f10 	tst.w	r5, #16
 8010a20:	d009      	beq.n	8010a36 <rt_vsnprintf+0x1a2>
                    ++ str;
                }
            }

            /* get character */
            c = (rt_uint8_t)rt_va_arg(args, int);
 8010a22:	9b05      	ldr	r3, [sp, #20]
 8010a24:	1d1a      	adds	r2, r3, #4
 8010a26:	9205      	str	r2, [sp, #20]
 8010a28:	781b      	ldrb	r3, [r3, #0]
            if (str < end) *str = c;
 8010a2a:	4547      	cmp	r7, r8
 8010a2c:	d200      	bcs.n	8010a30 <rt_vsnprintf+0x19c>
 8010a2e:	703b      	strb	r3, [r7, #0]
            ++ str;
 8010a30:	3701      	adds	r7, #1

            /* put width */
            while (--field_width > 0)
 8010a32:	e009      	b.n	8010a48 <rt_vsnprintf+0x1b4>
                    ++ str;
 8010a34:	3701      	adds	r7, #1
                while (--field_width > 0)
 8010a36:	3e01      	subs	r6, #1
 8010a38:	2e00      	cmp	r6, #0
 8010a3a:	ddf2      	ble.n	8010a22 <rt_vsnprintf+0x18e>
                    if (str < end) *str = ' ';
 8010a3c:	4547      	cmp	r7, r8
 8010a3e:	d2f9      	bcs.n	8010a34 <rt_vsnprintf+0x1a0>
 8010a40:	2320      	movs	r3, #32
 8010a42:	703b      	strb	r3, [r7, #0]
 8010a44:	e7f6      	b.n	8010a34 <rt_vsnprintf+0x1a0>
            {
                if (str < end) *str = ' ';
                ++ str;
 8010a46:	3701      	adds	r7, #1
            while (--field_width > 0)
 8010a48:	3e01      	subs	r6, #1
 8010a4a:	2e00      	cmp	r6, #0
 8010a4c:	f77f af33 	ble.w	80108b6 <rt_vsnprintf+0x22>
                if (str < end) *str = ' ';
 8010a50:	4547      	cmp	r7, r8
 8010a52:	d2f8      	bcs.n	8010a46 <rt_vsnprintf+0x1b2>
 8010a54:	2320      	movs	r3, #32
 8010a56:	703b      	strb	r3, [r7, #0]
 8010a58:	e7f5      	b.n	8010a46 <rt_vsnprintf+0x1b2>
            }
            continue;

        case 's':
            s = rt_va_arg(args, char *);
 8010a5a:	9b05      	ldr	r3, [sp, #20]
 8010a5c:	1d1a      	adds	r2, r3, #4
 8010a5e:	9205      	str	r2, [sp, #20]
 8010a60:	f8d3 b000 	ldr.w	fp, [r3]
            if (!s) s = "(NULL)";
 8010a64:	f1bb 0f00 	cmp.w	fp, #0
 8010a68:	d00d      	beq.n	8010a86 <rt_vsnprintf+0x1f2>

            len = rt_strlen(s);
 8010a6a:	4658      	mov	r0, fp
 8010a6c:	f7ff ff0a 	bl	8010884 <rt_strlen>
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
 8010a70:	f1b9 0f00 	cmp.w	r9, #0
 8010a74:	dd02      	ble.n	8010a7c <rt_vsnprintf+0x1e8>
 8010a76:	4581      	cmp	r9, r0
 8010a78:	da00      	bge.n	8010a7c <rt_vsnprintf+0x1e8>
 8010a7a:	4648      	mov	r0, r9
#endif

            if (!(flags & LEFT))
 8010a7c:	f015 0f10 	tst.w	r5, #16
 8010a80:	d006      	beq.n	8010a90 <rt_vsnprintf+0x1fc>
                    if (str < end) *str = ' ';
                    ++ str;
                }
            }

            for (i = 0; i < len; ++i)
 8010a82:	2300      	movs	r3, #0
 8010a84:	e012      	b.n	8010aac <rt_vsnprintf+0x218>
            if (!s) s = "(NULL)";
 8010a86:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8010ba4 <rt_vsnprintf+0x310>
 8010a8a:	e7ee      	b.n	8010a6a <rt_vsnprintf+0x1d6>
                    ++ str;
 8010a8c:	3701      	adds	r7, #1
                while (len < field_width--)
 8010a8e:	461e      	mov	r6, r3
 8010a90:	1e73      	subs	r3, r6, #1
 8010a92:	42b0      	cmp	r0, r6
 8010a94:	da04      	bge.n	8010aa0 <rt_vsnprintf+0x20c>
                    if (str < end) *str = ' ';
 8010a96:	4547      	cmp	r7, r8
 8010a98:	d2f8      	bcs.n	8010a8c <rt_vsnprintf+0x1f8>
 8010a9a:	2220      	movs	r2, #32
 8010a9c:	703a      	strb	r2, [r7, #0]
 8010a9e:	e7f5      	b.n	8010a8c <rt_vsnprintf+0x1f8>
                while (len < field_width--)
 8010aa0:	461e      	mov	r6, r3
 8010aa2:	e7ee      	b.n	8010a82 <rt_vsnprintf+0x1ee>
            {
                if (str < end) *str = *s;
                ++ str;
 8010aa4:	3701      	adds	r7, #1
                ++ s;
 8010aa6:	f10b 0b01 	add.w	fp, fp, #1
            for (i = 0; i < len; ++i)
 8010aaa:	3301      	adds	r3, #1
 8010aac:	4283      	cmp	r3, r0
 8010aae:	da07      	bge.n	8010ac0 <rt_vsnprintf+0x22c>
                if (str < end) *str = *s;
 8010ab0:	4547      	cmp	r7, r8
 8010ab2:	d2f7      	bcs.n	8010aa4 <rt_vsnprintf+0x210>
 8010ab4:	f89b 2000 	ldrb.w	r2, [fp]
 8010ab8:	703a      	strb	r2, [r7, #0]
 8010aba:	e7f3      	b.n	8010aa4 <rt_vsnprintf+0x210>
            }

            while (len < field_width--)
            {
                if (str < end) *str = ' ';
                ++ str;
 8010abc:	3701      	adds	r7, #1
            while (len < field_width--)
 8010abe:	461e      	mov	r6, r3
 8010ac0:	1e73      	subs	r3, r6, #1
 8010ac2:	42b0      	cmp	r0, r6
 8010ac4:	f6bf aef7 	bge.w	80108b6 <rt_vsnprintf+0x22>
                if (str < end) *str = ' ';
 8010ac8:	4547      	cmp	r7, r8
 8010aca:	d2f7      	bcs.n	8010abc <rt_vsnprintf+0x228>
 8010acc:	2220      	movs	r2, #32
 8010ace:	703a      	strb	r2, [r7, #0]
 8010ad0:	e7f4      	b.n	8010abc <rt_vsnprintf+0x228>
            }
            continue;

        case 'p':
            if (field_width == -1)
 8010ad2:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010ad6:	d00e      	beq.n	8010af6 <rt_vsnprintf+0x262>
                field_width = sizeof(void *) << 1;
                flags |= ZEROPAD;
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)rt_va_arg(args, void *),
 8010ad8:	9b05      	ldr	r3, [sp, #20]
 8010ada:	1d1a      	adds	r2, r3, #4
 8010adc:	9205      	str	r2, [sp, #20]
 8010ade:	681a      	ldr	r2, [r3, #0]
            str = print_number(str, end,
 8010ae0:	9502      	str	r5, [sp, #8]
 8010ae2:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ae6:	9600      	str	r6, [sp, #0]
 8010ae8:	2310      	movs	r3, #16
 8010aea:	4641      	mov	r1, r8
 8010aec:	4638      	mov	r0, r7
 8010aee:	f7ff fda5 	bl	801063c <print_number>
 8010af2:	4607      	mov	r7, r0
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif
            continue;
 8010af4:	e6df      	b.n	80108b6 <rt_vsnprintf+0x22>
                flags |= ZEROPAD;
 8010af6:	f045 0501 	orr.w	r5, r5, #1
                field_width = sizeof(void *) << 1;
 8010afa:	2608      	movs	r6, #8
 8010afc:	e7ec      	b.n	8010ad8 <rt_vsnprintf+0x244>

        case '%':
            if (str < end) *str = '%';
 8010afe:	4547      	cmp	r7, r8
 8010b00:	d201      	bcs.n	8010b06 <rt_vsnprintf+0x272>
 8010b02:	2325      	movs	r3, #37	; 0x25
 8010b04:	703b      	strb	r3, [r7, #0]
            ++ str;
 8010b06:	3701      	adds	r7, #1
            continue;
 8010b08:	e6d5      	b.n	80108b6 <rt_vsnprintf+0x22>

        /* integer number formats - set up the flags and "break" */
        case 'o':
            base = 8;
 8010b0a:	2308      	movs	r3, #8
            break;
 8010b0c:	e019      	b.n	8010b42 <rt_vsnprintf+0x2ae>

        case 'X':
            flags |= LARGE;
 8010b0e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        case 'x':
            base = 16;
 8010b12:	2310      	movs	r3, #16
 8010b14:	e015      	b.n	8010b42 <rt_vsnprintf+0x2ae>
            break;

        case 'd':
        case 'i':
            flags |= SIGN;
 8010b16:	f045 0502 	orr.w	r5, r5, #2
        base = 10;
 8010b1a:	230a      	movs	r3, #10
 8010b1c:	e011      	b.n	8010b42 <rt_vsnprintf+0x2ae>
        case 'u':
            break;

        default:
            if (str < end) *str = '%';
 8010b1e:	4547      	cmp	r7, r8
 8010b20:	d201      	bcs.n	8010b26 <rt_vsnprintf+0x292>
 8010b22:	2325      	movs	r3, #37	; 0x25
 8010b24:	703b      	strb	r3, [r7, #0]
            ++ str;
 8010b26:	1c7a      	adds	r2, r7, #1

            if (*fmt)
 8010b28:	7823      	ldrb	r3, [r4, #0]
 8010b2a:	b123      	cbz	r3, 8010b36 <rt_vsnprintf+0x2a2>
            {
                if (str < end) *str = *fmt;
 8010b2c:	4542      	cmp	r2, r8
 8010b2e:	d200      	bcs.n	8010b32 <rt_vsnprintf+0x29e>
 8010b30:	707b      	strb	r3, [r7, #1]
                ++ str;
 8010b32:	3702      	adds	r7, #2
 8010b34:	e6bf      	b.n	80108b6 <rt_vsnprintf+0x22>
            }
            else
            {
                -- fmt;
 8010b36:	3c01      	subs	r4, #1
            ++ str;
 8010b38:	4617      	mov	r7, r2
            }
            continue;
 8010b3a:	e6bc      	b.n	80108b6 <rt_vsnprintf+0x22>
        base = 10;
 8010b3c:	230a      	movs	r3, #10
 8010b3e:	e000      	b.n	8010b42 <rt_vsnprintf+0x2ae>
            base = 16;
 8010b40:	2310      	movs	r3, #16

#ifdef RT_PRINTF_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
        else if (qualifier == 'l')
#else
        if (qualifier == 'l')
 8010b42:	296c      	cmp	r1, #108	; 0x6c
 8010b44:	d00f      	beq.n	8010b66 <rt_vsnprintf+0x2d2>
#endif
        {
            num = rt_va_arg(args, rt_uint32_t);
            if (flags & SIGN) num = (rt_int32_t)num;
        }
        else if (qualifier == 'h')
 8010b46:	2968      	cmp	r1, #104	; 0x68
 8010b48:	d012      	beq.n	8010b70 <rt_vsnprintf+0x2dc>
            num = (rt_uint16_t)rt_va_arg(args, rt_int32_t);
            if (flags & SIGN) num = (rt_int16_t)num;
        }
        else
        {
            num = rt_va_arg(args, rt_uint32_t);
 8010b4a:	9a05      	ldr	r2, [sp, #20]
 8010b4c:	1d11      	adds	r1, r2, #4
 8010b4e:	9105      	str	r1, [sp, #20]
 8010b50:	6812      	ldr	r2, [r2, #0]
            if (flags & SIGN) num = (rt_int32_t)num;
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
 8010b52:	9502      	str	r5, [sp, #8]
 8010b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b58:	9600      	str	r6, [sp, #0]
 8010b5a:	4641      	mov	r1, r8
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	f7ff fd6d 	bl	801063c <print_number>
 8010b62:	4607      	mov	r7, r0
 8010b64:	e6a7      	b.n	80108b6 <rt_vsnprintf+0x22>
            num = rt_va_arg(args, rt_uint32_t);
 8010b66:	9a05      	ldr	r2, [sp, #20]
 8010b68:	1d11      	adds	r1, r2, #4
 8010b6a:	9105      	str	r1, [sp, #20]
 8010b6c:	6812      	ldr	r2, [r2, #0]
 8010b6e:	e7f0      	b.n	8010b52 <rt_vsnprintf+0x2be>
            num = (rt_uint16_t)rt_va_arg(args, rt_int32_t);
 8010b70:	9a05      	ldr	r2, [sp, #20]
 8010b72:	1d11      	adds	r1, r2, #4
 8010b74:	9105      	str	r1, [sp, #20]
 8010b76:	6811      	ldr	r1, [r2, #0]
 8010b78:	b28a      	uxth	r2, r1
            if (flags & SIGN) num = (rt_int16_t)num;
 8010b7a:	f015 0f02 	tst.w	r5, #2
 8010b7e:	d0e8      	beq.n	8010b52 <rt_vsnprintf+0x2be>
 8010b80:	b20a      	sxth	r2, r1
 8010b82:	e7e6      	b.n	8010b52 <rt_vsnprintf+0x2be>
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif
    }

    if (size > 0)
 8010b84:	9b04      	ldr	r3, [sp, #16]
 8010b86:	b123      	cbz	r3, 8010b92 <rt_vsnprintf+0x2fe>
    {
        if (str < end) *str = '\0';
 8010b88:	4547      	cmp	r7, r8
 8010b8a:	d307      	bcc.n	8010b9c <rt_vsnprintf+0x308>
        else
        {
            end[-1] = '\0';
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	f808 3c01 	strb.w	r3, [r8, #-1]

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
}
 8010b92:	eba7 000a 	sub.w	r0, r7, sl
 8010b96:	b007      	add	sp, #28
 8010b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (str < end) *str = '\0';
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	703b      	strb	r3, [r7, #0]
 8010ba0:	e7f7      	b.n	8010b92 <rt_vsnprintf+0x2fe>
 8010ba2:	bf00      	nop
 8010ba4:	080123c8 	.word	0x080123c8

08010ba8 <rt_vsprintf>:
 * @param buf the buffer to save formatted string
 * @param arg_ptr the arg_ptr
 * @param format the format
 */
rt_int32_t rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
{
 8010ba8:	b508      	push	{r3, lr}
    return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
 8010baa:	4613      	mov	r3, r2
 8010bac:	460a      	mov	r2, r1
 8010bae:	f04f 31ff 	mov.w	r1, #4294967295
 8010bb2:	f7ff fe6f 	bl	8010894 <rt_vsnprintf>
}
 8010bb6:	bd08      	pop	{r3, pc}

08010bb8 <rt_sprintf>:
 *
 * @param buf the buffer to save formatted string
 * @param format the format
 */
rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
 8010bb8:	b40e      	push	{r1, r2, r3}
 8010bba:	b500      	push	{lr}
 8010bbc:	b082      	sub	sp, #8
 8010bbe:	aa03      	add	r2, sp, #12
 8010bc0:	f852 1b04 	ldr.w	r1, [r2], #4
    rt_int32_t n;
    va_list arg_ptr;

    rt_va_start(arg_ptr, format);
 8010bc4:	9201      	str	r2, [sp, #4]
    n = rt_vsprintf(buf, format, arg_ptr);
 8010bc6:	f7ff ffef 	bl	8010ba8 <rt_vsprintf>
    rt_va_end(arg_ptr);

    return n;
}
 8010bca:	b002      	add	sp, #8
 8010bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bd0:	b003      	add	sp, #12
 8010bd2:	4770      	bx	lr

08010bd4 <rt_hw_console_output>:
#endif

RT_WEAK void rt_hw_console_output(const char *str)
{
    /* empty console output */
}
 8010bd4:	4770      	bx	lr
	...

08010bd8 <rt_kprintf>:
 * This function will print a formatted string on system console
 *
 * @param fmt the format
 */
void rt_kprintf(const char *fmt, ...)
{
 8010bd8:	b40f      	push	{r0, r1, r2, r3}
 8010bda:	b510      	push	{r4, lr}
 8010bdc:	b082      	sub	sp, #8
 8010bde:	ab04      	add	r3, sp, #16
 8010be0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    rt_va_start(args, fmt);
 8010be4:	9301      	str	r3, [sp, #4]
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8010be6:	4c06      	ldr	r4, [pc, #24]	; (8010c00 <rt_kprintf+0x28>)
 8010be8:	217f      	movs	r1, #127	; 0x7f
 8010bea:	4620      	mov	r0, r4
 8010bec:	f7ff fe52 	bl	8010894 <rt_vsnprintf>
        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
        rt_device_write(_console_device, 0, rt_log_buf, length);
        _console_device->open_flag = old_flag;
    }
#else
    rt_hw_console_output(rt_log_buf);
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f7ff ffef 	bl	8010bd4 <rt_hw_console_output>
#endif
    rt_va_end(args);
}
 8010bf6:	b002      	add	sp, #8
 8010bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bfc:	b004      	add	sp, #16
 8010bfe:	4770      	bx	lr
 8010c00:	200040cc 	.word	0x200040cc

08010c04 <__rt_ffs>:
 * @return return the index of the first bit set. If value is 0, then this function
 * shall return 0.
 */
int __rt_ffs(int value)
{
    if (value == 0) return 0;
 8010c04:	b1e8      	cbz	r0, 8010c42 <__rt_ffs+0x3e>

    if (value & 0xff)
 8010c06:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8010c0a:	d10a      	bne.n	8010c22 <__rt_ffs+0x1e>
        return __lowest_bit_bitmap[value & 0xff] + 1;

    if (value & 0xff00)
 8010c0c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8010c10:	d10b      	bne.n	8010c2a <__rt_ffs+0x26>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;

    if (value & 0xff0000)
 8010c12:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
 8010c16:	d10e      	bne.n	8010c36 <__rt_ffs+0x32>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
 8010c18:	0e03      	lsrs	r3, r0, #24
 8010c1a:	4a0a      	ldr	r2, [pc, #40]	; (8010c44 <__rt_ffs+0x40>)
 8010c1c:	5cd0      	ldrb	r0, [r2, r3]
 8010c1e:	3019      	adds	r0, #25
 8010c20:	4770      	bx	lr
        return __lowest_bit_bitmap[value & 0xff] + 1;
 8010c22:	4b08      	ldr	r3, [pc, #32]	; (8010c44 <__rt_ffs+0x40>)
 8010c24:	5c98      	ldrb	r0, [r3, r2]
 8010c26:	3001      	adds	r0, #1
 8010c28:	4770      	bx	lr
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
 8010c2a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010c2e:	4a05      	ldr	r2, [pc, #20]	; (8010c44 <__rt_ffs+0x40>)
 8010c30:	5cd0      	ldrb	r0, [r2, r3]
 8010c32:	3009      	adds	r0, #9
 8010c34:	4770      	bx	lr
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
 8010c36:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c3a:	4a02      	ldr	r2, [pc, #8]	; (8010c44 <__rt_ffs+0x40>)
 8010c3c:	5cd0      	ldrb	r0, [r2, r3]
 8010c3e:	3011      	adds	r0, #17
 8010c40:	4770      	bx	lr
}
 8010c42:	4770      	bx	lr
 8010c44:	080122b4 	.word	0x080122b4

08010c48 <thread_rulechoose>:
//功能概要：根据接收到的命令，启动/挂起对应的线程
//内部调用：无
//======================================================================

void thread_rulechoose()
{
 8010c48:	b500      	push	{lr}
 8010c4a:	b087      	sub	sp, #28
 8010c4c:	e0bb      	b.n	8010dc6 <thread_rulechoose+0x17e>
        printf("接收到事件信号\n");
        if(recvedstate==RULE_CHOOSE_EVENT)  //如果接收完成且正确
    	{
            if(gcRecvBuf[3]==CONNECT_CODE)//命令字为66，代表Pc端正和mcu取得连接
            {
                uart_send_string(UART_User,(void*) "I can see you");//回发连接确认
 8010c4e:	499e      	ldr	r1, [pc, #632]	; (8010ec8 <thread_rulechoose+0x280>)
 8010c50:	2002      	movs	r0, #2
 8010c52:	f000 fc65 	bl	8011520 <uart_send_string>
 8010c56:	e0cf      	b.n	8010df8 <thread_rulechoose+0x1b0>
            }
    		if(gcRecvBuf[7]==EVENT_CODE) //命令字为90，代表“事件功能”
            {
                if(gcRecvBuf[8]==0x01)//命令参数为01，代表启动该功能，传递事件信号把小灯线程从阻塞队列移到就绪队列
 8010c58:	4b9c      	ldr	r3, [pc, #624]	; (8010ecc <thread_rulechoose+0x284>)
 8010c5a:	7a1b      	ldrb	r3, [r3, #8]
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d022      	beq.n	8010ca8 <thread_rulechoose+0x60>
                    rt_thread_startup(thd_bluelight);
                    rt_thread_startup(thd_greenlight);
                    rt_event_send(EventWord,BLUE_LIGHT_EVENT);

                }
                if(gcRecvBuf[8]==0x00)//命令参数为00，代表关闭该功能，重新启动小灯线程，把小灯线程移入阻塞队列
 8010c62:	4b9a      	ldr	r3, [pc, #616]	; (8010ecc <thread_rulechoose+0x284>)
 8010c64:	7a1b      	ldrb	r3, [r3, #8]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f040 80cc 	bne.w	8010e04 <thread_rulechoose+0x1bc>
                {
                    printf("接收到事件功能结束命令，事件功能模块结束");
 8010c6c:	4898      	ldr	r0, [pc, #608]	; (8010ed0 <thread_rulechoose+0x288>)
 8010c6e:	f7fe f9c3 	bl	800eff8 <myprintf>
                    rt_thread_detach(thd_bluelight);
 8010c72:	4b98      	ldr	r3, [pc, #608]	; (8010ed4 <thread_rulechoose+0x28c>)
 8010c74:	6818      	ldr	r0, [r3, #0]
 8010c76:	f7fe fa71 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_greenlight);
 8010c7a:	4b97      	ldr	r3, [pc, #604]	; (8010ed8 <thread_rulechoose+0x290>)
 8010c7c:	6818      	ldr	r0, [r3, #0]
 8010c7e:	f7fe fa6d 	bl	800f15c <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8010c82:	2201      	movs	r2, #1
 8010c84:	4611      	mov	r1, r2
 8010c86:	f240 1009 	movw	r0, #265	; 0x109
 8010c8a:	f7ff f8b9 	bl	800fe00 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8010c8e:	2201      	movs	r2, #1
 8010c90:	4611      	mov	r1, r2
 8010c92:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010c96:	f7ff f8b3 	bl	800fe00 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	f240 1007 	movw	r0, #263	; 0x107
 8010ca2:	f7ff f8ad 	bl	800fe00 <gpio_init>
 8010ca6:	e0ad      	b.n	8010e04 <thread_rulechoose+0x1bc>
                    rt_thread_detach(thd_messagerecv);
 8010ca8:	4b8c      	ldr	r3, [pc, #560]	; (8010edc <thread_rulechoose+0x294>)
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	f7fe fa56 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread1);	
 8010cb0:	4b8b      	ldr	r3, [pc, #556]	; (8010ee0 <thread_rulechoose+0x298>)
 8010cb2:	6818      	ldr	r0, [r3, #0]
 8010cb4:	f7fe fa52 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 8010cb8:	4b8a      	ldr	r3, [pc, #552]	; (8010ee4 <thread_rulechoose+0x29c>)
 8010cba:	6818      	ldr	r0, [r3, #0]
 8010cbc:	f7fe fa4e 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 8010cc0:	4b89      	ldr	r3, [pc, #548]	; (8010ee8 <thread_rulechoose+0x2a0>)
 8010cc2:	6818      	ldr	r0, [r3, #0]
 8010cc4:	f7fe fa4a 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexRed);
 8010cc8:	4b88      	ldr	r3, [pc, #544]	; (8010eec <thread_rulechoose+0x2a4>)
 8010cca:	6818      	ldr	r0, [r3, #0]
 8010ccc:	f7fe fa46 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexGreen);
 8010cd0:	4b87      	ldr	r3, [pc, #540]	; (8010ef0 <thread_rulechoose+0x2a8>)
 8010cd2:	6818      	ldr	r0, [r3, #0]
 8010cd4:	f7fe fa42 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexBlue);
 8010cd8:	4b86      	ldr	r3, [pc, #536]	; (8010ef4 <thread_rulechoose+0x2ac>)
 8010cda:	6818      	ldr	r0, [r3, #0]
 8010cdc:	f7fe fa3e 	bl	800f15c <rt_thread_detach>
                    rt_thread_startup(thd_bluelight);
 8010ce0:	4b7c      	ldr	r3, [pc, #496]	; (8010ed4 <thread_rulechoose+0x28c>)
 8010ce2:	6818      	ldr	r0, [r3, #0]
 8010ce4:	f7fe fb54 	bl	800f390 <rt_thread_startup>
                    rt_thread_startup(thd_greenlight);
 8010ce8:	4b7b      	ldr	r3, [pc, #492]	; (8010ed8 <thread_rulechoose+0x290>)
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	f7fe fb50 	bl	800f390 <rt_thread_startup>
                    rt_event_send(EventWord,BLUE_LIGHT_EVENT);
 8010cf0:	2108      	movs	r1, #8
 8010cf2:	4b81      	ldr	r3, [pc, #516]	; (8010ef8 <thread_rulechoose+0x2b0>)
 8010cf4:	6818      	ldr	r0, [r3, #0]
 8010cf6:	f7ff fa7e 	bl	80101f6 <rt_event_send>
 8010cfa:	e7b2      	b.n	8010c62 <thread_rulechoose+0x1a>

            }

            if(gcRecvBuf[7]==MESSAGE_CODE) //命令字为91，代表“消息队列功能”
            {
                rt_thread_detach(thd_bluelight);
 8010cfc:	4b75      	ldr	r3, [pc, #468]	; (8010ed4 <thread_rulechoose+0x28c>)
 8010cfe:	6818      	ldr	r0, [r3, #0]
 8010d00:	f7fe fa2c 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_greenlight);
 8010d04:	4b74      	ldr	r3, [pc, #464]	; (8010ed8 <thread_rulechoose+0x290>)
 8010d06:	6818      	ldr	r0, [r3, #0]
 8010d08:	f7fe fa28 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_SPThread1);	
 8010d0c:	4b74      	ldr	r3, [pc, #464]	; (8010ee0 <thread_rulechoose+0x298>)
 8010d0e:	6818      	ldr	r0, [r3, #0]
 8010d10:	f7fe fa24 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_SPThread2);
 8010d14:	4b73      	ldr	r3, [pc, #460]	; (8010ee4 <thread_rulechoose+0x29c>)
 8010d16:	6818      	ldr	r0, [r3, #0]
 8010d18:	f7fe fa20 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_SPThread3);
 8010d1c:	4b72      	ldr	r3, [pc, #456]	; (8010ee8 <thread_rulechoose+0x2a0>)
 8010d1e:	6818      	ldr	r0, [r3, #0]
 8010d20:	f7fe fa1c 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_mutexRed);
 8010d24:	4b71      	ldr	r3, [pc, #452]	; (8010eec <thread_rulechoose+0x2a4>)
 8010d26:	6818      	ldr	r0, [r3, #0]
 8010d28:	f7fe fa18 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_mutexGreen);
 8010d2c:	4b70      	ldr	r3, [pc, #448]	; (8010ef0 <thread_rulechoose+0x2a8>)
 8010d2e:	6818      	ldr	r0, [r3, #0]
 8010d30:	f7fe fa14 	bl	800f15c <rt_thread_detach>
                rt_thread_detach(thd_mutexBlue);
 8010d34:	4b6f      	ldr	r3, [pc, #444]	; (8010ef4 <thread_rulechoose+0x2ac>)
 8010d36:	6818      	ldr	r0, [r3, #0]
 8010d38:	f7fe fa10 	bl	800f15c <rt_thread_detach>


                rt_thread_startup(thd_messagerecv);//启动消息队列线程
 8010d3c:	4b67      	ldr	r3, [pc, #412]	; (8010edc <thread_rulechoose+0x294>)
 8010d3e:	6818      	ldr	r0, [r3, #0]
 8010d40:	f7fe fb26 	bl	800f390 <rt_thread_startup>
                //取出收到的数据作为一个消息
			    for(int i=0;i<8;i++)
 8010d44:	2300      	movs	r3, #0
 8010d46:	2b07      	cmp	r3, #7
 8010d48:	dc09      	bgt.n	8010d5e <thread_rulechoose+0x116>
				recvData[i] = gcRecvBuf[i+9];
 8010d4a:	f103 0209 	add.w	r2, r3, #9
 8010d4e:	495f      	ldr	r1, [pc, #380]	; (8010ecc <thread_rulechoose+0x284>)
 8010d50:	5c89      	ldrb	r1, [r1, r2]
 8010d52:	aa06      	add	r2, sp, #24
 8010d54:	441a      	add	r2, r3
 8010d56:	f802 1c10 	strb.w	r1, [r2, #-16]
			    for(int i=0;i<8;i++)
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	e7f3      	b.n	8010d46 <thread_rulechoose+0xfe>
		        //将该消息存放到消息队列
			    rt_mq_send(mq,recvData,sizeof(recvData));
 8010d5e:	2209      	movs	r2, #9
 8010d60:	a902      	add	r1, sp, #8
 8010d62:	4b66      	ldr	r3, [pc, #408]	; (8010efc <thread_rulechoose+0x2b4>)
 8010d64:	6818      	ldr	r0, [r3, #0]
 8010d66:	f7ff fb7c 	bl	8010462 <rt_mq_send>
 8010d6a:	e051      	b.n	8010e10 <thread_rulechoose+0x1c8>

            if(gcRecvBuf[7]==SEM_CODE) //命令字为90，代表“信号量功能”
            {
                if(gcRecvBuf[8]==0x01)//命令参数为01，代表启动该功能
                {
                    printf("接收到信号量功能开启命令，信号量功能模块开启\n");
 8010d6c:	4864      	ldr	r0, [pc, #400]	; (8010f00 <thread_rulechoose+0x2b8>)
 8010d6e:	f7fe f943 	bl	800eff8 <myprintf>
                    rt_thread_detach(thd_bluelight);
 8010d72:	4b58      	ldr	r3, [pc, #352]	; (8010ed4 <thread_rulechoose+0x28c>)
 8010d74:	6818      	ldr	r0, [r3, #0]
 8010d76:	f7fe f9f1 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_greenlight);
 8010d7a:	4b57      	ldr	r3, [pc, #348]	; (8010ed8 <thread_rulechoose+0x290>)
 8010d7c:	6818      	ldr	r0, [r3, #0]
 8010d7e:	f7fe f9ed 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_messagerecv);
 8010d82:	4b56      	ldr	r3, [pc, #344]	; (8010edc <thread_rulechoose+0x294>)
 8010d84:	6818      	ldr	r0, [r3, #0]
 8010d86:	f7fe f9e9 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexRed);
 8010d8a:	4b58      	ldr	r3, [pc, #352]	; (8010eec <thread_rulechoose+0x2a4>)
 8010d8c:	6818      	ldr	r0, [r3, #0]
 8010d8e:	f7fe f9e5 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexGreen);
 8010d92:	4b57      	ldr	r3, [pc, #348]	; (8010ef0 <thread_rulechoose+0x2a8>)
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	f7fe f9e1 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexBlue);
 8010d9a:	4b56      	ldr	r3, [pc, #344]	; (8010ef4 <thread_rulechoose+0x2ac>)
 8010d9c:	6818      	ldr	r0, [r3, #0]
 8010d9e:	f7fe f9dd 	bl	800f15c <rt_thread_detach>



	                rt_thread_startup(thd_SPThread1);//启动信号量线程1
 8010da2:	4b4f      	ldr	r3, [pc, #316]	; (8010ee0 <thread_rulechoose+0x298>)
 8010da4:	6818      	ldr	r0, [r3, #0]
 8010da6:	f7fe faf3 	bl	800f390 <rt_thread_startup>
	                rt_thread_startup(thd_SPThread2);//启动信号量线程2
 8010daa:	4b4e      	ldr	r3, [pc, #312]	; (8010ee4 <thread_rulechoose+0x29c>)
 8010dac:	6818      	ldr	r0, [r3, #0]
 8010dae:	f7fe faef 	bl	800f390 <rt_thread_startup>
	                rt_thread_startup(thd_SPThread3);//启动信号量线程
 8010db2:	4b4d      	ldr	r3, [pc, #308]	; (8010ee8 <thread_rulechoose+0x2a0>)
 8010db4:	6818      	ldr	r0, [r3, #0]
 8010db6:	f7fe faeb 	bl	800f390 <rt_thread_startup>
 8010dba:	e033      	b.n	8010e24 <thread_rulechoose+0x1dc>

                }

            }

            if(gcRecvBuf[7]==MUTEX_CODE) //命令字为90，代表“互斥量功能”
 8010dbc:	4b43      	ldr	r3, [pc, #268]	; (8010ecc <thread_rulechoose+0x284>)
 8010dbe:	79db      	ldrb	r3, [r3, #7]
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	2b93      	cmp	r3, #147	; 0x93
 8010dc4:	d054      	beq.n	8010e70 <thread_rulechoose+0x228>
        printf("进入命令选择线程，等待事件信号\n");
 8010dc6:	484f      	ldr	r0, [pc, #316]	; (8010f04 <thread_rulechoose+0x2bc>)
 8010dc8:	f7fe f916 	bl	800eff8 <myprintf>
        rt_event_recv(EventWord,RULE_CHOOSE_EVENT,RT_EVENT_FLAG_OR|RT_EVENT_FLAG_CLEAR,RT_WAITING_FOREVER,&recvedstate);//等待命令选择线程的事件信号，串口接收完数据后会触发
 8010dcc:	4b4a      	ldr	r3, [pc, #296]	; (8010ef8 <thread_rulechoose+0x2b0>)
 8010dce:	6818      	ldr	r0, [r3, #0]
 8010dd0:	ab05      	add	r3, sp, #20
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd8:	2206      	movs	r2, #6
 8010dda:	2102      	movs	r1, #2
 8010ddc:	f7ff fa57 	bl	801028e <rt_event_recv>
        printf("接收到事件信号\n");
 8010de0:	4849      	ldr	r0, [pc, #292]	; (8010f08 <thread_rulechoose+0x2c0>)
 8010de2:	f7fe f909 	bl	800eff8 <myprintf>
        if(recvedstate==RULE_CHOOSE_EVENT)  //如果接收完成且正确
 8010de6:	9b05      	ldr	r3, [sp, #20]
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d1ec      	bne.n	8010dc6 <thread_rulechoose+0x17e>
            if(gcRecvBuf[3]==CONNECT_CODE)//命令字为66，代表Pc端正和mcu取得连接
 8010dec:	4b37      	ldr	r3, [pc, #220]	; (8010ecc <thread_rulechoose+0x284>)
 8010dee:	78db      	ldrb	r3, [r3, #3]
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	2b66      	cmp	r3, #102	; 0x66
 8010df4:	f43f af2b 	beq.w	8010c4e <thread_rulechoose+0x6>
    		if(gcRecvBuf[7]==EVENT_CODE) //命令字为90，代表“事件功能”
 8010df8:	4b34      	ldr	r3, [pc, #208]	; (8010ecc <thread_rulechoose+0x284>)
 8010dfa:	79db      	ldrb	r3, [r3, #7]
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	2b90      	cmp	r3, #144	; 0x90
 8010e00:	f43f af2a 	beq.w	8010c58 <thread_rulechoose+0x10>
            if(gcRecvBuf[7]==MESSAGE_CODE) //命令字为91，代表“消息队列功能”
 8010e04:	4b31      	ldr	r3, [pc, #196]	; (8010ecc <thread_rulechoose+0x284>)
 8010e06:	79db      	ldrb	r3, [r3, #7]
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	2b91      	cmp	r3, #145	; 0x91
 8010e0c:	f43f af76 	beq.w	8010cfc <thread_rulechoose+0xb4>
            if(gcRecvBuf[7]==SEM_CODE) //命令字为90，代表“信号量功能”
 8010e10:	4b2e      	ldr	r3, [pc, #184]	; (8010ecc <thread_rulechoose+0x284>)
 8010e12:	79db      	ldrb	r3, [r3, #7]
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	2b92      	cmp	r3, #146	; 0x92
 8010e18:	d1d0      	bne.n	8010dbc <thread_rulechoose+0x174>
                if(gcRecvBuf[8]==0x01)//命令参数为01，代表启动该功能
 8010e1a:	4b2c      	ldr	r3, [pc, #176]	; (8010ecc <thread_rulechoose+0x284>)
 8010e1c:	7a1b      	ldrb	r3, [r3, #8]
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	d0a3      	beq.n	8010d6c <thread_rulechoose+0x124>
                if(gcRecvBuf[8]==0x00)//命令参数为00，代表关闭该功能
 8010e24:	4b29      	ldr	r3, [pc, #164]	; (8010ecc <thread_rulechoose+0x284>)
 8010e26:	7a1b      	ldrb	r3, [r3, #8]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d1c7      	bne.n	8010dbc <thread_rulechoose+0x174>
                    printf("接收到信号量功能结束命令，信号量功能模块结束");
 8010e2c:	4837      	ldr	r0, [pc, #220]	; (8010f0c <thread_rulechoose+0x2c4>)
 8010e2e:	f7fe f8e3 	bl	800eff8 <myprintf>
                    rt_thread_detach(thd_SPThread1);	
 8010e32:	4b2b      	ldr	r3, [pc, #172]	; (8010ee0 <thread_rulechoose+0x298>)
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	f7fe f991 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 8010e3a:	4b2a      	ldr	r3, [pc, #168]	; (8010ee4 <thread_rulechoose+0x29c>)
 8010e3c:	6818      	ldr	r0, [r3, #0]
 8010e3e:	f7fe f98d 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 8010e42:	4b29      	ldr	r3, [pc, #164]	; (8010ee8 <thread_rulechoose+0x2a0>)
 8010e44:	6818      	ldr	r0, [r3, #0]
 8010e46:	f7fe f989 	bl	800f15c <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	4611      	mov	r1, r2
 8010e4e:	f240 1009 	movw	r0, #265	; 0x109
 8010e52:	f7fe ffd5 	bl	800fe00 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8010e56:	2201      	movs	r2, #1
 8010e58:	4611      	mov	r1, r2
 8010e5a:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010e5e:	f7fe ffcf 	bl	800fe00 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8010e62:	2201      	movs	r2, #1
 8010e64:	4611      	mov	r1, r2
 8010e66:	f240 1007 	movw	r0, #263	; 0x107
 8010e6a:	f7fe ffc9 	bl	800fe00 <gpio_init>
 8010e6e:	e7a5      	b.n	8010dbc <thread_rulechoose+0x174>
            {
                if(gcRecvBuf[8]==0x01)
 8010e70:	4b16      	ldr	r3, [pc, #88]	; (8010ecc <thread_rulechoose+0x284>)
 8010e72:	7a1b      	ldrb	r3, [r3, #8]
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d04c      	beq.n	8010f14 <thread_rulechoose+0x2cc>

                    rt_thread_startup(thd_mutexRed);//启动红灯线程
	                rt_thread_startup(thd_mutexGreen);//启动绿灯线程
	                rt_thread_startup(thd_mutexBlue);//启动蓝灯线程
                }
                if(gcRecvBuf[8]==0x00)
 8010e7a:	4b14      	ldr	r3, [pc, #80]	; (8010ecc <thread_rulechoose+0x284>)
 8010e7c:	7a1b      	ldrb	r3, [r3, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1a1      	bne.n	8010dc6 <thread_rulechoose+0x17e>
                {
                    printf("接收到互斥量功能关闭命令，互斥量功能模块关闭\n");
 8010e82:	4823      	ldr	r0, [pc, #140]	; (8010f10 <thread_rulechoose+0x2c8>)
 8010e84:	f7fe f8b8 	bl	800eff8 <myprintf>
                    rt_thread_detach(thd_mutexRed);
 8010e88:	4b18      	ldr	r3, [pc, #96]	; (8010eec <thread_rulechoose+0x2a4>)
 8010e8a:	6818      	ldr	r0, [r3, #0]
 8010e8c:	f7fe f966 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexGreen);
 8010e90:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <thread_rulechoose+0x2a8>)
 8010e92:	6818      	ldr	r0, [r3, #0]
 8010e94:	f7fe f962 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_mutexBlue);
 8010e98:	4b16      	ldr	r3, [pc, #88]	; (8010ef4 <thread_rulechoose+0x2ac>)
 8010e9a:	6818      	ldr	r0, [r3, #0]
 8010e9c:	f7fe f95e 	bl	800f15c <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	f240 1009 	movw	r0, #265	; 0x109
 8010ea8:	f7fe ffaa 	bl	800fe00 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8010eac:	2201      	movs	r2, #1
 8010eae:	4611      	mov	r1, r2
 8010eb0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010eb4:	f7fe ffa4 	bl	800fe00 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8010eb8:	2201      	movs	r2, #1
 8010eba:	4611      	mov	r1, r2
 8010ebc:	f240 1007 	movw	r0, #263	; 0x107
 8010ec0:	f7fe ff9e 	bl	800fe00 <gpio_init>
 8010ec4:	e77f      	b.n	8010dc6 <thread_rulechoose+0x17e>
 8010ec6:	bf00      	nop
 8010ec8:	08012414 	.word	0x08012414
 8010ecc:	2000734c 	.word	0x2000734c
 8010ed0:	08012424 	.word	0x08012424
 8010ed4:	20007328 	.word	0x20007328
 8010ed8:	2000731c 	.word	0x2000731c
 8010edc:	20007334 	.word	0x20007334
 8010ee0:	20007324 	.word	0x20007324
 8010ee4:	2000733c 	.word	0x2000733c
 8010ee8:	20007348 	.word	0x20007348
 8010eec:	2000732c 	.word	0x2000732c
 8010ef0:	20007320 	.word	0x20007320
 8010ef4:	20007b4c 	.word	0x20007b4c
 8010ef8:	20007340 	.word	0x20007340
 8010efc:	20007338 	.word	0x20007338
 8010f00:	08012450 	.word	0x08012450
 8010f04:	080123e4 	.word	0x080123e4
 8010f08:	08012404 	.word	0x08012404
 8010f0c:	08012480 	.word	0x08012480
 8010f10:	080124e0 	.word	0x080124e0
                    printf("接收到互斥量功能开启命令，互斥量功能模块开启\n");
 8010f14:	4813      	ldr	r0, [pc, #76]	; (8010f64 <thread_rulechoose+0x31c>)
 8010f16:	f7fe f86f 	bl	800eff8 <myprintf>
                    rt_thread_detach(thd_bluelight);
 8010f1a:	4b13      	ldr	r3, [pc, #76]	; (8010f68 <thread_rulechoose+0x320>)
 8010f1c:	6818      	ldr	r0, [r3, #0]
 8010f1e:	f7fe f91d 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_greenlight);
 8010f22:	4b12      	ldr	r3, [pc, #72]	; (8010f6c <thread_rulechoose+0x324>)
 8010f24:	6818      	ldr	r0, [r3, #0]
 8010f26:	f7fe f919 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_messagerecv);
 8010f2a:	4b11      	ldr	r3, [pc, #68]	; (8010f70 <thread_rulechoose+0x328>)
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f7fe f915 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread1);	
 8010f32:	4b10      	ldr	r3, [pc, #64]	; (8010f74 <thread_rulechoose+0x32c>)
 8010f34:	6818      	ldr	r0, [r3, #0]
 8010f36:	f7fe f911 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 8010f3a:	4b0f      	ldr	r3, [pc, #60]	; (8010f78 <thread_rulechoose+0x330>)
 8010f3c:	6818      	ldr	r0, [r3, #0]
 8010f3e:	f7fe f90d 	bl	800f15c <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 8010f42:	4b0e      	ldr	r3, [pc, #56]	; (8010f7c <thread_rulechoose+0x334>)
 8010f44:	6818      	ldr	r0, [r3, #0]
 8010f46:	f7fe f909 	bl	800f15c <rt_thread_detach>
                    rt_thread_startup(thd_mutexRed);//启动红灯线程
 8010f4a:	4b0d      	ldr	r3, [pc, #52]	; (8010f80 <thread_rulechoose+0x338>)
 8010f4c:	6818      	ldr	r0, [r3, #0]
 8010f4e:	f7fe fa1f 	bl	800f390 <rt_thread_startup>
	                rt_thread_startup(thd_mutexGreen);//启动绿灯线程
 8010f52:	4b0c      	ldr	r3, [pc, #48]	; (8010f84 <thread_rulechoose+0x33c>)
 8010f54:	6818      	ldr	r0, [r3, #0]
 8010f56:	f7fe fa1b 	bl	800f390 <rt_thread_startup>
	                rt_thread_startup(thd_mutexBlue);//启动蓝灯线程
 8010f5a:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <thread_rulechoose+0x340>)
 8010f5c:	6818      	ldr	r0, [r3, #0]
 8010f5e:	f7fe fa17 	bl	800f390 <rt_thread_startup>
 8010f62:	e78a      	b.n	8010e7a <thread_rulechoose+0x232>
 8010f64:	080124b0 	.word	0x080124b0
 8010f68:	20007328 	.word	0x20007328
 8010f6c:	2000731c 	.word	0x2000731c
 8010f70:	20007334 	.word	0x20007334
 8010f74:	20007324 	.word	0x20007324
 8010f78:	2000733c 	.word	0x2000733c
 8010f7c:	20007348 	.word	0x20007348
 8010f80:	2000732c 	.word	0x2000732c
 8010f84:	20007320 	.word	0x20007320
 8010f88:	20007b4c 	.word	0x20007b4c

08010f8c <rt_tick_get>:
 */
rt_tick_t rt_tick_get(void)
{
    /* return the global tick */
    return rt_tick;
}
 8010f8c:	4b01      	ldr	r3, [pc, #4]	; (8010f94 <rt_tick_get+0x8>)
 8010f8e:	6818      	ldr	r0, [r3, #0]
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	2000414c 	.word	0x2000414c

08010f98 <rt_tick_increase>:
/**
 * This function will notify kernel there is one tick passed. Normally,
 * this function is invoked by clock ISR.
 */
void rt_tick_increase(void)
{
 8010f98:	b508      	push	{r3, lr}
    struct rt_thread *thread;

    /* increase the global tick */
    ++ rt_tick;
 8010f9a:	4a09      	ldr	r2, [pc, #36]	; (8010fc0 <rt_tick_increase+0x28>)
 8010f9c:	6813      	ldr	r3, [r2, #0]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	6013      	str	r3, [r2, #0]

    /* check time slice */
    thread = rt_thread_self();
 8010fa2:	f7fe f8d5 	bl	800f150 <rt_thread_self>

    -- thread->remaining_tick;
 8010fa6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8010fa8:	3b01      	subs	r3, #1
 8010faa:	6483      	str	r3, [r0, #72]	; 0x48
    if (thread->remaining_tick == 0)
 8010fac:	b113      	cbz	r3, 8010fb4 <rt_tick_increase+0x1c>
        /* yield */
        rt_thread_yield();
    }

    /* check timer */
    rt_timer_check();
 8010fae:	f7fe fb19 	bl	800f5e4 <rt_timer_check>
}
 8010fb2:	bd08      	pop	{r3, pc}
        thread->remaining_tick = thread->init_tick;
 8010fb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010fb6:	6483      	str	r3, [r0, #72]	; 0x48
        rt_thread_yield();
 8010fb8:	f7fe f948 	bl	800f24c <rt_thread_yield>
 8010fbc:	e7f7      	b.n	8010fae <rt_tick_increase+0x16>
 8010fbe:	bf00      	nop
 8010fc0:	2000414c 	.word	0x2000414c

08010fc4 <rt_system_scheduler_init>:
 */
void rt_system_scheduler_init(void)
{
    register rt_base_t offset;

    rt_scheduler_lock_nest = 0;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4a0c      	ldr	r2, [pc, #48]	; (8010ff8 <rt_system_scheduler_init+0x34>)
 8010fc8:	8013      	strh	r3, [r2, #0]

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
 8010fca:	e006      	b.n	8010fda <rt_system_scheduler_init+0x16>
    {
        rt_list_init(&rt_thread_priority_table[offset]);
 8010fcc:	490b      	ldr	r1, [pc, #44]	; (8010ffc <rt_system_scheduler_init+0x38>)
 8010fce:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    l->next = l->prev = l;
 8010fd2:	6052      	str	r2, [r2, #4]
 8010fd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
 8010fd8:	3301      	adds	r3, #1
 8010fda:	2b1f      	cmp	r3, #31
 8010fdc:	ddf6      	ble.n	8010fcc <rt_system_scheduler_init+0x8>
    }

    rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
 8010fde:	4b08      	ldr	r3, [pc, #32]	; (8011000 <rt_system_scheduler_init+0x3c>)
 8010fe0:	221f      	movs	r2, #31
 8010fe2:	701a      	strb	r2, [r3, #0]
    rt_current_thread = RT_NULL;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	4a07      	ldr	r2, [pc, #28]	; (8011004 <rt_system_scheduler_init+0x40>)
 8010fe8:	6013      	str	r3, [r2, #0]

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
 8010fea:	4a07      	ldr	r2, [pc, #28]	; (8011008 <rt_system_scheduler_init+0x44>)
 8010fec:	6013      	str	r3, [r2, #0]
 8010fee:	4b07      	ldr	r3, [pc, #28]	; (801100c <rt_system_scheduler_init+0x48>)
 8010ff0:	605b      	str	r3, [r3, #4]
 8010ff2:	601b      	str	r3, [r3, #0]
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif

    /* initialize thread defunct */
    rt_list_init(&rt_thread_defunct);
}
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	20004150 	.word	0x20004150
 8010ffc:	20007b50 	.word	0x20007b50
 8011000:	20007c50 	.word	0x20007c50
 8011004:	20007c54 	.word	0x20007c54
 8011008:	20007c58 	.word	0x20007c58
 801100c:	20007c5c 	.word	0x20007c5c

08011010 <rt_system_scheduler_start>:
 * @ingroup SystemInit
 * This function will startup scheduler. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
 8011010:	b508      	push	{r3, lr}
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
 8011012:	4b08      	ldr	r3, [pc, #32]	; (8011034 <rt_system_scheduler_start+0x24>)
 8011014:	6818      	ldr	r0, [r3, #0]
 8011016:	f7ff fdf5 	bl	8010c04 <__rt_ffs>
 801101a:	3801      	subs	r0, #1
#endif

    /* get switch to thread */
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
 801101c:	4b06      	ldr	r3, [pc, #24]	; (8011038 <rt_system_scheduler_start+0x28>)
 801101e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8011022:	f1a0 0214 	sub.w	r2, r0, #20
                              struct rt_thread,
                              tlist);

    rt_current_thread = to_thread;
 8011026:	4b05      	ldr	r3, [pc, #20]	; (801103c <rt_system_scheduler_start+0x2c>)
 8011028:	601a      	str	r2, [r3, #0]

    /* switch to new thread */
    rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
 801102a:	3008      	adds	r0, #8
 801102c:	f7fc fc55 	bl	800d8da <rt_hw_context_switch_to>

    /* never come back */
}
 8011030:	bd08      	pop	{r3, pc}
 8011032:	bf00      	nop
 8011034:	20007c58 	.word	0x20007c58
 8011038:	20007b50 	.word	0x20007b50
 801103c:	20007c54 	.word	0x20007c54

08011040 <rt_schedule>:
/**
 * This function will perform one schedule. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_schedule(void)
{
 8011040:	b538      	push	{r3, r4, r5, lr}
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8011042:	f7fc fbfd 	bl	800d840 <rt_hw_interrupt_disable>
 8011046:	4604      	mov	r4, r0

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
 8011048:	4b15      	ldr	r3, [pc, #84]	; (80110a0 <rt_schedule+0x60>)
 801104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801104e:	b9cb      	cbnz	r3, 8011084 <rt_schedule+0x44>
    {
        register rt_ubase_t highest_ready_priority;

#if RT_THREAD_PRIORITY_MAX <= 32
        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
 8011050:	4b14      	ldr	r3, [pc, #80]	; (80110a4 <rt_schedule+0x64>)
 8011052:	6818      	ldr	r0, [r3, #0]
 8011054:	f7ff fdd6 	bl	8010c04 <__rt_ffs>
 8011058:	3801      	subs	r0, #1
        number = __rt_ffs(rt_thread_ready_priority_group) - 1;
        highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#endif

        /* get switch to thread */
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
 801105a:	4b13      	ldr	r3, [pc, #76]	; (80110a8 <rt_schedule+0x68>)
 801105c:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 8011060:	f1a1 0214 	sub.w	r2, r1, #20
                                  struct rt_thread,
                                  tlist);

        /* if the destination thread is not the same as current thread */
        if (to_thread != rt_current_thread)
 8011064:	4b11      	ldr	r3, [pc, #68]	; (80110ac <rt_schedule+0x6c>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	4293      	cmp	r3, r2
 801106a:	d00b      	beq.n	8011084 <rt_schedule+0x44>
        {
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
 801106c:	4d10      	ldr	r5, [pc, #64]	; (80110b0 <rt_schedule+0x70>)
 801106e:	7028      	strb	r0, [r5, #0]
            from_thread         = rt_current_thread;
            rt_current_thread   = to_thread;
 8011070:	480e      	ldr	r0, [pc, #56]	; (80110ac <rt_schedule+0x6c>)
 8011072:	6002      	str	r2, [r0, #0]

#ifdef RT_USING_OVERFLOW_CHECK
            _rt_scheduler_stack_check(to_thread);
#endif

            if (rt_interrupt_nest == 0)
 8011074:	4a0f      	ldr	r2, [pc, #60]	; (80110b4 <rt_schedule+0x74>)
 8011076:	7812      	ldrb	r2, [r2, #0]
 8011078:	b142      	cbz	r2, 801108c <rt_schedule+0x4c>
            }
            else
            {
                RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));

                rt_hw_context_switch_interrupt((rt_uint32_t)&from_thread->sp,
 801107a:	3108      	adds	r1, #8
 801107c:	f103 001c 	add.w	r0, r3, #28
 8011080:	f7fc fbe5 	bl	800d84e <rt_hw_context_switch>
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 8011084:	4620      	mov	r0, r4
 8011086:	f7fc fbdf 	bl	800d848 <rt_hw_interrupt_enable>
}
 801108a:	bd38      	pop	{r3, r4, r5, pc}
                rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
 801108c:	3108      	adds	r1, #8
 801108e:	f103 001c 	add.w	r0, r3, #28
 8011092:	f7fc fbdc 	bl	800d84e <rt_hw_context_switch>
                    rt_hw_interrupt_enable(level);
 8011096:	4620      	mov	r0, r4
 8011098:	f7fc fbd6 	bl	800d848 <rt_hw_interrupt_enable>
                return ;
 801109c:	e7f5      	b.n	801108a <rt_schedule+0x4a>
 801109e:	bf00      	nop
 80110a0:	20004150 	.word	0x20004150
 80110a4:	20007c58 	.word	0x20007c58
 80110a8:	20007b50 	.word	0x20007b50
 80110ac:	20007c54 	.word	0x20007c54
 80110b0:	20007c50 	.word	0x20007c50
 80110b4:	20007c68 	.word	0x20007c68

080110b8 <rt_schedule_insert_thread>:
 *
 * @param thread the thread to be inserted
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_insert_thread(struct rt_thread *thread)
{
 80110b8:	b510      	push	{r4, lr}
 80110ba:	4604      	mov	r4, r0
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 80110bc:	f7fc fbc0 	bl	800d840 <rt_hw_interrupt_disable>

    /* change stat */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
 80110c0:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 80110c4:	f023 030f 	bic.w	r3, r3, #15
 80110c8:	f043 0301 	orr.w	r3, r3, #1
 80110cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 80110d0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80110d4:	4b09      	ldr	r3, [pc, #36]	; (80110fc <rt_schedule_insert_thread+0x44>)
 80110d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110da:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 80110de:	6859      	ldr	r1, [r3, #4]
 80110e0:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 80110e2:	6859      	ldr	r1, [r3, #4]
 80110e4:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 80110e6:	605a      	str	r2, [r3, #4]
    n->next = l;
 80110e8:	6163      	str	r3, [r4, #20]
#endif

#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif
    rt_thread_ready_priority_group |= thread->number_mask;
 80110ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80110ec:	4a04      	ldr	r2, [pc, #16]	; (8011100 <rt_schedule_insert_thread+0x48>)
 80110ee:	6813      	ldr	r3, [r2, #0]
 80110f0:	430b      	orrs	r3, r1
 80110f2:	6013      	str	r3, [r2, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 80110f4:	f7fc fba8 	bl	800d848 <rt_hw_interrupt_enable>
}
 80110f8:	bd10      	pop	{r4, pc}
 80110fa:	bf00      	nop
 80110fc:	20007b50 	.word	0x20007b50
 8011100:	20007c58 	.word	0x20007c58

08011104 <rt_schedule_remove_thread>:
 * @param thread the thread to be removed
 *
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_remove_thread(struct rt_thread *thread)
{
 8011104:	b510      	push	{r4, lr}
 8011106:	4604      	mov	r4, r0
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8011108:	f7fc fb9a 	bl	800d840 <rt_hw_interrupt_disable>
                  thread->number_mask,
                  thread->high_mask));
#endif

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
 801110c:	f104 0314 	add.w	r3, r4, #20
    n->next->prev = n->prev;
 8011110:	6962      	ldr	r2, [r4, #20]
 8011112:	69a1      	ldr	r1, [r4, #24]
 8011114:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 8011116:	69a2      	ldr	r2, [r4, #24]
 8011118:	6961      	ldr	r1, [r4, #20]
 801111a:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 801111c:	61a3      	str	r3, [r4, #24]
 801111e:	6163      	str	r3, [r4, #20]
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
 8011120:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8011124:	4b08      	ldr	r3, [pc, #32]	; (8011148 <rt_schedule_remove_thread+0x44>)
 8011126:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    return l->next == l;
 801112a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801112e:	4299      	cmp	r1, r3
 8011130:	d002      	beq.n	8011138 <rt_schedule_remove_thread+0x34>
        rt_thread_ready_priority_group &= ~thread->number_mask;
#endif
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 8011132:	f7fc fb89 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011136:	bd10      	pop	{r4, pc}
        rt_thread_ready_priority_group &= ~thread->number_mask;
 8011138:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801113a:	4a04      	ldr	r2, [pc, #16]	; (801114c <rt_schedule_remove_thread+0x48>)
 801113c:	6813      	ldr	r3, [r2, #0]
 801113e:	ea23 0301 	bic.w	r3, r3, r1
 8011142:	6013      	str	r3, [r2, #0]
 8011144:	e7f5      	b.n	8011132 <rt_schedule_remove_thread+0x2e>
 8011146:	bf00      	nop
 8011148:	20007b50 	.word	0x20007b50
 801114c:	20007c58 	.word	0x20007c58

08011150 <rt_enter_critical>:

/**
 * This function will lock the thread scheduler.
 */
void rt_enter_critical(void)
{
 8011150:	b508      	push	{r3, lr}
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8011152:	f7fc fb75 	bl	800d840 <rt_hw_interrupt_disable>

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
 8011156:	4a03      	ldr	r2, [pc, #12]	; (8011164 <rt_enter_critical+0x14>)
 8011158:	8813      	ldrh	r3, [r2, #0]
 801115a:	3301      	adds	r3, #1
 801115c:	8013      	strh	r3, [r2, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 801115e:	f7fc fb73 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011162:	bd08      	pop	{r3, pc}
 8011164:	20004150 	.word	0x20004150

08011168 <rt_exit_critical>:

/**
 * This function will unlock the thread scheduler.
 */
void rt_exit_critical(void)
{
 8011168:	b508      	push	{r3, lr}
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 801116a:	f7fc fb69 	bl	800d840 <rt_hw_interrupt_disable>

    rt_scheduler_lock_nest --;
 801116e:	4a0b      	ldr	r2, [pc, #44]	; (801119c <rt_exit_critical+0x34>)
 8011170:	8813      	ldrh	r3, [r2, #0]
 8011172:	3b01      	subs	r3, #1
 8011174:	b21b      	sxth	r3, r3
 8011176:	8013      	strh	r3, [r2, #0]
    if (rt_scheduler_lock_nest <= 0)
 8011178:	2b00      	cmp	r3, #0
 801117a:	dd02      	ble.n	8011182 <rt_exit_critical+0x1a>
        }
    }
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
 801117c:	f7fc fb64 	bl	800d848 <rt_hw_interrupt_enable>
    }
}
 8011180:	bd08      	pop	{r3, pc}
        rt_scheduler_lock_nest = 0;
 8011182:	4613      	mov	r3, r2
 8011184:	2200      	movs	r2, #0
 8011186:	801a      	strh	r2, [r3, #0]
        rt_hw_interrupt_enable(level);
 8011188:	f7fc fb5e 	bl	800d848 <rt_hw_interrupt_enable>
        if (rt_current_thread)
 801118c:	4b04      	ldr	r3, [pc, #16]	; (80111a0 <rt_exit_critical+0x38>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d0f5      	beq.n	8011180 <rt_exit_critical+0x18>
            rt_schedule();
 8011194:	f7ff ff54 	bl	8011040 <rt_schedule>
 8011198:	e7f2      	b.n	8011180 <rt_exit_critical+0x18>
 801119a:	bf00      	nop
 801119c:	20004150 	.word	0x20004150
 80111a0:	20007c54 	.word	0x20007c54

080111a4 <_SysTick_Config>:
// core clock.
extern uint32_t SystemCoreClock;

static uint32_t _SysTick_Config(rt_uint32_t ticks)
{
    if ((ticks - 1) > 0xFFFFFF)
 80111a4:	3801      	subs	r0, #1
 80111a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80111aa:	d20d      	bcs.n	80111c8 <_SysTick_Config+0x24>
    {
        return 1;
    }
    
    _SYSTICK_LOAD = ticks - 1; 
 80111ac:	4b07      	ldr	r3, [pc, #28]	; (80111cc <_SysTick_Config+0x28>)
 80111ae:	6018      	str	r0, [r3, #0]
    _SYSTICK_PRI = 0xFF;
 80111b0:	f603 530f 	addw	r3, r3, #3343	; 0xd0f
 80111b4:	22ff      	movs	r2, #255	; 0xff
 80111b6:	701a      	strb	r2, [r3, #0]
    _SYSTICK_VAL  = 0;
 80111b8:	2000      	movs	r0, #0
 80111ba:	f6a3 530b 	subw	r3, r3, #3339	; 0xd0b
 80111be:	6018      	str	r0, [r3, #0]
    _SYSTICK_CTRL = 0x07;  
 80111c0:	3b08      	subs	r3, #8
 80111c2:	2207      	movs	r2, #7
 80111c4:	601a      	str	r2, [r3, #0]
    
    return 0;
 80111c6:	4770      	bx	lr
        return 1;
 80111c8:	2001      	movs	r0, #1
}
 80111ca:	4770      	bx	lr
 80111cc:	e000e014 	.word	0xe000e014

080111d0 <rt_heap_begin_get>:
#define RT_HEAP_SIZE 3072
static uint32_t rt_heap[RT_HEAP_SIZE];     // heap default size: 4K(1024 * 4)
RT_WEAK void *rt_heap_begin_get(void)
{
    return rt_heap;
}
 80111d0:	4800      	ldr	r0, [pc, #0]	; (80111d4 <rt_heap_begin_get+0x4>)
 80111d2:	4770      	bx	lr
 80111d4:	20004154 	.word	0x20004154

080111d8 <rt_heap_end_get>:

RT_WEAK void *rt_heap_end_get(void)
{
    return rt_heap + RT_HEAP_SIZE;
}
 80111d8:	4800      	ldr	r0, [pc, #0]	; (80111dc <rt_heap_end_get+0x4>)
 80111da:	4770      	bx	lr
 80111dc:	20007154 	.word	0x20007154

080111e0 <rt_hw_board_init>:

/**
 * This function will initial your board.
 */
void rt_hw_board_init()
{
 80111e0:	b510      	push	{r4, lr}
    //(1)初始化系统时钟
    SystemCoreClockUpdate();
 80111e2:	f7fe fa5b 	bl	800f69c <SystemCoreClockUpdate>
    //（2）初始化SysTick，RT_TICK_PER_SECOND为rtconfig.h设置的滴答频率，默认1000
    _SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);
 80111e6:	4b0a      	ldr	r3, [pc, #40]	; (8011210 <rt_hw_board_init+0x30>)
 80111e8:	6818      	ldr	r0, [r3, #0]
 80111ea:	4b0a      	ldr	r3, [pc, #40]	; (8011214 <rt_hw_board_init+0x34>)
 80111ec:	fba3 3000 	umull	r3, r0, r3, r0
 80111f0:	0980      	lsrs	r0, r0, #6
 80111f2:	f7ff ffd7 	bl	80111a4 <_SysTick_Config>

    //硬件BSP初始化统统放在这里，比如LED，串口，LCD等
#ifdef RT_USING_COMPONENTS_INIT  //调用组件初始化函数
    rt_components_board_init();
 80111f6:	f7fd f9e3 	bl	800e5c0 <rt_components_board_init>
#endif
//如果同时定义了RT_USING_USER_MAIN和 RT_USING_HEAP这两个宏，表示RT-Thread里面创建内核对象时使用动态内存分配方案。
#if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
    //（3）初始化堆空间
    rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
 80111fa:	f7ff ffe9 	bl	80111d0 <rt_heap_begin_get>
 80111fe:	4604      	mov	r4, r0
 8011200:	f7ff ffea 	bl	80111d8 <rt_heap_end_get>
 8011204:	4601      	mov	r1, r0
 8011206:	4620      	mov	r0, r4
 8011208:	f000 fc98 	bl	8011b3c <rt_system_heap_init>
#endif

}
 801120c:	bd10      	pop	{r4, pc}
 801120e:	bf00      	nop
 8011210:	20004000 	.word	0x20004000
 8011214:	10624dd3 	.word	0x10624dd3

08011218 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8011218:	b508      	push	{r3, lr}
    /* enter interrupt */
    rt_interrupt_enter();
 801121a:	f000 fdb1 	bl	8011d80 <rt_interrupt_enter>

    rt_tick_increase();
 801121e:	f7ff febb 	bl	8010f98 <rt_tick_increase>

    /* leave interrupt */
    rt_interrupt_leave();
 8011222:	f000 fdbb 	bl	8011d9c <rt_interrupt_leave>
}
 8011226:	bd08      	pop	{r3, pc}

08011228 <thread_SPThread1>:
//参数说明：无
//功能概要：抢夺信号量
//内部调用：无
//======================================================================
void thread_SPThread1()
{
 8011228:	b510      	push	{r4, lr}

    //（1）======申明局部变量===========================================
    int SPcount;      //记录信号量的个数
    printf("第一次进入线程1！\n");
 801122a:	481f      	ldr	r0, [pc, #124]	; (80112a8 <thread_SPThread1+0x80>)
 801122c:	f7fd fee4 	bl	800eff8 <myprintf>
	gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011230:	2201      	movs	r2, #1
 8011232:	4611      	mov	r1, r2
 8011234:	f240 1009 	movw	r0, #265	; 0x109
 8011238:	f7fe fde2 	bl	800fe00 <gpio_init>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 801123c:	2201      	movs	r2, #1
 801123e:	4611      	mov	r1, r2
 8011240:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011244:	f7fe fddc 	bl	800fe00 <gpio_init>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011248:	2201      	movs	r2, #1
 801124a:	4611      	mov	r1, r2
 801124c:	f240 1007 	movw	r0, #263	; 0x107
 8011250:	f7fe fdd6 	bl	800fe00 <gpio_init>
 8011254:	e014      	b.n	8011280 <thread_SPThread1+0x58>
		if(SPcount==0)
		{
			printf("SP为0，线程1等待\n");
		}
		//获取一个信号量
		rt_sem_take(SP,RT_WAITING_FOREVER);
 8011256:	4c15      	ldr	r4, [pc, #84]	; (80112ac <thread_SPThread1+0x84>)
 8011258:	f04f 31ff 	mov.w	r1, #4294967295
 801125c:	6820      	ldr	r0, [r4, #0]
 801125e:	f7fe fe4c 	bl	800fefa <rt_sem_take>
		SPcount=SP->value;
 8011262:	6823      	ldr	r3, [r4, #0]
		printf("线程1获取1个SP，SP还剩%d\n",SPcount);
 8011264:	8b99      	ldrh	r1, [r3, #28]
 8011266:	4812      	ldr	r0, [pc, #72]	; (80112b0 <thread_SPThread1+0x88>)
 8011268:	f7fd fec6 	bl	800eff8 <myprintf>
		delay_ms(5000);
 801126c:	f241 3088 	movw	r0, #5000	; 0x1388
 8011270:	f7fe f866 	bl	800f340 <rt_thread_delay>
		//释放一个信号量
		rt_sem_release(SP);
 8011274:	6820      	ldr	r0, [r4, #0]
 8011276:	f7fe fea6 	bl	800ffc6 <rt_sem_release>
        printf("线程1成功释放1个SP\n");
 801127a:	480e      	ldr	r0, [pc, #56]	; (80112b4 <thread_SPThread1+0x8c>)
 801127c:	f7fd febc 	bl	800eff8 <myprintf>
    	delay_ms(1000);    //延时1秒
 8011280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011284:	f7fe f85c 	bl	800f340 <rt_thread_delay>
    	SPcount=SP->value;  //获取信号量的值
 8011288:	4b08      	ldr	r3, [pc, #32]	; (80112ac <thread_SPThread1+0x84>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	8b9c      	ldrh	r4, [r3, #28]
    	printf("当前SP为%d\n",SPcount);
 801128e:	4621      	mov	r1, r4
 8011290:	4809      	ldr	r0, [pc, #36]	; (80112b8 <thread_SPThread1+0x90>)
 8011292:	f7fd feb1 	bl	800eff8 <myprintf>
    	printf("线程1请求1个SP\n");
 8011296:	4809      	ldr	r0, [pc, #36]	; (80112bc <thread_SPThread1+0x94>)
 8011298:	f7fd feae 	bl	800eff8 <myprintf>
		if(SPcount==0)
 801129c:	2c00      	cmp	r4, #0
 801129e:	d1da      	bne.n	8011256 <thread_SPThread1+0x2e>
			printf("SP为0，线程1等待\n");
 80112a0:	4807      	ldr	r0, [pc, #28]	; (80112c0 <thread_SPThread1+0x98>)
 80112a2:	f7fd fea9 	bl	800eff8 <myprintf>
 80112a6:	e7d6      	b.n	8011256 <thread_SPThread1+0x2e>
 80112a8:	08012510 	.word	0x08012510
 80112ac:	20007318 	.word	0x20007318
 80112b0:	08012548 	.word	0x08012548
 80112b4:	08012564 	.word	0x08012564
 80112b8:	0801214c 	.word	0x0801214c
 80112bc:	08012524 	.word	0x08012524
 80112c0:	08012534 	.word	0x08012534

080112c4 <Vectors_Init>:
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
 80112c4:	b500      	push	{lr}
 80112c6:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数1扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
 80112ca:	2118      	movs	r1, #24
 80112cc:	207f      	movs	r0, #127	; 0x7f
 80112ce:	f7fe fc98 	bl	800fc02 <flash_isempty>
 80112d2:	bb20      	cbnz	r0, 801131e <Vectors_Init+0x5a>
    }
    //（2）继承BIOS的串口中断
    void ** bios=(void *)MCU_FLASH_ADDR_START;   //向量表起始地址
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
 80112d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80112d8:	4914      	ldr	r1, [pc, #80]	; (801132c <Vectors_Init+0x68>)
 80112da:	4668      	mov	r0, sp
 80112dc:	f7fe fc8d 	bl	800fbfa <flash_read_physical>
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
 80112e0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80112e2:	4b13      	ldr	r3, [pc, #76]	; (8011330 <Vectors_Init+0x6c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d00b      	beq.n	8011302 <Vectors_Init+0x3e>
    {
        //改变User中断向量表中BIOS_UART中断向量
        flash_erase(GEC_USER_SECTOR_START);
 80112ea:	201a      	movs	r0, #26
 80112ec:	f7fe fc50 	bl	800fb90 <flash_erase>
        //改USER中断向量表的BIOS程序写入串口的中断处理程序地址
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
 80112f0:	4b0f      	ldr	r3, [pc, #60]	; (8011330 <Vectors_Init+0x6c>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	9337      	str	r3, [sp, #220]	; 0xdc
        user[BIOS_SVC_IRQn]=(uint32_t)bios[BIOS_SVC_IRQn];
		user[BIOS_PendSV_Handler]=(uint32_t)bios[BIOS_PendSV_Handler];
		user[BIOS_SysTick_Handler]=(uint32_t)bios[BIOS_SysTick_Handler];
    #endif
		
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
 80112f6:	466a      	mov	r2, sp
 80112f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80112fc:	480b      	ldr	r0, [pc, #44]	; (801132c <Vectors_Init+0x68>)
 80112fe:	f7fe fd3f 	bl	800fd80 <flash_write_physical>
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
 8011302:	4b0c      	ldr	r3, [pc, #48]	; (8011334 <Vectors_Init+0x70>)
 8011304:	4a09      	ldr	r2, [pc, #36]	; (801132c <Vectors_Init+0x68>)
 8011306:	609a      	str	r2, [r3, #8]
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
 8011308:	4b0b      	ldr	r3, [pc, #44]	; (8011338 <Vectors_Init+0x74>)
 801130a:	f5a2 5260 	sub.w	r2, r2, #14336	; 0x3800
 801130e:	601a      	str	r2, [r3, #0]
                   GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示
    printf("  【User提示】：将进入User的main()执行...\r\n");
 8011310:	480a      	ldr	r0, [pc, #40]	; (801133c <Vectors_Init+0x78>)
 8011312:	f7fd fe71 	bl	800eff8 <myprintf>
    
    #endif
}
 8011316:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 801131a:	f85d fb04 	ldr.w	pc, [sp], #4
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
 801131e:	4a08      	ldr	r2, [pc, #32]	; (8011340 <Vectors_Init+0x7c>)
 8011320:	2118      	movs	r1, #24
 8011322:	4808      	ldr	r0, [pc, #32]	; (8011344 <Vectors_Init+0x80>)
 8011324:	f7fe fd2c 	bl	800fd80 <flash_write_physical>
 8011328:	e7d4      	b.n	80112d4 <Vectors_Init+0x10>
 801132a:	bf00      	nop
 801132c:	0800d000 	.word	0x0800d000
 8011330:	080000dc 	.word	0x080000dc
 8011334:	e000ed00 	.word	0xe000ed00
 8011338:	20007c64 	.word	0x20007c64
 801133c:	08012594 	.word	0x08012594
 8011340:	08012578 	.word	0x08012578
 8011344:	0803f800 	.word	0x0803f800

08011348 <uart_is_uartNo>:
//参数说明：串口号uartNo  :UART_1、UART_2、UART_3
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    if(uartNo < UART_1 || uartNo > UART_3)
 8011348:	3801      	subs	r0, #1
 801134a:	b2c0      	uxtb	r0, r0
 801134c:	2802      	cmp	r0, #2
 801134e:	d801      	bhi.n	8011354 <uart_is_uartNo+0xc>
        return 0;
    else
        return 1;
 8011350:	2001      	movs	r0, #1
}
 8011352:	4770      	bx	lr
        return 0;
 8011354:	2000      	movs	r0, #0
 8011356:	4770      	bx	lr

08011358 <uart_init>:
{
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4604      	mov	r4, r0
 801135c:	460d      	mov	r5, r1
	if(!uart_is_uartNo(uartNo))
 801135e:	f7ff fff3 	bl	8011348 <uart_is_uartNo>
 8011362:	2800      	cmp	r0, #0
 8011364:	d03c      	beq.n	80113e0 <uart_init+0x88>
	switch(uartNo)
 8011366:	2c02      	cmp	r4, #2
 8011368:	d057      	beq.n	801141a <uart_init+0xc2>
 801136a:	2c03      	cmp	r4, #3
 801136c:	d071      	beq.n	8011452 <uart_init+0xfa>
 801136e:	2c01      	cmp	r4, #1
 8011370:	d037      	beq.n	80113e2 <uart_init+0x8a>
	USART_ARR[uartNo-1]->CR1 &= ~USART_CR1_UE;
 8011372:	1e60      	subs	r0, r4, #1
 8011374:	4b47      	ldr	r3, [pc, #284]	; (8011494 <uart_init+0x13c>)
 8011376:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 801137a:	680a      	ldr	r2, [r1, #0]
 801137c:	f022 0201 	bic.w	r2, r2, #1
 8011380:	600a      	str	r2, [r1, #0]
	USART_ARR[uartNo-1]->CR1 &= ~(USART_CR1_TE_Msk|USART_CR1_RE_Msk);
 8011382:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8011386:	680a      	ldr	r2, [r1, #0]
 8011388:	f022 020c 	bic.w	r2, r2, #12
 801138c:	600a      	str	r2, [r1, #0]
	if((USART_ARR[uartNo-1]->CR1 & USART_CR1_OVER8_Msk) == USART_CR1_OVER8_Msk)
 801138e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8011398:	d076      	beq.n	8011488 <uart_init+0x130>
	    usartdiv = (uint16_t)((SystemCoreClock/baud_rate)*2);
 801139a:	4a3f      	ldr	r2, [pc, #252]	; (8011498 <uart_init+0x140>)
 801139c:	6811      	ldr	r1, [r2, #0]
 801139e:	fbb1 f1f5 	udiv	r1, r1, r5
 80113a2:	b289      	uxth	r1, r1
 80113a4:	0049      	lsls	r1, r1, #1
 80113a6:	b289      	uxth	r1, r1
	USART_ARR[uartNo-1]->BRR = usartdiv;
 80113a8:	60d9      	str	r1, [r3, #12]
	USART_ARR[uartNo-1]->ISR = 0;
 80113aa:	4b3a      	ldr	r3, [pc, #232]	; (8011494 <uart_init+0x13c>)
 80113ac:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80113b0:	2100      	movs	r1, #0
 80113b2:	61d1      	str	r1, [r2, #28]
	USART_ARR[uartNo-1]->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80113b4:	6851      	ldr	r1, [r2, #4]
 80113b6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80113ba:	6051      	str	r1, [r2, #4]
	USART_ARR[uartNo-1]->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80113bc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80113c0:	688a      	ldr	r2, [r1, #8]
 80113c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80113c6:	608a      	str	r2, [r1, #8]
	USART_ARR[uartNo-1]->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 80113c8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80113cc:	680a      	ldr	r2, [r1, #0]
 80113ce:	f042 020c 	orr.w	r2, r2, #12
 80113d2:	600a      	str	r2, [r1, #0]
	USART_ARR[uartNo-1]->CR1 |= USART_CR1_UE;
 80113d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80113d8:	6813      	ldr	r3, [r2, #0]
 80113da:	f043 0301 	orr.w	r3, r3, #1
 80113de:	6013      	str	r3, [r2, #0]
}
 80113e0:	bd38      	pop	{r3, r4, r5, pc}
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80113e2:	4b2e      	ldr	r3, [pc, #184]	; (801149c <uart_init+0x144>)
 80113e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80113e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80113ea:	661a      	str	r2, [r3, #96]	; 0x60
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80113ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113ee:	f042 0201 	orr.w	r2, r2, #1
 80113f2:	64da      	str	r2, [r3, #76]	; 0x4c
			GPIOA->MODER &= ~(GPIO_MODER_MODE9|GPIO_MODER_MODE10);
 80113f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80113fe:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (GPIO_MODER_MODE9_1|GPIO_MODER_MODE10_1);
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
 8011406:	601a      	str	r2, [r3, #0]
			GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL9|GPIO_AFRH_AFSEL10);
 8011408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801140a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 801140e:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOA->AFR[1] |= ((GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2)
 8011410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011412:	f442 62ee 	orr.w	r2, r2, #1904	; 0x770
 8011416:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8011418:	e7ab      	b.n	8011372 <uart_init+0x1a>
			RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 801141a:	4b20      	ldr	r3, [pc, #128]	; (801149c <uart_init+0x144>)
 801141c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801141e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011422:	659a      	str	r2, [r3, #88]	; 0x58
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8011424:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011426:	f042 0201 	orr.w	r2, r2, #1
 801142a:	64da      	str	r2, [r3, #76]	; 0x4c
			GPIOA->MODER &= ~(GPIO_MODER_MODE2|GPIO_MODER_MODE3);
 801142c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8011436:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (GPIO_MODER_MODE2_1|GPIO_MODER_MODE3_1);
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 801143e:	601a      	str	r2, [r3, #0]
			GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2|GPIO_AFRL_AFSEL3);
 8011440:	6a1a      	ldr	r2, [r3, #32]
 8011442:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8011446:	621a      	str	r2, [r3, #32]
			GPIOA->AFR[0] |= ((GPIO_AFRL_AFSEL2_0 | GPIO_AFRL_AFSEL2_1 | GPIO_AFRL_AFSEL2_2)
 8011448:	6a1a      	ldr	r2, [r3, #32]
 801144a:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 801144e:	621a      	str	r2, [r3, #32]
		break;
 8011450:	e78f      	b.n	8011372 <uart_init+0x1a>
			RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN;
 8011452:	4b12      	ldr	r3, [pc, #72]	; (801149c <uart_init+0x144>)
 8011454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011456:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801145a:	659a      	str	r2, [r3, #88]	; 0x58
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 801145c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801145e:	f042 0204 	orr.w	r2, r2, #4
 8011462:	64da      	str	r2, [r3, #76]	; 0x4c
			GPIOC->MODER &= ~(GPIO_MODER_MODE10|GPIO_MODER_MODE11);
 8011464:	4b0e      	ldr	r3, [pc, #56]	; (80114a0 <uart_init+0x148>)
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801146c:	601a      	str	r2, [r3, #0]
			GPIOC->MODER |= (GPIO_MODER_MODE10_1|GPIO_MODER_MODE11_1);
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 8011474:	601a      	str	r2, [r3, #0]
			GPIOC->AFR[1] &= ~(GPIO_AFRH_AFSEL10|GPIO_AFRH_AFSEL11);
 8011476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011478:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 801147c:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOC->AFR[1] |= ((GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2)
 801147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011480:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 8011484:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8011486:	e774      	b.n	8011372 <uart_init+0x1a>
	    usartdiv = (uint16_t)(SystemCoreClock/baud_rate);
 8011488:	4a03      	ldr	r2, [pc, #12]	; (8011498 <uart_init+0x140>)
 801148a:	6811      	ldr	r1, [r2, #0]
 801148c:	fbb1 f1f5 	udiv	r1, r1, r5
 8011490:	b289      	uxth	r1, r1
 8011492:	e789      	b.n	80113a8 <uart_init+0x50>
 8011494:	2000408c 	.word	0x2000408c
 8011498:	20004000 	.word	0x20004000
 801149c:	40021000 	.word	0x40021000
 80114a0:	48000800 	.word	0x48000800

080114a4 <uart_send1>:
{
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	4604      	mov	r4, r0
 80114a8:	460d      	mov	r5, r1
	if(!uart_is_uartNo(uartNo))
 80114aa:	f7ff ff4d 	bl	8011348 <uart_is_uartNo>
 80114ae:	4603      	mov	r3, r0
 80114b0:	b1a8      	cbz	r0, 80114de <uart_send1+0x3a>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 80114b2:	2200      	movs	r2, #0
 80114b4:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d80b      	bhi.n	80114d4 <uart_send1+0x30>
		if ( USART_ARR[uartNo-1]->ISR & USART_ISR_TXE_Msk )
 80114bc:	1e63      	subs	r3, r4, #1
 80114be:	490a      	ldr	r1, [pc, #40]	; (80114e8 <uart_send1+0x44>)
 80114c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80114c4:	69d9      	ldr	r1, [r3, #28]
 80114c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80114ca:	d101      	bne.n	80114d0 <uart_send1+0x2c>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 80114cc:	3201      	adds	r2, #1
 80114ce:	e7f1      	b.n	80114b4 <uart_send1+0x10>
			USART_ARR[uartNo-1]->TDR = ch;
 80114d0:	b2ad      	uxth	r5, r5
 80114d2:	851d      	strh	r5, [r3, #40]	; 0x28
	if (t >= 0xFBBB)
 80114d4:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 80114d8:	429a      	cmp	r2, r3
 80114da:	d802      	bhi.n	80114e2 <uart_send1+0x3e>
		return 1; //成功发送
 80114dc:	2301      	movs	r3, #1
}
 80114de:	4618      	mov	r0, r3
 80114e0:	bd38      	pop	{r3, r4, r5, pc}
		return 0; //发送超时，发送失败
 80114e2:	2300      	movs	r3, #0
 80114e4:	e7fb      	b.n	80114de <uart_send1+0x3a>
 80114e6:	bf00      	nop
 80114e8:	2000408c 	.word	0x2000408c

080114ec <uart_sendN>:
{
 80114ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ee:	4606      	mov	r6, r0
 80114f0:	460d      	mov	r5, r1
 80114f2:	4617      	mov	r7, r2
    if(!uart_is_uartNo(uartNo))
 80114f4:	f7ff ff28 	bl	8011348 <uart_is_uartNo>
 80114f8:	4603      	mov	r3, r0
 80114fa:	b168      	cbz	r0, 8011518 <uart_sendN+0x2c>
    for (i = 0; i < len; i++)
 80114fc:	2400      	movs	r4, #0
 80114fe:	42ac      	cmp	r4, r5
 8011500:	d207      	bcs.n	8011512 <uart_sendN+0x26>
        if (!uart_send1(uartNo, buff[i])) //发送一个字节数据，失败则跳出循环
 8011502:	5d39      	ldrb	r1, [r7, r4]
 8011504:	4630      	mov	r0, r6
 8011506:	f7ff ffcd 	bl	80114a4 <uart_send1>
 801150a:	b110      	cbz	r0, 8011512 <uart_sendN+0x26>
    for (i = 0; i < len; i++)
 801150c:	3401      	adds	r4, #1
 801150e:	b2a4      	uxth	r4, r4
 8011510:	e7f5      	b.n	80114fe <uart_sendN+0x12>
    if(i<len)
 8011512:	42ac      	cmp	r4, r5
 8011514:	d302      	bcc.n	801151c <uart_sendN+0x30>
        return 1;    //发送出错
 8011516:	2301      	movs	r3, #1
}
 8011518:	4618      	mov	r0, r3
 801151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;    //发送出错
 801151c:	2300      	movs	r3, #0
 801151e:	e7fb      	b.n	8011518 <uart_sendN+0x2c>

08011520 <uart_send_string>:
{
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	4606      	mov	r6, r0
 8011524:	460d      	mov	r5, r1
    if(!uart_is_uartNo(uartNo))
 8011526:	f7ff ff0f 	bl	8011348 <uart_is_uartNo>
 801152a:	4603      	mov	r3, r0
 801152c:	b158      	cbz	r0, 8011546 <uart_send_string+0x26>
    for(i = 0; buff_ptr[i] != '\0'; i++)   //遍历字符串里的字符
 801152e:	2400      	movs	r4, #0
 8011530:	5d29      	ldrb	r1, [r5, r4]
 8011532:	b139      	cbz	r1, 8011544 <uart_send_string+0x24>
        if (!uart_send1(uartNo,buff_ptr[i]))//发送指针对应的字符
 8011534:	4630      	mov	r0, r6
 8011536:	f7ff ffb5 	bl	80114a4 <uart_send1>
 801153a:	4603      	mov	r3, r0
 801153c:	b118      	cbz	r0, 8011546 <uart_send_string+0x26>
    for(i = 0; buff_ptr[i] != '\0'; i++)   //遍历字符串里的字符
 801153e:	3401      	adds	r4, #1
 8011540:	b2a4      	uxth	r4, r4
 8011542:	e7f5      	b.n	8011530 <uart_send_string+0x10>
    return 1;          //发送成功
 8011544:	2301      	movs	r3, #1
}
 8011546:	4618      	mov	r0, r3
 8011548:	bd70      	pop	{r4, r5, r6, pc}
	...

0801154c <uart_re1>:
{
 801154c:	b570      	push	{r4, r5, r6, lr}
 801154e:	4604      	mov	r4, r0
 8011550:	460d      	mov	r5, r1
	if(!uart_is_uartNo(uartNo))
 8011552:	f7ff fef9 	bl	8011348 <uart_is_uartNo>
 8011556:	4606      	mov	r6, r0
 8011558:	b170      	cbz	r0, 8011578 <uart_re1+0x2c>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 801155a:	2200      	movs	r2, #0
 801155c:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 8011560:	429a      	cmp	r2, r3
 8011562:	d811      	bhi.n	8011588 <uart_re1+0x3c>
		if (USART_ARR[uartNo-1]->ISR & USART_ISR_RXNE_Msk)
 8011564:	1e63      	subs	r3, r4, #1
 8011566:	490c      	ldr	r1, [pc, #48]	; (8011598 <uart_re1+0x4c>)
 8011568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801156c:	69d9      	ldr	r1, [r3, #28]
 801156e:	f011 0f20 	tst.w	r1, #32
 8011572:	d105      	bne.n	8011580 <uart_re1+0x34>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 8011574:	3201      	adds	r2, #1
 8011576:	e7f1      	b.n	801155c <uart_re1+0x10>
		*fp=0;
 8011578:	2300      	movs	r3, #0
 801157a:	702b      	strb	r3, [r5, #0]
}
 801157c:	4630      	mov	r0, r6
 801157e:	bd70      	pop	{r4, r5, r6, pc}
			dat=USART_ARR[uartNo-1]->RDR;    //获取数据,清接收中断位
 8011580:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 8011582:	b2f6      	uxtb	r6, r6
			*fp = 1;  //接收成功
 8011584:	2301      	movs	r3, #1
 8011586:	702b      	strb	r3, [r5, #0]
	if(t >= 0xFBBB)
 8011588:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 801158c:	429a      	cmp	r2, r3
 801158e:	d9f5      	bls.n	801157c <uart_re1+0x30>
		*fp = 0;    //未收到数据
 8011590:	2300      	movs	r3, #0
 8011592:	702b      	strb	r3, [r5, #0]
		dat = 0xFF;
 8011594:	26ff      	movs	r6, #255	; 0xff
 8011596:	e7f1      	b.n	801157c <uart_re1+0x30>
 8011598:	2000408c 	.word	0x2000408c

0801159c <uart_enable_re_int>:
{
 801159c:	b510      	push	{r4, lr}
 801159e:	4604      	mov	r4, r0
	if(!uart_is_uartNo(uartNo))
 80115a0:	f7ff fed2 	bl	8011348 <uart_is_uartNo>
 80115a4:	b198      	cbz	r0, 80115ce <uart_enable_re_int+0x32>
	USART_ARR[uartNo-1]->CR1 |= USART_CR1_RXNEIE_Msk;    //开放UART接收中断
 80115a6:	1e60      	subs	r0, r4, #1
 80115a8:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <uart_enable_re_int+0x34>)
 80115aa:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80115ae:	6813      	ldr	r3, [r2, #0]
 80115b0:	f043 0320 	orr.w	r3, r3, #32
 80115b4:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(table_irq_uart[uartNo-1]);    //开中断控制器IRQ中断
 80115b6:	4b07      	ldr	r3, [pc, #28]	; (80115d4 <uart_enable_re_int+0x38>)
 80115b8:	561b      	ldrsb	r3, [r3, r0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	db07      	blt.n	80115ce <uart_enable_re_int+0x32>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80115be:	f003 011f 	and.w	r1, r3, #31
 80115c2:	095b      	lsrs	r3, r3, #5
 80115c4:	2201      	movs	r2, #1
 80115c6:	408a      	lsls	r2, r1
 80115c8:	4903      	ldr	r1, [pc, #12]	; (80115d8 <uart_enable_re_int+0x3c>)
 80115ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80115ce:	bd10      	pop	{r4, pc}
 80115d0:	2000408c 	.word	0x2000408c
 80115d4:	20004098 	.word	0x20004098
 80115d8:	e000e100 	.word	0xe000e100

080115dc <uart_get_re_int>:
{
 80115dc:	b510      	push	{r4, lr}
 80115de:	4604      	mov	r4, r0
	if(!uart_is_uartNo(uartNo))
 80115e0:	f7ff feb2 	bl	8011348 <uart_is_uartNo>
 80115e4:	4603      	mov	r3, r0
 80115e6:	b170      	cbz	r0, 8011606 <uart_get_re_int+0x2a>
	if(((USART_ARR[uartNo-1]->ISR & USART_ISR_RXNE_Msk) == USART_ISR_RXNE_Msk)
 80115e8:	3c01      	subs	r4, #1
 80115ea:	4b09      	ldr	r3, [pc, #36]	; (8011610 <uart_get_re_int+0x34>)
 80115ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80115f0:	69da      	ldr	r2, [r3, #28]
 80115f2:	f012 0f20 	tst.w	r2, #32
 80115f6:	d005      	beq.n	8011604 <uart_get_re_int+0x28>
			&& ((USART_ARR[uartNo-1]->CR1 & USART_CR1_RXNEIE_Msk) == USART_CR1_RXNEIE_Msk))
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f013 0f20 	tst.w	r3, #32
 80115fe:	d104      	bne.n	801160a <uart_get_re_int+0x2e>
		return 0;
 8011600:	2300      	movs	r3, #0
 8011602:	e000      	b.n	8011606 <uart_get_re_int+0x2a>
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	bd10      	pop	{r4, pc}
		return 1;
 801160a:	2301      	movs	r3, #1
 801160c:	e7fb      	b.n	8011606 <uart_get_re_int+0x2a>
 801160e:	bf00      	nop
 8011610:	2000408c 	.word	0x2000408c

08011614 <rt_thread_idle_excute>:
     * into a "if".
     *
     * So add the volatile qualifier here. */
    const volatile rt_list_t *l = (const volatile rt_list_t *)&rt_thread_defunct;

    return l->next != l;
 8011614:	4b1f      	ldr	r3, [pc, #124]	; (8011694 <rt_thread_idle_excute+0x80>)
 8011616:	681a      	ldr	r2, [r3, #0]
 */
void rt_thread_idle_excute(void)
{
    /* Loop until there is no dead thread. So one call to rt_thread_idle_excute
     * will do all the cleanups. */
    while (_has_defunct_thread())
 8011618:	429a      	cmp	r2, r3
 801161a:	d039      	beq.n	8011690 <rt_thread_idle_excute+0x7c>
{
 801161c:	b570      	push	{r4, r5, r6, lr}
        struct rt_dlmodule *module = RT_NULL;
#endif
        RT_DEBUG_NOT_IN_INTERRUPT;

        /* disable interrupt */
        lock = rt_hw_interrupt_disable();
 801161e:	f7fc f90f 	bl	800d840 <rt_hw_interrupt_disable>
 8011622:	4606      	mov	r6, r0
    return l->next != l;
 8011624:	4b1b      	ldr	r3, [pc, #108]	; (8011694 <rt_thread_idle_excute+0x80>)
 8011626:	681a      	ldr	r2, [r3, #0]

        /* re-check whether list is empty */
        if (_has_defunct_thread())
 8011628:	429a      	cmp	r2, r3
 801162a:	d02e      	beq.n	801168a <rt_thread_idle_excute+0x76>
        {
            /* get defunct thread */
            thread = rt_list_entry(rt_thread_defunct.next,
 801162c:	681c      	ldr	r4, [r3, #0]
 801162e:	f1a4 0514 	sub.w	r5, r4, #20
    n->next->prev = n->prev;
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	6862      	ldr	r2, [r4, #4]
 8011636:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
 8011638:	6863      	ldr	r3, [r4, #4]
 801163a:	6822      	ldr	r2, [r4, #0]
 801163c:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
 801163e:	6064      	str	r4, [r4, #4]
 8011640:	6024      	str	r4, [r4, #0]
#endif
            /* remove defunct thread */
            rt_list_remove(&(thread->tlist));

            /* lock scheduler to prevent scheduling in cleanup function. */
            rt_enter_critical();
 8011642:	f7ff fd85 	bl	8011150 <rt_enter_critical>

            /* invoke thread cleanup */
            if (thread->cleanup != RT_NULL)
 8011646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011648:	b10b      	cbz	r3, 801164e <rt_thread_idle_excute+0x3a>
                thread->cleanup(thread);
 801164a:	4628      	mov	r0, r5
 801164c:	4798      	blx	r3
#ifdef RT_USING_SIGNALS
            rt_thread_free_sig(thread);
#endif

            /* if it's a system object, not delete it */
            if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
 801164e:	4628      	mov	r0, r5
 8011650:	f7fe f9c7 	bl	800f9e2 <rt_object_is_systemobject>
 8011654:	2801      	cmp	r0, #1
 8011656:	d00f      	beq.n	8011678 <rt_thread_idle_excute+0x64>

                return;
            }

            /* unlock scheduler */
            rt_exit_critical();
 8011658:	f7ff fd86 	bl	8011168 <rt_exit_critical>
            /* may the defunct thread list is removed by others, just return */
            return;
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(lock);
 801165c:	4630      	mov	r0, r6
 801165e:	f7fc f8f3 	bl	800d848 <rt_hw_interrupt_enable>

#ifdef RT_USING_HEAP
        /* release thread's stack */
        RT_KERNEL_FREE(thread->stack_addr);
 8011662:	6960      	ldr	r0, [r4, #20]
 8011664:	f000 fb38 	bl	8011cd8 <rt_free>
        /* delete thread object */
        rt_object_delete((rt_object_t)thread);
 8011668:	4628      	mov	r0, r5
 801166a:	f7fe f9a4 	bl	800f9b6 <rt_object_delete>
    return l->next != l;
 801166e:	4b09      	ldr	r3, [pc, #36]	; (8011694 <rt_thread_idle_excute+0x80>)
 8011670:	681a      	ldr	r2, [r3, #0]
    while (_has_defunct_thread())
 8011672:	429a      	cmp	r2, r3
 8011674:	d1d3      	bne.n	801161e <rt_thread_idle_excute+0xa>
 8011676:	e00a      	b.n	801168e <rt_thread_idle_excute+0x7a>
                rt_object_detach((rt_object_t)thread);
 8011678:	4628      	mov	r0, r5
 801167a:	f7fe f961 	bl	800f940 <rt_object_detach>
                rt_exit_critical();
 801167e:	f7ff fd73 	bl	8011168 <rt_exit_critical>
                rt_hw_interrupt_enable(lock);
 8011682:	4630      	mov	r0, r6
 8011684:	f7fc f8e0 	bl	800d848 <rt_hw_interrupt_enable>
                return;
 8011688:	e001      	b.n	801168e <rt_thread_idle_excute+0x7a>
            rt_hw_interrupt_enable(lock);
 801168a:	f7fc f8dd 	bl	800d848 <rt_hw_interrupt_enable>
#endif
    }
}
 801168e:	bd70      	pop	{r4, r5, r6, pc}
 8011690:	4770      	bx	lr
 8011692:	bf00      	nop
 8011694:	20007c5c 	.word	0x20007c5c

08011698 <rt_thread_idle_entry>:

extern void rt_system_power_manager(void);
static void rt_thread_idle_entry(void *parameter)
{
 8011698:	b508      	push	{r3, lr}
                idle_hook_list[i]();
            }
        }
#endif

        rt_thread_idle_excute();
 801169a:	f7ff ffbb 	bl	8011614 <rt_thread_idle_excute>
 801169e:	e7fc      	b.n	801169a <rt_thread_idle_entry+0x2>

080116a0 <rt_thread_idle_init>:
 * This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
 80116a0:	b510      	push	{r4, lr}
 80116a2:	b084      	sub	sp, #16
    /* initialize thread */
    rt_thread_init(&idle,
 80116a4:	4c0a      	ldr	r4, [pc, #40]	; (80116d0 <rt_thread_idle_init+0x30>)
 80116a6:	2320      	movs	r3, #32
 80116a8:	9303      	str	r3, [sp, #12]
 80116aa:	231f      	movs	r3, #31
 80116ac:	9302      	str	r3, [sp, #8]
 80116ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116b2:	9301      	str	r3, [sp, #4]
 80116b4:	4b07      	ldr	r3, [pc, #28]	; (80116d4 <rt_thread_idle_init+0x34>)
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	2300      	movs	r3, #0
 80116ba:	4a07      	ldr	r2, [pc, #28]	; (80116d8 <rt_thread_idle_init+0x38>)
 80116bc:	4907      	ldr	r1, [pc, #28]	; (80116dc <rt_thread_idle_init+0x3c>)
 80116be:	4620      	mov	r0, r4
 80116c0:	f7fd fd2b 	bl	800f11a <rt_thread_init>
                   sizeof(rt_thread_stack),
                   RT_THREAD_PRIORITY_MAX - 1,
                   32);

    /* startup */
    rt_thread_startup(&idle);
 80116c4:	4620      	mov	r0, r4
 80116c6:	f7fd fe63 	bl	800f390 <rt_thread_startup>
}
 80116ca:	b004      	add	sp, #16
 80116cc:	bd10      	pop	{r4, pc}
 80116ce:	bf00      	nop
 80116d0:	20007154 	.word	0x20007154
 80116d4:	200071d4 	.word	0x200071d4
 80116d8:	08011699 	.word	0x08011699
 80116dc:	080125c0 	.word	0x080125c0

080116e0 <app_init>:
//功能概要：主线程，要完成全局变量初始化、外设初始化、创建其他用户线程、启动用户线程等工作
//内部调用：无
//======================================================================

void app_init(void)
{
 80116e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e2:	b083      	sub	sp, #12


	
	//（1.2）【不变】BIOS中API接口表首地址、用户中断处理程序名初始化
	//（1.3）【不变】关总中断
	DISABLE_INTERRUPTS;
 80116e4:	b672      	cpsid	i
	//（1.4）给主函数使用的局部变量赋初值

	//（1.5）给全局变量赋初值

	//（1.6）用户外设模块初始化
	printf("  调用gpio_init函数，分别初始化红灯、绿灯、蓝灯\r\n");
 80116e6:	4860      	ldr	r0, [pc, #384]	; (8011868 <app_init+0x188>)
 80116e8:	f7fd fc86 	bl	800eff8 <myprintf>
	gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 80116ec:	2201      	movs	r2, #1
 80116ee:	4611      	mov	r1, r2
 80116f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80116f4:	f7fe fb84 	bl	800fe00 <gpio_init>
	gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 80116f8:	2201      	movs	r2, #1
 80116fa:	4611      	mov	r1, r2
 80116fc:	f240 1009 	movw	r0, #265	; 0x109
 8011700:	f7fe fb7e 	bl	800fe00 <gpio_init>
	gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011704:	2201      	movs	r2, #1
 8011706:	4611      	mov	r1, r2
 8011708:	f240 1007 	movw	r0, #263	; 0x107
 801170c:	f7fe fb78 	bl	800fe00 <gpio_init>
	uart_init(UART_User,115200); 
 8011710:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8011714:	2002      	movs	r0, #2
 8011716:	f7ff fe1f 	bl	8011358 <uart_init>
	//（1.7）使能模块中断
	uart_enable_re_int(UART_User);
 801171a:	2002      	movs	r0, #2
 801171c:	f7ff ff3e 	bl	801159c <uart_enable_re_int>
	//（1.8）【不变】开总中断
	ENABLE_INTERRUPTS;
 8011720:	b662      	cpsie	i
	printf("【金葫芦提示】本程序为带RT-Thread的STM32用户程序\r\n");
 8011722:	4852      	ldr	r0, [pc, #328]	; (801186c <app_init+0x18c>)
 8011724:	f7fd fc68 	bl	800eff8 <myprintf>
	printf("【基本功能】①在 RT-Thread启动后创建了红灯、绿灯和蓝灯三个用户线程\r\n");
 8011728:	4851      	ldr	r0, [pc, #324]	; (8011870 <app_init+0x190>)
 801172a:	f7fd fc65 	bl	800eff8 <myprintf>
	printf("	        ②实现蓝灯每10秒闪烁一次,并设置事件字\r\n");
 801172e:	4851      	ldr	r0, [pc, #324]	; (8011874 <app_init+0x194>)
 8011730:	f7fd fc62 	bl	800eff8 <myprintf>
	printf("	        ③绿灯线程等待到事件字，转换绿灯状态\r\n");
 8011734:	4850      	ldr	r0, [pc, #320]	; (8011878 <app_init+0x198>)
 8011736:	f7fd fc5f 	bl	800eff8 <myprintf>
	printf("【操作方法】连接串口User，选择波特率为115200，打开串口，查看输出结果...\r\r\n\n");
 801173a:	4850      	ldr	r0, [pc, #320]	; (801187c <app_init+0x19c>)
 801173c:	f7fd fc5c 	bl	800eff8 <myprintf>
	printf("0-1.MCU启动\n");
 8011740:	484f      	ldr	r0, [pc, #316]	; (8011880 <app_init+0x1a0>)
 8011742:	f7fd fc59 	bl	800eff8 <myprintf>
	
	//创建事件字
	EventWord=rt_event_create("EventWord",RT_IPC_FLAG_PRIO);
 8011746:	2101      	movs	r1, #1
 8011748:	484e      	ldr	r0, [pc, #312]	; (8011884 <app_init+0x1a4>)
 801174a:	f7fe fd43 	bl	80101d4 <rt_event_create>
 801174e:	4b4e      	ldr	r3, [pc, #312]	; (8011888 <app_init+0x1a8>)
 8011750:	6018      	str	r0, [r3, #0]
	//创建消息队列
	mq=rt_mq_create("mq",9,4,RT_IPC_FLAG_FIFO);
 8011752:	2300      	movs	r3, #0
 8011754:	2204      	movs	r2, #4
 8011756:	2109      	movs	r1, #9
 8011758:	484c      	ldr	r0, [pc, #304]	; (801188c <app_init+0x1ac>)
 801175a:	f7fe fe49 	bl	80103f0 <rt_mq_create>
 801175e:	4b4c      	ldr	r3, [pc, #304]	; (8011890 <app_init+0x1b0>)
 8011760:	6018      	str	r0, [r3, #0]
	//创建信号量
	SP=rt_sem_create("SP",2,RT_IPC_FLAG_FIFO);
 8011762:	2200      	movs	r2, #0
 8011764:	2102      	movs	r1, #2
 8011766:	484b      	ldr	r0, [pc, #300]	; (8011894 <app_init+0x1b4>)
 8011768:	f7fe fbb6 	bl	800fed8 <rt_sem_create>
 801176c:	4b4a      	ldr	r3, [pc, #296]	; (8011898 <app_init+0x1b8>)
 801176e:	6018      	str	r0, [r3, #0]
	//创建互斥量
	mutex=rt_mutex_create("mutex",RT_IPC_FLAG_PRIO);
 8011770:	2101      	movs	r1, #1
 8011772:	484a      	ldr	r0, [pc, #296]	; (801189c <app_init+0x1bc>)
 8011774:	f7fe fc43 	bl	800fffe <rt_mutex_create>
 8011778:	4b49      	ldr	r3, [pc, #292]	; (80118a0 <app_init+0x1c0>)
 801177a:	6018      	str	r0, [r3, #0]


	//创建命令选择线程
	thd_rulechoose=rt_thread_create("rulechoose", (void *)thread_rulechoose, 0, 512, 9, 10);
 801177c:	240a      	movs	r4, #10
 801177e:	9401      	str	r4, [sp, #4]
 8011780:	2309      	movs	r3, #9
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011788:	2200      	movs	r2, #0
 801178a:	4946      	ldr	r1, [pc, #280]	; (80118a4 <app_init+0x1c4>)
 801178c:	4846      	ldr	r0, [pc, #280]	; (80118a8 <app_init+0x1c8>)
 801178e:	f7fd fd11 	bl	800f1b4 <rt_thread_create>
 8011792:	4607      	mov	r7, r0
	//创建三色灯线程
	thd_greenlight = rt_thread_create("greenlight", (void *)thread_greenlight, 0, 512, 10, 10);
 8011794:	4e45      	ldr	r6, [pc, #276]	; (80118ac <app_init+0x1cc>)
 8011796:	9401      	str	r4, [sp, #4]
 8011798:	9400      	str	r4, [sp, #0]
 801179a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801179e:	2200      	movs	r2, #0
 80117a0:	4943      	ldr	r1, [pc, #268]	; (80118b0 <app_init+0x1d0>)
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7fd fd06 	bl	800f1b4 <rt_thread_create>
 80117a8:	4b42      	ldr	r3, [pc, #264]	; (80118b4 <app_init+0x1d4>)
 80117aa:	6018      	str	r0, [r3, #0]
	thd_bluelight = rt_thread_create("bluelight", (void *)thread_bluelight, 0, 512, 10, 10);
 80117ac:	4d42      	ldr	r5, [pc, #264]	; (80118b8 <app_init+0x1d8>)
 80117ae:	9401      	str	r4, [sp, #4]
 80117b0:	9400      	str	r4, [sp, #0]
 80117b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117b6:	2200      	movs	r2, #0
 80117b8:	4940      	ldr	r1, [pc, #256]	; (80118bc <app_init+0x1dc>)
 80117ba:	4628      	mov	r0, r5
 80117bc:	f7fd fcfa 	bl	800f1b4 <rt_thread_create>
 80117c0:	4b3f      	ldr	r3, [pc, #252]	; (80118c0 <app_init+0x1e0>)
 80117c2:	6018      	str	r0, [r3, #0]
	//创建消息队列线程
	thd_messagerecv = rt_thread_create("messagerecv", (void *)thread_messagerecv, 0, 512, 10, 10);
 80117c4:	9401      	str	r4, [sp, #4]
 80117c6:	9400      	str	r4, [sp, #0]
 80117c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117cc:	2200      	movs	r2, #0
 80117ce:	493d      	ldr	r1, [pc, #244]	; (80118c4 <app_init+0x1e4>)
 80117d0:	483d      	ldr	r0, [pc, #244]	; (80118c8 <app_init+0x1e8>)
 80117d2:	f7fd fcef 	bl	800f1b4 <rt_thread_create>
 80117d6:	4b3d      	ldr	r3, [pc, #244]	; (80118cc <app_init+0x1ec>)
 80117d8:	6018      	str	r0, [r3, #0]
	//创建三个信号量线程
	thd_SPThread1 = rt_thread_create("SPThread1", (void *)thread_SPThread1, 0, 512, 10, 10);
 80117da:	9401      	str	r4, [sp, #4]
 80117dc:	9400      	str	r4, [sp, #0]
 80117de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117e2:	2200      	movs	r2, #0
 80117e4:	493a      	ldr	r1, [pc, #232]	; (80118d0 <app_init+0x1f0>)
 80117e6:	483b      	ldr	r0, [pc, #236]	; (80118d4 <app_init+0x1f4>)
 80117e8:	f7fd fce4 	bl	800f1b4 <rt_thread_create>
 80117ec:	4b3a      	ldr	r3, [pc, #232]	; (80118d8 <app_init+0x1f8>)
 80117ee:	6018      	str	r0, [r3, #0]
	thd_SPThread2 = rt_thread_create("SPThread2", (void *)thread_SPThread2, 0, 512, 10, 10);
 80117f0:	9401      	str	r4, [sp, #4]
 80117f2:	9400      	str	r4, [sp, #0]
 80117f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117f8:	2200      	movs	r2, #0
 80117fa:	4938      	ldr	r1, [pc, #224]	; (80118dc <app_init+0x1fc>)
 80117fc:	4838      	ldr	r0, [pc, #224]	; (80118e0 <app_init+0x200>)
 80117fe:	f7fd fcd9 	bl	800f1b4 <rt_thread_create>
 8011802:	4b38      	ldr	r3, [pc, #224]	; (80118e4 <app_init+0x204>)
 8011804:	6018      	str	r0, [r3, #0]
	thd_SPThread3 = rt_thread_create("SPThread3", (void *)thread_SPThread3, 0, 512, 10, 10);
 8011806:	9401      	str	r4, [sp, #4]
 8011808:	9400      	str	r4, [sp, #0]
 801180a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801180e:	2200      	movs	r2, #0
 8011810:	4935      	ldr	r1, [pc, #212]	; (80118e8 <app_init+0x208>)
 8011812:	4836      	ldr	r0, [pc, #216]	; (80118ec <app_init+0x20c>)
 8011814:	f7fd fcce 	bl	800f1b4 <rt_thread_create>
 8011818:	4b35      	ldr	r3, [pc, #212]	; (80118f0 <app_init+0x210>)
 801181a:	6018      	str	r0, [r3, #0]
	//创建三个互斥量线程
	thd_mutexBlue = rt_thread_create("redlight", (void *)thread_mutexBlue, 0, 512, 10, 10);
 801181c:	9401      	str	r4, [sp, #4]
 801181e:	9400      	str	r4, [sp, #0]
 8011820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011824:	2200      	movs	r2, #0
 8011826:	4933      	ldr	r1, [pc, #204]	; (80118f4 <app_init+0x214>)
 8011828:	4833      	ldr	r0, [pc, #204]	; (80118f8 <app_init+0x218>)
 801182a:	f7fd fcc3 	bl	800f1b4 <rt_thread_create>
 801182e:	4b33      	ldr	r3, [pc, #204]	; (80118fc <app_init+0x21c>)
 8011830:	6018      	str	r0, [r3, #0]
	thd_mutexGreen = rt_thread_create("greenlight", (void *)thread_mutexGreen, 0, 512, 10, 10);
 8011832:	9401      	str	r4, [sp, #4]
 8011834:	9400      	str	r4, [sp, #0]
 8011836:	f44f 7300 	mov.w	r3, #512	; 0x200
 801183a:	2200      	movs	r2, #0
 801183c:	4930      	ldr	r1, [pc, #192]	; (8011900 <app_init+0x220>)
 801183e:	4630      	mov	r0, r6
 8011840:	f7fd fcb8 	bl	800f1b4 <rt_thread_create>
 8011844:	4b2f      	ldr	r3, [pc, #188]	; (8011904 <app_init+0x224>)
 8011846:	6018      	str	r0, [r3, #0]
	thd_mutexRed = rt_thread_create("bluelight", (void *)thread_mutexRed, 0, 512, 10, 10);
 8011848:	9401      	str	r4, [sp, #4]
 801184a:	9400      	str	r4, [sp, #0]
 801184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011850:	2200      	movs	r2, #0
 8011852:	492d      	ldr	r1, [pc, #180]	; (8011908 <app_init+0x228>)
 8011854:	4628      	mov	r0, r5
 8011856:	f7fd fcad 	bl	800f1b4 <rt_thread_create>
 801185a:	4b2c      	ldr	r3, [pc, #176]	; (801190c <app_init+0x22c>)
 801185c:	6018      	str	r0, [r3, #0]

	   



    rt_thread_startup(thd_rulechoose);//启动命令选择线程
 801185e:	4638      	mov	r0, r7
 8011860:	f7fd fd96 	bl	800f390 <rt_thread_startup>
}
 8011864:	b003      	add	sp, #12
 8011866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011868:	080125c8 	.word	0x080125c8
 801186c:	080125fc 	.word	0x080125fc
 8011870:	08012630 	.word	0x08012630
 8011874:	08012678 	.word	0x08012678
 8011878:	080126ac 	.word	0x080126ac
 801187c:	080126dc 	.word	0x080126dc
 8011880:	08012728 	.word	0x08012728
 8011884:	08012738 	.word	0x08012738
 8011888:	20007340 	.word	0x20007340
 801188c:	08012744 	.word	0x08012744
 8011890:	20007338 	.word	0x20007338
 8011894:	08012748 	.word	0x08012748
 8011898:	20007318 	.word	0x20007318
 801189c:	0801274c 	.word	0x0801274c
 80118a0:	20007330 	.word	0x20007330
 80118a4:	08010c49 	.word	0x08010c49
 80118a8:	08012754 	.word	0x08012754
 80118ac:	08012760 	.word	0x08012760
 80118b0:	0800e741 	.word	0x0800e741
 80118b4:	2000731c 	.word	0x2000731c
 80118b8:	0801276c 	.word	0x0801276c
 80118bc:	0800f9f5 	.word	0x0800f9f5
 80118c0:	20007328 	.word	0x20007328
 80118c4:	08011a25 	.word	0x08011a25
 80118c8:	08012778 	.word	0x08012778
 80118cc:	20007334 	.word	0x20007334
 80118d0:	08011229 	.word	0x08011229
 80118d4:	08012784 	.word	0x08012784
 80118d8:	20007324 	.word	0x20007324
 80118dc:	0800f861 	.word	0x0800f861
 80118e0:	08012790 	.word	0x08012790
 80118e4:	2000733c 	.word	0x2000733c
 80118e8:	0800faed 	.word	0x0800faed
 80118ec:	0801279c 	.word	0x0801279c
 80118f0:	20007348 	.word	0x20007348
 80118f4:	08011e0d 	.word	0x08011e0d
 80118f8:	080127a8 	.word	0x080127a8
 80118fc:	20007b4c 	.word	0x20007b4c
 8011900:	08011db9 	.word	0x08011db9
 8011904:	20007320 	.word	0x20007320
 8011908:	080119d1 	.word	0x080119d1
 801190c:	2000732c 	.word	0x2000732c

08011910 <useremuart_frame>:
	static uint16_t length = 1;
	uint16_t ret_val;
	
	
	//（1）若未接收到数据或者未遇到帧头，则退出并返回0  帧头长度为两个字节
	if(((index-1) == 0 && ch != emuartFrameHead[0]) ||
 8011910:	4b17      	ldr	r3, [pc, #92]	; (8011970 <useremuart_frame+0x60>)
 8011912:	881b      	ldrh	r3, [r3, #0]
 8011914:	2b01      	cmp	r3, #1
 8011916:	d012      	beq.n	801193e <useremuart_frame+0x2e>
 8011918:	2b02      	cmp	r3, #2
 801191a:	d019      	beq.n	8011950 <useremuart_frame+0x40>
{
 801191c:	b410      	push	{r4}
		length = 1;
		ret_val = 0;     //接收数据错误
		goto uecom_recv_exit;
	}
	//（2）正确接收到了帧头，继续执行，将数据存入data数组
	data[(index++)-1] = ch;
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	b292      	uxth	r2, r2
 8011922:	4c13      	ldr	r4, [pc, #76]	; (8011970 <useremuart_frame+0x60>)
 8011924:	8022      	strh	r2, [r4, #0]
 8011926:	3b01      	subs	r3, #1
 8011928:	54c8      	strb	r0, [r1, r3]
	//printf("%d",index);
	//（3）当获取到第四个数据时，求出有效数据长度


	if((index-1) == 3)
 801192a:	2a04      	cmp	r2, #4
 801192c:	d013      	beq.n	8011956 <useremuart_frame+0x46>
	{
		//printf("长度正确赋予\n");
		length = data[2];
	}
	//判断数据是否接收完毕，接收完毕退出组帧
	if(index==data[2]+4)
 801192e:	788b      	ldrb	r3, [r1, #2]
 8011930:	3304      	adds	r3, #4
 8011932:	429a      	cmp	r2, r3
 8011934:	d013      	beq.n	801195e <useremuart_frame+0x4e>
		ret_val = (length+3); //返回有效数据长度
		length=1;
		//data[(length-1)] = 0; //令数组长度为0
		goto uecom_recv_exit;
	}
	ret_val = 0;
 8011936:	2000      	movs	r0, #0
	goto uecom_recv_exit;
uecom_recv_exit:
    return ret_val;
 8011938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801193c:	4770      	bx	lr
	if(((index-1) == 0 && ch != emuartFrameHead[0]) ||
 801193e:	28a5      	cmp	r0, #165	; 0xa5
 8011940:	d0ea      	beq.n	8011918 <useremuart_frame+0x8>
		index = 1;
 8011942:	2301      	movs	r3, #1
 8011944:	4a0a      	ldr	r2, [pc, #40]	; (8011970 <useremuart_frame+0x60>)
 8011946:	8013      	strh	r3, [r2, #0]
		length = 1;
 8011948:	4a0a      	ldr	r2, [pc, #40]	; (8011974 <useremuart_frame+0x64>)
 801194a:	8013      	strh	r3, [r2, #0]
		ret_val = 0;     //接收数据错误
 801194c:	2000      	movs	r0, #0
 801194e:	4770      	bx	lr
			((index-1) == 1 && ch != emuartFrameHead[1]))
 8011950:	285a      	cmp	r0, #90	; 0x5a
 8011952:	d1f6      	bne.n	8011942 <useremuart_frame+0x32>
 8011954:	e7e2      	b.n	801191c <useremuart_frame+0xc>
		length = data[2];
 8011956:	7888      	ldrb	r0, [r1, #2]
 8011958:	4b06      	ldr	r3, [pc, #24]	; (8011974 <useremuart_frame+0x64>)
 801195a:	8018      	strh	r0, [r3, #0]
 801195c:	e7e7      	b.n	801192e <useremuart_frame+0x1e>
		index = 1;
 801195e:	2201      	movs	r2, #1
 8011960:	4b03      	ldr	r3, [pc, #12]	; (8011970 <useremuart_frame+0x60>)
 8011962:	801a      	strh	r2, [r3, #0]
		ret_val = (length+3); //返回有效数据长度
 8011964:	4b03      	ldr	r3, [pc, #12]	; (8011974 <useremuart_frame+0x64>)
 8011966:	8818      	ldrh	r0, [r3, #0]
 8011968:	3003      	adds	r0, #3
 801196a:	b280      	uxth	r0, r0
		length=1;
 801196c:	801a      	strh	r2, [r3, #0]
		goto uecom_recv_exit;
 801196e:	e7e3      	b.n	8011938 <useremuart_frame+0x28>
 8011970:	2000409c 	.word	0x2000409c
 8011974:	2000409e 	.word	0x2000409e

08011978 <USART2_IRQHandler>:
{
 8011978:	b500      	push	{lr}
 801197a:	b083      	sub	sp, #12
    DISABLE_INTERRUPTS;      //关总中断
 801197c:	b672      	cpsid	i
    if(!uart_get_re_int(UART_User)) goto UART_User_Handler_EXIT;
 801197e:	2002      	movs	r0, #2
 8011980:	f7ff fe2c 	bl	80115dc <uart_get_re_int>
 8011984:	b918      	cbnz	r0, 801198e <USART2_IRQHandler+0x16>
    ENABLE_INTERRUPTS;
 8011986:	b662      	cpsie	i
}
 8011988:	b003      	add	sp, #12
 801198a:	f85d fb04 	ldr.w	pc, [sp], #4
    ch = uart_re1(UART_User,&flag);        //调用接收一个字节的函数
 801198e:	f10d 0107 	add.w	r1, sp, #7
 8011992:	2002      	movs	r0, #2
 8011994:	f7ff fdda 	bl	801154c <uart_re1>
    if(!flag) goto UART_User_Handler_EXIT; //实际未收到数据，退出
 8011998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0f2      	beq.n	8011986 <USART2_IRQHandler+0xe>
       gcRecvLen =useremuart_frame(ch,(uint8_t*)gcRecvBuf);//对接收数据组帧，返回0组帧未成功，返回长度组帧成功。
 80119a0:	4908      	ldr	r1, [pc, #32]	; (80119c4 <USART2_IRQHandler+0x4c>)
 80119a2:	f7ff ffb5 	bl	8011910 <useremuart_frame>
 80119a6:	4b08      	ldr	r3, [pc, #32]	; (80119c8 <USART2_IRQHandler+0x50>)
 80119a8:	8018      	strh	r0, [r3, #0]
       if (gcRecvLen == 0) goto UART_User_Handler_EXIT; 
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d0e9      	beq.n	8011986 <USART2_IRQHandler+0xe>
       rt_event_send(EventWord,RULE_CHOOSE_EVENT);//数据接收完成，对命令选择事件置位
 80119b2:	2102      	movs	r1, #2
 80119b4:	4b05      	ldr	r3, [pc, #20]	; (80119cc <USART2_IRQHandler+0x54>)
 80119b6:	6818      	ldr	r0, [r3, #0]
 80119b8:	f7fe fc1d 	bl	80101f6 <rt_event_send>
        gcRecvLen = 0;   //帧已经使用完毕，下次若收到一个字节，可以继续组帧
 80119bc:	4b02      	ldr	r3, [pc, #8]	; (80119c8 <USART2_IRQHandler+0x50>)
 80119be:	2200      	movs	r2, #0
 80119c0:	801a      	strh	r2, [r3, #0]
 80119c2:	e7e0      	b.n	8011986 <USART2_IRQHandler+0xe>
 80119c4:	2000734c 	.word	0x2000734c
 80119c8:	20007344 	.word	0x20007344
 80119cc:	20007340 	.word	0x20007340

080119d0 <thread_mutexRed>:
//参数说明：无
//功能概要：每5秒红灯反转
//内部调用：无
//======================================================================
void thread_mutexRed()
{
 80119d0:	b508      	push	{r3, lr}
    //（1）======申明局部变量==========================================
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 80119d2:	2201      	movs	r2, #1
 80119d4:	4611      	mov	r1, r2
 80119d6:	f240 1007 	movw	r0, #263	; 0x107
 80119da:	f7fe fa11 	bl	800fe00 <gpio_init>
    printf("第一次进入红灯线程！\r\n");
 80119de:	480e      	ldr	r0, [pc, #56]	; (8011a18 <thread_mutexRed+0x48>)
 80119e0:	f7fd fb0a 	bl	800eff8 <myprintf>
    //（2）======主循环（开始）==========================================
    while (1)
    {
    	//1.锁住单色灯互斥量
    	rt_mutex_take(mutex,RT_WAITING_FOREVER);
 80119e4:	4c0d      	ldr	r4, [pc, #52]	; (8011a1c <thread_mutexRed+0x4c>)
 80119e6:	f04f 31ff 	mov.w	r1, #4294967295
 80119ea:	6820      	ldr	r0, [r4, #0]
 80119ec:	f7fe fb1d 	bl	801002a <rt_mutex_take>
        printf("\r\n锁定单色互斥量成功！红灯反转，延时5秒\r\n");
 80119f0:	480b      	ldr	r0, [pc, #44]	; (8011a20 <thread_mutexRed+0x50>)
 80119f2:	f7fd fb01 	bl	800eff8 <myprintf>
        //2.红灯变亮
        gpio_reverse(LIGHT_RED);
 80119f6:	f240 1007 	movw	r0, #263	; 0x107
 80119fa:	f7fe fa39 	bl	800fe70 <gpio_reverse>
        //3.延时5秒
        delay_ms(5000);
 80119fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8011a02:	f7fd fc9d 	bl	800f340 <rt_thread_delay>
    	//4.红灯变暗
    	gpio_reverse(LIGHT_RED);
 8011a06:	f240 1007 	movw	r0, #263	; 0x107
 8011a0a:	f7fe fa31 	bl	800fe70 <gpio_reverse>
        //5.解锁单色灯互斥量
		rt_mutex_release(mutex);
 8011a0e:	6820      	ldr	r0, [r4, #0]
 8011a10:	f7fe fb97 	bl	8010142 <rt_mutex_release>
 8011a14:	e7e6      	b.n	80119e4 <thread_mutexRed+0x14>
 8011a16:	bf00      	nop
 8011a18:	080127b4 	.word	0x080127b4
 8011a1c:	20007330 	.word	0x20007330
 8011a20:	080127cc 	.word	0x080127cc

08011a24 <thread_messagerecv>:
//参数说明：无
//功能概要：如果队列中有消息，则打印出相关的相应的消息，并此时消息队列中消息的个数
//内部调用：无
//======================================================================
void thread_messagerecv()
{
 8011a24:	b510      	push	{r4, lr}
 8011a26:	b082      	sub	sp, #8
	//（1）======申明局部变量==========================================
    uint8_t temp[8];
	char *cnt;
	uint8_t recvState;
	printf("第一次进入消息接收线程!\r\n");
 8011a28:	4824      	ldr	r0, [pc, #144]	; (8011abc <thread_messagerecv+0x98>)
 8011a2a:	f7fd fae5 	bl	800eff8 <myprintf>
	gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011a2e:	2201      	movs	r2, #1
 8011a30:	4611      	mov	r1, r2
 8011a32:	f240 1009 	movw	r0, #265	; 0x109
 8011a36:	f7fe f9e3 	bl	800fe00 <gpio_init>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	4611      	mov	r1, r2
 8011a3e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011a42:	f7fe f9dd 	bl	800fe00 <gpio_init>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011a46:	2201      	movs	r2, #1
 8011a48:	4611      	mov	r1, r2
 8011a4a:	f240 1007 	movw	r0, #263	; 0x107
 8011a4e:	f7fe f9d7 	bl	800fe00 <gpio_init>
	 //（2）======主循环（开始）==========================================
    while (1)
    {
	    //等待消息
		recvState=mq_recv(mq,&temp,sizeof(temp),RT_WAITING_FOREVER);
 8011a52:	f04f 33ff 	mov.w	r3, #4294967295
 8011a56:	2208      	movs	r2, #8
 8011a58:	4669      	mov	r1, sp
 8011a5a:	4819      	ldr	r0, [pc, #100]	; (8011ac0 <thread_messagerecv+0x9c>)
 8011a5c:	6800      	ldr	r0, [r0, #0]
 8011a5e:	f7fe fd41 	bl	80104e4 <rt_mq_recv>
 8011a62:	b2c0      	uxtb	r0, r0

		if(recvState==0)  //若获得消息
 8011a64:	2800      	cmp	r0, #0
 8011a66:	d1f4      	bne.n	8011a52 <thread_messagerecv+0x2e>
       	{
			cnt = rt_malloc(1);//申请内存  
 8011a68:	2001      	movs	r0, #1
 8011a6a:	f000 f8a7 	bl	8011bbc <rt_malloc>
 8011a6e:	4604      	mov	r4, r0
    	   	rt_sprintf(cnt,"%d",mq->entry);//entry队列中的消息索引
 8011a70:	4b13      	ldr	r3, [pc, #76]	; (8011ac0 <thread_messagerecv+0x9c>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8011a76:	4913      	ldr	r1, [pc, #76]	; (8011ac4 <thread_messagerecv+0xa0>)
 8011a78:	f7ff f89e 	bl	8010bb8 <rt_sprintf>
    	   	uart_send_string(UART_User,(void*)"消息队列中消息数=");
 8011a7c:	4912      	ldr	r1, [pc, #72]	; (8011ac8 <thread_messagerecv+0xa4>)
 8011a7e:	2002      	movs	r0, #2
 8011a80:	f7ff fd4e 	bl	8011520 <uart_send_string>
    	   	uart_send_string(UART_User,(uint8_t *)cnt);
 8011a84:	4621      	mov	r1, r4
 8011a86:	2002      	movs	r0, #2
 8011a88:	f7ff fd4a 	bl	8011520 <uart_send_string>
    	   	uart_send_string(UART_User,(void *) "\r\n");
 8011a8c:	4c0f      	ldr	r4, [pc, #60]	; (8011acc <thread_messagerecv+0xa8>)
 8011a8e:	4621      	mov	r1, r4
 8011a90:	2002      	movs	r0, #2
 8011a92:	f7ff fd45 	bl	8011520 <uart_send_string>
    	   	uart_send_string(UART_User,(void*) "当前取出的消息=");
 8011a96:	490e      	ldr	r1, [pc, #56]	; (8011ad0 <thread_messagerecv+0xac>)
 8011a98:	2002      	movs	r0, #2
 8011a9a:	f7ff fd41 	bl	8011520 <uart_send_string>
    	   	uart_sendN(UART_User,8,temp);
 8011a9e:	466a      	mov	r2, sp
 8011aa0:	2108      	movs	r1, #8
 8011aa2:	2002      	movs	r0, #2
 8011aa4:	f7ff fd22 	bl	80114ec <uart_sendN>
    	   	uart_send_string(UART_User,(void *) "\r\n");
 8011aa8:	4621      	mov	r1, r4
 8011aaa:	2002      	movs	r0, #2
 8011aac:	f7ff fd38 	bl	8011520 <uart_send_string>
    	   	delay_ms(1000);                //延迟，为了演示消息堆积的情况
 8011ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011ab4:	f7fd fc44 	bl	800f340 <rt_thread_delay>
 8011ab8:	e7cb      	b.n	8011a52 <thread_messagerecv+0x2e>
 8011aba:	bf00      	nop
 8011abc:	080127f8 	.word	0x080127f8
 8011ac0:	20007338 	.word	0x20007338
 8011ac4:	08012814 	.word	0x08012814
 8011ac8:	08012818 	.word	0x08012818
 8011acc:	0801221c 	.word	0x0801221c
 8011ad0:	0801282c 	.word	0x0801282c

08011ad4 <plug_holes>:
    RT_ASSERT((rt_uint8_t *)mem >= heap_ptr);
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)heap_end);
    RT_ASSERT(mem->used == 0);

    /* plug hole forward */
    nmem = (struct heap_mem *)&heap_ptr[mem->next];
 8011ad4:	4b16      	ldr	r3, [pc, #88]	; (8011b30 <plug_holes+0x5c>)
 8011ad6:	6819      	ldr	r1, [r3, #0]
 8011ad8:	6842      	ldr	r2, [r0, #4]
 8011ada:	440a      	add	r2, r1
    if (mem != nmem &&
 8011adc:	4290      	cmp	r0, r2
 8011ade:	d00f      	beq.n	8011b00 <plug_holes+0x2c>
        nmem->used == 0 &&
 8011ae0:	8853      	ldrh	r3, [r2, #2]
    if (mem != nmem &&
 8011ae2:	b96b      	cbnz	r3, 8011b00 <plug_holes+0x2c>
        (rt_uint8_t *)nmem != (rt_uint8_t *)heap_end)
 8011ae4:	4b13      	ldr	r3, [pc, #76]	; (8011b34 <plug_holes+0x60>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
        nmem->used == 0 &&
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d009      	beq.n	8011b00 <plug_holes+0x2c>
    {
        /* if mem->next is unused and not end of heap_ptr,
         * combine mem and mem->next
         */
        if (lfree == nmem)
 8011aec:	4b12      	ldr	r3, [pc, #72]	; (8011b38 <plug_holes+0x64>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4293      	cmp	r3, r2
 8011af2:	d016      	beq.n	8011b22 <plug_holes+0x4e>
        {
            lfree = mem;
        }
        mem->next = nmem->next;
 8011af4:	6853      	ldr	r3, [r2, #4]
 8011af6:	6043      	str	r3, [r0, #4]
        ((struct heap_mem *)&heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - heap_ptr;
 8011af8:	6853      	ldr	r3, [r2, #4]
 8011afa:	440b      	add	r3, r1
 8011afc:	1a42      	subs	r2, r0, r1
 8011afe:	609a      	str	r2, [r3, #8]
    }

    /* plug hole backward */
    pmem = (struct heap_mem *)&heap_ptr[mem->prev];
 8011b00:	6883      	ldr	r3, [r0, #8]
 8011b02:	440b      	add	r3, r1
    if (pmem != mem && pmem->used == 0)
 8011b04:	4298      	cmp	r0, r3
 8011b06:	d00b      	beq.n	8011b20 <plug_holes+0x4c>
 8011b08:	885a      	ldrh	r2, [r3, #2]
 8011b0a:	b94a      	cbnz	r2, 8011b20 <plug_holes+0x4c>
    {
        /* if mem->prev is unused, combine mem and mem->prev */
        if (lfree == mem)
 8011b0c:	4a0a      	ldr	r2, [pc, #40]	; (8011b38 <plug_holes+0x64>)
 8011b0e:	6812      	ldr	r2, [r2, #0]
 8011b10:	4282      	cmp	r2, r0
 8011b12:	d009      	beq.n	8011b28 <plug_holes+0x54>
        {
            lfree = pmem;
        }
        pmem->next = mem->next;
 8011b14:	6842      	ldr	r2, [r0, #4]
 8011b16:	605a      	str	r2, [r3, #4]
        ((struct heap_mem *)&heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - heap_ptr;
 8011b18:	6842      	ldr	r2, [r0, #4]
 8011b1a:	440a      	add	r2, r1
 8011b1c:	1a5b      	subs	r3, r3, r1
 8011b1e:	6093      	str	r3, [r2, #8]
    }
}
 8011b20:	4770      	bx	lr
            lfree = mem;
 8011b22:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <plug_holes+0x64>)
 8011b24:	6018      	str	r0, [r3, #0]
 8011b26:	e7e5      	b.n	8011af4 <plug_holes+0x20>
            lfree = pmem;
 8011b28:	4a03      	ldr	r2, [pc, #12]	; (8011b38 <plug_holes+0x64>)
 8011b2a:	6013      	str	r3, [r2, #0]
 8011b2c:	e7f2      	b.n	8011b14 <plug_holes+0x40>
 8011b2e:	bf00      	nop
 8011b30:	200072d8 	.word	0x200072d8
 8011b34:	200072d4 	.word	0x200072d4
 8011b38:	200072fc 	.word	0x200072fc

08011b3c <rt_system_heap_init>:
 *
 * @param begin_addr the beginning address of system heap memory.
 * @param end_addr the end address of system heap memory.
 */
void rt_system_heap_init(void *begin_addr, void *end_addr)
{
 8011b3c:	b570      	push	{r4, r5, r6, lr}
    struct heap_mem *mem;
    rt_uint32_t begin_align = RT_ALIGN((rt_uint32_t)begin_addr, RT_ALIGN_SIZE);
    rt_uint32_t end_align = RT_ALIGN_DOWN((rt_uint32_t)end_addr, RT_ALIGN_SIZE);
 8011b3e:	f021 0303 	bic.w	r3, r1, #3

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* alignment addr */
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
 8011b42:	2b18      	cmp	r3, #24
 8011b44:	d906      	bls.n	8011b54 <rt_system_heap_init+0x18>
 8011b46:	1cc4      	adds	r4, r0, #3
 8011b48:	f024 0403 	bic.w	r4, r4, #3
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= begin_align))
 8011b4c:	f1a3 0218 	sub.w	r2, r3, #24
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
 8011b50:	42a2      	cmp	r2, r4
 8011b52:	d205      	bcs.n	8011b60 <rt_system_heap_init+0x24>
        /* calculate the aligned memory size */
        mem_size_aligned = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
    }
    else
    {
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
 8011b54:	460a      	mov	r2, r1
 8011b56:	4601      	mov	r1, r0
 8011b58:	4811      	ldr	r0, [pc, #68]	; (8011ba0 <rt_system_heap_init+0x64>)
 8011b5a:	f7ff f83d 	bl	8010bd8 <rt_kprintf>

    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);

    /* initialize the lowest-free pointer to the start of the heap */
    lfree = (struct heap_mem *)heap_ptr;
}
 8011b5e:	bd70      	pop	{r4, r5, r6, pc}
        mem_size_aligned = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
 8011b60:	1b1b      	subs	r3, r3, r4
 8011b62:	f1a3 0118 	sub.w	r1, r3, #24
 8011b66:	4a0f      	ldr	r2, [pc, #60]	; (8011ba4 <rt_system_heap_init+0x68>)
 8011b68:	6011      	str	r1, [r2, #0]
    heap_ptr = (rt_uint8_t *)begin_align;
 8011b6a:	4d0f      	ldr	r5, [pc, #60]	; (8011ba8 <rt_system_heap_init+0x6c>)
 8011b6c:	602c      	str	r4, [r5, #0]
    mem->magic = HEAP_MAGIC;
 8011b6e:	f44f 52f5 	mov.w	r2, #7840	; 0x1ea0
 8011b72:	8022      	strh	r2, [r4, #0]
    mem->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
 8011b74:	f1a3 010c 	sub.w	r1, r3, #12
 8011b78:	6061      	str	r1, [r4, #4]
    mem->prev  = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60a3      	str	r3, [r4, #8]
    mem->used  = 0;
 8011b7e:	8063      	strh	r3, [r4, #2]
    heap_end        = (struct heap_mem *)&heap_ptr[mem->next];
 8011b80:	1860      	adds	r0, r4, r1
 8011b82:	4e0a      	ldr	r6, [pc, #40]	; (8011bac <rt_system_heap_init+0x70>)
 8011b84:	6030      	str	r0, [r6, #0]
    heap_end->magic = HEAP_MAGIC;
 8011b86:	5262      	strh	r2, [r4, r1]
    heap_end->used  = 1;
 8011b88:	2201      	movs	r2, #1
 8011b8a:	8042      	strh	r2, [r0, #2]
    heap_end->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
 8011b8c:	6041      	str	r1, [r0, #4]
    heap_end->prev  = mem_size_aligned + SIZEOF_STRUCT_MEM;
 8011b8e:	6081      	str	r1, [r0, #8]
    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);
 8011b90:	4907      	ldr	r1, [pc, #28]	; (8011bb0 <rt_system_heap_init+0x74>)
 8011b92:	4808      	ldr	r0, [pc, #32]	; (8011bb4 <rt_system_heap_init+0x78>)
 8011b94:	f7fe f990 	bl	800feb8 <rt_sem_init>
    lfree = (struct heap_mem *)heap_ptr;
 8011b98:	682a      	ldr	r2, [r5, #0]
 8011b9a:	4b07      	ldr	r3, [pc, #28]	; (8011bb8 <rt_system_heap_init+0x7c>)
 8011b9c:	601a      	str	r2, [r3, #0]
 8011b9e:	e7de      	b.n	8011b5e <rt_system_heap_init+0x22>
 8011ba0:	08012890 	.word	0x08012890
 8011ba4:	20007304 	.word	0x20007304
 8011ba8:	200072d8 	.word	0x200072d8
 8011bac:	200072d4 	.word	0x200072d4
 8011bb0:	08012888 	.word	0x08012888
 8011bb4:	200072dc 	.word	0x200072dc
 8011bb8:	200072fc 	.word	0x200072fc

08011bbc <rt_malloc>:
void *rt_malloc(rt_size_t size)
{
    rt_size_t ptr, ptr2;
    struct heap_mem *mem, *mem2;

    if (size == 0)
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d079      	beq.n	8011cb4 <rt_malloc+0xf8>
{
 8011bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc2:	4605      	mov	r5, r0
        return RT_NULL;

    RT_DEBUG_NOT_IN_INTERRUPT;

    if (size != RT_ALIGN(size, RT_ALIGN_SIZE))
 8011bc4:	3503      	adds	r5, #3
 8011bc6:	f025 0503 	bic.w	r5, r5, #3
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d\n", size));

    /* alignment size */
    size = RT_ALIGN(size, RT_ALIGN_SIZE);

    if (size > mem_size_aligned)
 8011bca:	4b3c      	ldr	r3, [pc, #240]	; (8011cbc <rt_malloc+0x100>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	429d      	cmp	r5, r3
 8011bd0:	d872      	bhi.n	8011cb8 <rt_malloc+0xfc>

        return RT_NULL;
    }

    /* every data block must be at least MIN_SIZE_ALIGNED long */
    if (size < MIN_SIZE_ALIGNED)
 8011bd2:	2d0b      	cmp	r5, #11
 8011bd4:	d800      	bhi.n	8011bd8 <rt_malloc+0x1c>
        size = MIN_SIZE_ALIGNED;
 8011bd6:	250c      	movs	r5, #12

    /* take memory semaphore */
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
 8011bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8011bdc:	4838      	ldr	r0, [pc, #224]	; (8011cc0 <rt_malloc+0x104>)
 8011bde:	f7fe f98c 	bl	800fefa <rt_sem_take>

    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
 8011be2:	4b38      	ldr	r3, [pc, #224]	; (8011cc4 <rt_malloc+0x108>)
 8011be4:	681e      	ldr	r6, [r3, #0]
 8011be6:	4b38      	ldr	r3, [pc, #224]	; (8011cc8 <rt_malloc+0x10c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	1b9b      	subs	r3, r3, r6
 8011bec:	e01f      	b.n	8011c2e <rt_malloc+0x72>
                 * take care of this).
                 * -> near fit or excact fit: do not split, no mem2 creation
                 * also can't move mem->next directly behind mem, since mem->next
                 * will always be used at this point!
                 */
                mem->used = 1;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	8063      	strh	r3, [r4, #2]
#ifdef RT_MEM_STATS
                used_mem += mem->next - ((rt_uint8_t *)mem - heap_ptr);
 8011bf2:	1ba3      	subs	r3, r4, r6
 8011bf4:	1ac3      	subs	r3, r0, r3
 8011bf6:	4a35      	ldr	r2, [pc, #212]	; (8011ccc <rt_malloc+0x110>)
 8011bf8:	6810      	ldr	r0, [r2, #0]
 8011bfa:	4403      	add	r3, r0
 8011bfc:	6013      	str	r3, [r2, #0]
                if (max_mem < used_mem)
 8011bfe:	4a34      	ldr	r2, [pc, #208]	; (8011cd0 <rt_malloc+0x114>)
 8011c00:	6812      	ldr	r2, [r2, #0]
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d944      	bls.n	8011c90 <rt_malloc+0xd4>
                    max_mem = used_mem;
 8011c06:	4a32      	ldr	r2, [pc, #200]	; (8011cd0 <rt_malloc+0x114>)
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	e041      	b.n	8011c90 <rt_malloc+0xd4>

            if (mem == lfree)
            {
                /* Find next free block after mem and update lowest free pointer */
                while (lfree->used && lfree != heap_end)
                    lfree = (struct heap_mem *)&heap_ptr[lfree->next];
 8011c0c:	685a      	ldr	r2, [r3, #4]
 8011c0e:	4b2d      	ldr	r3, [pc, #180]	; (8011cc4 <rt_malloc+0x108>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4413      	add	r3, r2
 8011c14:	4a2c      	ldr	r2, [pc, #176]	; (8011cc8 <rt_malloc+0x10c>)
 8011c16:	6013      	str	r3, [r2, #0]
                while (lfree->used && lfree != heap_end)
 8011c18:	4b2b      	ldr	r3, [pc, #172]	; (8011cc8 <rt_malloc+0x10c>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	885a      	ldrh	r2, [r3, #2]
 8011c1e:	2a00      	cmp	r2, #0
 8011c20:	d03d      	beq.n	8011c9e <rt_malloc+0xe2>
 8011c22:	4a2c      	ldr	r2, [pc, #176]	; (8011cd4 <rt_malloc+0x118>)
 8011c24:	6812      	ldr	r2, [r2, #0]
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d1f0      	bne.n	8011c0c <rt_malloc+0x50>
 8011c2a:	e038      	b.n	8011c9e <rt_malloc+0xe2>
         ptr = ((struct heap_mem *)&heap_ptr[ptr])->next)
 8011c2c:	6863      	ldr	r3, [r4, #4]
         ptr < mem_size_aligned - size;
 8011c2e:	4a23      	ldr	r2, [pc, #140]	; (8011cbc <rt_malloc+0x100>)
 8011c30:	6812      	ldr	r2, [r2, #0]
 8011c32:	1b51      	subs	r1, r2, r5
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
 8011c34:	4299      	cmp	r1, r3
 8011c36:	d938      	bls.n	8011caa <rt_malloc+0xee>
        mem = (struct heap_mem *)&heap_ptr[ptr];
 8011c38:	18f4      	adds	r4, r6, r3
        if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
 8011c3a:	8861      	ldrh	r1, [r4, #2]
 8011c3c:	2900      	cmp	r1, #0
 8011c3e:	d1f5      	bne.n	8011c2c <rt_malloc+0x70>
 8011c40:	6860      	ldr	r0, [r4, #4]
 8011c42:	1ac1      	subs	r1, r0, r3
 8011c44:	390c      	subs	r1, #12
 8011c46:	42a9      	cmp	r1, r5
 8011c48:	d3f0      	bcc.n	8011c2c <rt_malloc+0x70>
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
 8011c4a:	f105 0718 	add.w	r7, r5, #24
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
 8011c4e:	42b9      	cmp	r1, r7
 8011c50:	d3cd      	bcc.n	8011bee <rt_malloc+0x32>
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8011c52:	18e9      	adds	r1, r5, r3
 8011c54:	310c      	adds	r1, #12
                mem2       = (struct heap_mem *)&heap_ptr[ptr2];
 8011c56:	1870      	adds	r0, r6, r1
                mem2->magic = HEAP_MAGIC;
 8011c58:	f44f 57f5 	mov.w	r7, #7840	; 0x1ea0
 8011c5c:	5277      	strh	r7, [r6, r1]
                mem2->used = 0;
 8011c5e:	2700      	movs	r7, #0
 8011c60:	8047      	strh	r7, [r0, #2]
                mem2->next = mem->next;
 8011c62:	6867      	ldr	r7, [r4, #4]
 8011c64:	6047      	str	r7, [r0, #4]
                mem2->prev = ptr;
 8011c66:	6083      	str	r3, [r0, #8]
                mem->next = ptr2;
 8011c68:	6061      	str	r1, [r4, #4]
                mem->used = 1;
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	8063      	strh	r3, [r4, #2]
                if (mem2->next != mem_size_aligned + SIZEOF_STRUCT_MEM)
 8011c6e:	6843      	ldr	r3, [r0, #4]
 8011c70:	320c      	adds	r2, #12
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d001      	beq.n	8011c7a <rt_malloc+0xbe>
                    ((struct heap_mem *)&heap_ptr[mem2->next])->prev = ptr2;
 8011c76:	4433      	add	r3, r6
 8011c78:	6099      	str	r1, [r3, #8]
                used_mem += (size + SIZEOF_STRUCT_MEM);
 8011c7a:	4b14      	ldr	r3, [pc, #80]	; (8011ccc <rt_malloc+0x110>)
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	4415      	add	r5, r2
 8011c80:	350c      	adds	r5, #12
 8011c82:	601d      	str	r5, [r3, #0]
                if (max_mem < used_mem)
 8011c84:	4b12      	ldr	r3, [pc, #72]	; (8011cd0 <rt_malloc+0x114>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	429d      	cmp	r5, r3
 8011c8a:	d901      	bls.n	8011c90 <rt_malloc+0xd4>
                    max_mem = used_mem;
 8011c8c:	4b10      	ldr	r3, [pc, #64]	; (8011cd0 <rt_malloc+0x114>)
 8011c8e:	601d      	str	r5, [r3, #0]
            mem->magic = HEAP_MAGIC;
 8011c90:	f44f 53f5 	mov.w	r3, #7840	; 0x1ea0
 8011c94:	8023      	strh	r3, [r4, #0]
            if (mem == lfree)
 8011c96:	4b0c      	ldr	r3, [pc, #48]	; (8011cc8 <rt_malloc+0x10c>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	42a3      	cmp	r3, r4
 8011c9c:	d0bc      	beq.n	8011c18 <rt_malloc+0x5c>

                RT_ASSERT(((lfree == heap_end) || (!lfree->used)));
            }

            rt_sem_release(&heap_sem);
 8011c9e:	4808      	ldr	r0, [pc, #32]	; (8011cc0 <rt_malloc+0x104>)
 8011ca0:	f7fe f991 	bl	800ffc6 <rt_sem_release>

            RT_OBJECT_HOOK_CALL(rt_malloc_hook,
                                (((void *)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM)), size));

            /* return the memory data except mem struct */
            return (rt_uint8_t *)mem + SIZEOF_STRUCT_MEM;
 8011ca4:	f104 000c 	add.w	r0, r4, #12
 8011ca8:	e003      	b.n	8011cb2 <rt_malloc+0xf6>
        }
    }

    rt_sem_release(&heap_sem);
 8011caa:	4805      	ldr	r0, [pc, #20]	; (8011cc0 <rt_malloc+0x104>)
 8011cac:	f7fe f98b 	bl	800ffc6 <rt_sem_release>

    return RT_NULL;
 8011cb0:	2000      	movs	r0, #0
}
 8011cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return RT_NULL;
 8011cb4:	2000      	movs	r0, #0
}
 8011cb6:	4770      	bx	lr
        return RT_NULL;
 8011cb8:	2000      	movs	r0, #0
 8011cba:	e7fa      	b.n	8011cb2 <rt_malloc+0xf6>
 8011cbc:	20007304 	.word	0x20007304
 8011cc0:	200072dc 	.word	0x200072dc
 8011cc4:	200072d8 	.word	0x200072d8
 8011cc8:	200072fc 	.word	0x200072fc
 8011ccc:	20007308 	.word	0x20007308
 8011cd0:	20007300 	.word	0x20007300
 8011cd4:	200072d4 	.word	0x200072d4

08011cd8 <rt_free>:
 */
void rt_free(void *rmem)
{
    struct heap_mem *mem;

    if (rmem == RT_NULL)
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d042      	beq.n	8011d62 <rt_free+0x8a>
{
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	4604      	mov	r4, r0
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)heap_ptr &&
              (rt_uint8_t *)rmem < (rt_uint8_t *)heap_end);

    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));

    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
 8011ce0:	4a20      	ldr	r2, [pc, #128]	; (8011d64 <rt_free+0x8c>)
 8011ce2:	6812      	ldr	r2, [r2, #0]
 8011ce4:	4282      	cmp	r2, r0
 8011ce6:	d803      	bhi.n	8011cf0 <rt_free+0x18>
        (rt_uint8_t *)rmem >= (rt_uint8_t *)heap_end)
 8011ce8:	4a1f      	ldr	r2, [pc, #124]	; (8011d68 <rt_free+0x90>)
 8011cea:	6812      	ldr	r2, [r2, #0]
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
 8011cec:	4282      	cmp	r2, r0
 8011cee:	d800      	bhi.n	8011cf2 <rt_free+0x1a>
#endif

    /* finally, see if prev or next are free also */
    plug_holes(mem);
    rt_sem_release(&heap_sem);
}
 8011cf0:	bd38      	pop	{r3, r4, r5, pc}
    mem = (struct heap_mem *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
 8011cf2:	f1a0 050c 	sub.w	r5, r0, #12
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
 8011cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8011cfa:	481c      	ldr	r0, [pc, #112]	; (8011d6c <rt_free+0x94>)
 8011cfc:	f7fe f8fd 	bl	800fefa <rt_sem_take>
    if (!mem->used || mem->magic != HEAP_MAGIC)
 8011d00:	f834 3c0a 	ldrh.w	r3, [r4, #-10]
 8011d04:	b123      	cbz	r3, 8011d10 <rt_free+0x38>
 8011d06:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
 8011d0a:	f5b3 5ff5 	cmp.w	r3, #7840	; 0x1ea0
 8011d0e:	d00a      	beq.n	8011d26 <rt_free+0x4e>
        rt_kprintf("to free a bad data block:\n");
 8011d10:	4817      	ldr	r0, [pc, #92]	; (8011d70 <rt_free+0x98>)
 8011d12:	f7fe ff61 	bl	8010bd8 <rt_kprintf>
        rt_kprintf("mem: 0x%08x, used flag: %d, magic code: 0x%04x\n", mem, mem->used, mem->magic);
 8011d16:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
 8011d1a:	f834 2c0a 	ldrh.w	r2, [r4, #-10]
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4814      	ldr	r0, [pc, #80]	; (8011d74 <rt_free+0x9c>)
 8011d22:	f7fe ff59 	bl	8010bd8 <rt_kprintf>
    mem->used  = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	f824 3c0a 	strh.w	r3, [r4, #-10]
    mem->magic = HEAP_MAGIC;
 8011d2c:	f44f 53f5 	mov.w	r3, #7840	; 0x1ea0
 8011d30:	f824 3c0c 	strh.w	r3, [r4, #-12]
    if (mem < lfree)
 8011d34:	4b10      	ldr	r3, [pc, #64]	; (8011d78 <rt_free+0xa0>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	42ab      	cmp	r3, r5
 8011d3a:	d901      	bls.n	8011d40 <rt_free+0x68>
        lfree = mem;
 8011d3c:	4b0e      	ldr	r3, [pc, #56]	; (8011d78 <rt_free+0xa0>)
 8011d3e:	601d      	str	r5, [r3, #0]
    used_mem -= (mem->next - ((rt_uint8_t *)mem - heap_ptr));
 8011d40:	4b08      	ldr	r3, [pc, #32]	; (8011d64 <rt_free+0x8c>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	1aeb      	subs	r3, r5, r3
 8011d46:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8011d4a:	1a9b      	subs	r3, r3, r2
 8011d4c:	490b      	ldr	r1, [pc, #44]	; (8011d7c <rt_free+0xa4>)
 8011d4e:	680a      	ldr	r2, [r1, #0]
 8011d50:	4413      	add	r3, r2
 8011d52:	600b      	str	r3, [r1, #0]
    plug_holes(mem);
 8011d54:	4628      	mov	r0, r5
 8011d56:	f7ff febd 	bl	8011ad4 <plug_holes>
    rt_sem_release(&heap_sem);
 8011d5a:	4804      	ldr	r0, [pc, #16]	; (8011d6c <rt_free+0x94>)
 8011d5c:	f7fe f933 	bl	800ffc6 <rt_sem_release>
 8011d60:	e7c6      	b.n	8011cf0 <rt_free+0x18>
 8011d62:	4770      	bx	lr
 8011d64:	200072d8 	.word	0x200072d8
 8011d68:	200072d4 	.word	0x200072d4
 8011d6c:	200072dc 	.word	0x200072dc
 8011d70:	0801283c 	.word	0x0801283c
 8011d74:	08012858 	.word	0x08012858
 8011d78:	200072fc 	.word	0x200072fc
 8011d7c:	20007308 	.word	0x20007308

08011d80 <rt_interrupt_enter>:
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
void rt_interrupt_enter(void)
{
 8011d80:	b508      	push	{r3, lr}
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
 8011d82:	f7fb fd5d 	bl	800d840 <rt_hw_interrupt_disable>
    rt_interrupt_nest ++;
 8011d86:	4a04      	ldr	r2, [pc, #16]	; (8011d98 <rt_interrupt_enter+0x18>)
 8011d88:	7813      	ldrb	r3, [r2, #0]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	7013      	strb	r3, [r2, #0]
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
    rt_hw_interrupt_enable(level);
 8011d90:	f7fb fd5a 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011d94:	bd08      	pop	{r3, pc}
 8011d96:	bf00      	nop
 8011d98:	20007c68 	.word	0x20007c68

08011d9c <rt_interrupt_leave>:
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
void rt_interrupt_leave(void)
{
 8011d9c:	b508      	push	{r3, lr}
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
 8011d9e:	f7fb fd4f 	bl	800d840 <rt_hw_interrupt_disable>
    rt_interrupt_nest --;
 8011da2:	4a04      	ldr	r2, [pc, #16]	; (8011db4 <rt_interrupt_leave+0x18>)
 8011da4:	7813      	ldrb	r3, [r2, #0]
 8011da6:	3b01      	subs	r3, #1
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	7013      	strb	r3, [r2, #0]
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
    rt_hw_interrupt_enable(level);
 8011dac:	f7fb fd4c 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011db0:	bd08      	pop	{r3, pc}
 8011db2:	bf00      	nop
 8011db4:	20007c68 	.word	0x20007c68

08011db8 <thread_mutexGreen>:
//参数说明：无
//功能概要：每10秒绿灯反转
//内部调用：无
//======================================================================
void thread_mutexGreen()
{
 8011db8:	b508      	push	{r3, lr}
     //（1）======申明局部变量==========================================
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8011dba:	2201      	movs	r2, #1
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011dc2:	f7fe f81d 	bl	800fe00 <gpio_init>
    printf("第一次进入绿灯线程！\r\n");
 8011dc6:	480e      	ldr	r0, [pc, #56]	; (8011e00 <thread_mutexGreen+0x48>)
 8011dc8:	f7fd f916 	bl	800eff8 <myprintf>
    //（2）======主循环（开始）==========================================
    while (1)
    {
    	//1.锁住单色灯互斥量
    	rt_mutex_take(mutex,RT_WAITING_FOREVER);
 8011dcc:	4c0d      	ldr	r4, [pc, #52]	; (8011e04 <thread_mutexGreen+0x4c>)
 8011dce:	f04f 31ff 	mov.w	r1, #4294967295
 8011dd2:	6820      	ldr	r0, [r4, #0]
 8011dd4:	f7fe f929 	bl	801002a <rt_mutex_take>
    	printf("\r\n锁定单色互斥量成功！绿灯反转，延时10秒\r\n");
 8011dd8:	480b      	ldr	r0, [pc, #44]	; (8011e08 <thread_mutexGreen+0x50>)
 8011dda:	f7fd f90d 	bl	800eff8 <myprintf>
        //2.绿灯变亮
        gpio_reverse(LIGHT_GREEN);
 8011dde:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011de2:	f7fe f845 	bl	800fe70 <gpio_reverse>
        //3.延时10秒
        delay_ms(10000);
 8011de6:	f242 7010 	movw	r0, #10000	; 0x2710
 8011dea:	f7fd faa9 	bl	800f340 <rt_thread_delay>
    	//4.绿灯变暗
    	gpio_reverse(LIGHT_GREEN);
 8011dee:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011df2:	f7fe f83d 	bl	800fe70 <gpio_reverse>
    	//5.解锁单色灯互斥量
		rt_mutex_release(mutex);
 8011df6:	6820      	ldr	r0, [r4, #0]
 8011df8:	f7fe f9a3 	bl	8010142 <rt_mutex_release>
 8011dfc:	e7e6      	b.n	8011dcc <thread_mutexGreen+0x14>
 8011dfe:	bf00      	nop
 8011e00:	080128cc 	.word	0x080128cc
 8011e04:	20007330 	.word	0x20007330
 8011e08:	080128e4 	.word	0x080128e4

08011e0c <thread_mutexBlue>:
//参数说明：无
//功能概要：每20秒蓝灯反转
//内部调用：无
//======================================================================
void thread_mutexBlue()
{
 8011e0c:	b508      	push	{r3, lr}
    //（1）======申明局部变量==========================================
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011e0e:	2201      	movs	r2, #1
 8011e10:	4611      	mov	r1, r2
 8011e12:	f240 1009 	movw	r0, #265	; 0x109
 8011e16:	f7fd fff3 	bl	800fe00 <gpio_init>
    printf("第一次进入蓝灯线程！\r\n");
 8011e1a:	480e      	ldr	r0, [pc, #56]	; (8011e54 <thread_mutexBlue+0x48>)
 8011e1c:	f7fd f8ec 	bl	800eff8 <myprintf>
    //（2）======主循环（开始）==========================================
    while (1)
    {
    	//1.锁住单色灯互斥量
    	rt_mutex_take(mutex,RT_WAITING_FOREVER);
 8011e20:	4c0d      	ldr	r4, [pc, #52]	; (8011e58 <thread_mutexBlue+0x4c>)
 8011e22:	f04f 31ff 	mov.w	r1, #4294967295
 8011e26:	6820      	ldr	r0, [r4, #0]
 8011e28:	f7fe f8ff 	bl	801002a <rt_mutex_take>
		printf("\r\n锁定单色互斥量成功！蓝灯反转，延时20秒\r\n");
 8011e2c:	480b      	ldr	r0, [pc, #44]	; (8011e5c <thread_mutexBlue+0x50>)
 8011e2e:	f7fd f8e3 	bl	800eff8 <myprintf>
		//2.蓝灯变亮
		gpio_reverse(LIGHT_BLUE);
 8011e32:	f240 1009 	movw	r0, #265	; 0x109
 8011e36:	f7fe f81b 	bl	800fe70 <gpio_reverse>
		//3.延时20秒
		delay_ms(20000);
 8011e3a:	f644 6020 	movw	r0, #20000	; 0x4e20
 8011e3e:	f7fd fa7f 	bl	800f340 <rt_thread_delay>
		//4.蓝灯变暗
		gpio_reverse(LIGHT_BLUE);
 8011e42:	f240 1009 	movw	r0, #265	; 0x109
 8011e46:	f7fe f813 	bl	800fe70 <gpio_reverse>
		//5.解锁单色灯互斥量
		rt_mutex_release(mutex);
 8011e4a:	6820      	ldr	r0, [r4, #0]
 8011e4c:	f7fe f979 	bl	8010142 <rt_mutex_release>
 8011e50:	e7e6      	b.n	8011e20 <thread_mutexBlue+0x14>
 8011e52:	bf00      	nop
 8011e54:	08012910 	.word	0x08012910
 8011e58:	20007330 	.word	0x20007330
 8011e5c:	08012928 	.word	0x08012928

08011e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011e60:	f8df d038 	ldr.w	sp, [pc, #56]	; 8011e9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8011e64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8011e66:	e003      	b.n	8011e70 <LoopCopyDataInit>

08011e68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8011e68:	4b0d      	ldr	r3, [pc, #52]	; (8011ea0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8011e6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8011e6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8011e6e:	3104      	adds	r1, #4

08011e70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8011e70:	480c      	ldr	r0, [pc, #48]	; (8011ea4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8011e72:	4b0d      	ldr	r3, [pc, #52]	; (8011ea8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8011e74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8011e76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8011e78:	d3f6      	bcc.n	8011e68 <CopyDataInit>
	ldr	r2, =_sbss
 8011e7a:	4a0c      	ldr	r2, [pc, #48]	; (8011eac <LoopForever+0x12>)
	b	LoopFillZerobss
 8011e7c:	e002      	b.n	8011e84 <LoopFillZerobss>

08011e7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8011e7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8011e80:	f842 3b04 	str.w	r3, [r2], #4

08011e84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8011e84:	4b0a      	ldr	r3, [pc, #40]	; (8011eb0 <LoopForever+0x16>)
	cmp	r2, r3
 8011e86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8011e88:	d3f9      	bcc.n	8011e7e <FillZerobss>
	
	//* Call the clock system intitialization function.*/
    bl  SystemInit
 8011e8a:	f7fd fcc1 	bl	800f810 <SystemInit>
//  【CC_User 2.1】调用BIOS_API_Init函数
    bl  Vectors_Init    /*【固定】中断继承，.s文件仅修改此处*/
 8011e8e:	f7ff fa19 	bl	80112c4 <Vectors_Init>
/* Call static constructors */
//  【CC_User 2.2】1.需调用__libc_init_array，若不执行则C++类构造函数不会执行
//                2.__libc_init_array函数须在BIOS_API_Init之后执行
//                3.__libc_init_array函数的具体功能待进一步了解
    bl __libc_init_array
 8011e92:	f000 f813 	bl	8011ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8011e96:	f7fd fdf5 	bl	800fa84 <main>

08011e9a <LoopForever>:
	


LoopForever:
    b LoopForever
 8011e9a:	e7fe      	b.n	8011e9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011e9c:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8011ea0:	08012978 	.word	0x08012978
	ldr	r0, =_sdata
 8011ea4:	20004000 	.word	0x20004000
	ldr	r3, =_edata
 8011ea8:	200040a0 	.word	0x200040a0
	ldr	r2, =_sbss
 8011eac:	200040a0 	.word	0x200040a0
	ldr	r3, = _ebss
 8011eb0:	20007c6c 	.word	0x20007c6c

08011eb4 <ADC1_IRQHandler>:
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
    //Infinite_Loop:
	//b	Infinite_Loop
	push  {lr}        //【20200812】修改.s文件，缺省中断，直接返回
 8011eb4:	b500      	push	{lr}
    nop
 8011eb6:	bf00      	nop
    pop   {pc}
 8011eb8:	bd00      	pop	{pc}
	...

08011ebc <__libc_init_array>:
 8011ebc:	b570      	push	{r4, r5, r6, lr}
 8011ebe:	4e0d      	ldr	r6, [pc, #52]	; (8011ef4 <__libc_init_array+0x38>)
 8011ec0:	4c0d      	ldr	r4, [pc, #52]	; (8011ef8 <__libc_init_array+0x3c>)
 8011ec2:	1ba4      	subs	r4, r4, r6
 8011ec4:	10a4      	asrs	r4, r4, #2
 8011ec6:	2500      	movs	r5, #0
 8011ec8:	42a5      	cmp	r5, r4
 8011eca:	d109      	bne.n	8011ee0 <__libc_init_array+0x24>
 8011ecc:	4e0b      	ldr	r6, [pc, #44]	; (8011efc <__libc_init_array+0x40>)
 8011ece:	4c0c      	ldr	r4, [pc, #48]	; (8011f00 <__libc_init_array+0x44>)
 8011ed0:	f000 f82c 	bl	8011f2c <_init>
 8011ed4:	1ba4      	subs	r4, r4, r6
 8011ed6:	10a4      	asrs	r4, r4, #2
 8011ed8:	2500      	movs	r5, #0
 8011eda:	42a5      	cmp	r5, r4
 8011edc:	d105      	bne.n	8011eea <__libc_init_array+0x2e>
 8011ede:	bd70      	pop	{r4, r5, r6, pc}
 8011ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011ee4:	4798      	blx	r3
 8011ee6:	3501      	adds	r5, #1
 8011ee8:	e7ee      	b.n	8011ec8 <__libc_init_array+0xc>
 8011eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011eee:	4798      	blx	r3
 8011ef0:	3501      	adds	r5, #1
 8011ef2:	e7f2      	b.n	8011eda <__libc_init_array+0x1e>
 8011ef4:	08012968 	.word	0x08012968
 8011ef8:	08012968 	.word	0x08012968
 8011efc:	08012968 	.word	0x08012968
 8011f00:	0801296c 	.word	0x0801296c

08011f04 <memcpy>:
 8011f04:	b510      	push	{r4, lr}
 8011f06:	1e43      	subs	r3, r0, #1
 8011f08:	440a      	add	r2, r1
 8011f0a:	4291      	cmp	r1, r2
 8011f0c:	d100      	bne.n	8011f10 <memcpy+0xc>
 8011f0e:	bd10      	pop	{r4, pc}
 8011f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f18:	e7f7      	b.n	8011f0a <memcpy+0x6>

08011f1a <memset>:
 8011f1a:	4402      	add	r2, r0
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d100      	bne.n	8011f24 <memset+0xa>
 8011f22:	4770      	bx	lr
 8011f24:	f803 1b01 	strb.w	r1, [r3], #1
 8011f28:	e7f9      	b.n	8011f1e <memset+0x4>
	...

08011f2c <_init>:
 8011f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2e:	bf00      	nop
 8011f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f32:	bc08      	pop	{r3}
 8011f34:	469e      	mov	lr, r3
 8011f36:	4770      	bx	lr

08011f38 <_fini>:
 8011f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3a:	bf00      	nop
 8011f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f3e:	bc08      	pop	{r3}
 8011f40:	469e      	mov	lr, r3
 8011f42:	4770      	bx	lr
 8011f44:	0000      	movs	r0, r0
	...
