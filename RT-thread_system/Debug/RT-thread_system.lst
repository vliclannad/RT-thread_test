
RT-thread_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  0800d000  0800d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  0800d800  0800d800  0000d800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001870  08012de0  08012de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rti_fn.0.end 00000004  08014650  08014650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rti_fn.1.end 00000004  08014654  08014654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08014658  08014658  000240ac  2**0
                  CONTENTS
  6 .ARM          00000008  08014658  08014658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08014660  08014660  000240ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  08014660  08014660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  08014668  08014668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000ac  20004000  08014670  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003bdc  200040ac  0801471c  000240ac  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000240ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035a10  00000000  00000000  000240dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000597d  00000000  00000000  00059aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008ce0  00000000  00000000  0005f469  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000bc8  00000000  00000000  00068150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ab8  00000000  00000000  00068d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000672b  00000000  00000000  000697d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000d411  00000000  00000000  0006fefb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000864b9  00000000  00000000  0007d30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007e  00000000  00000000  001037c5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002054  00000000  00000000  00103844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800d800 <__do_global_dtors_aux>:
 800d800:	b510      	push	{r4, lr}
 800d802:	4c05      	ldr	r4, [pc, #20]	; (800d818 <__do_global_dtors_aux+0x18>)
 800d804:	7823      	ldrb	r3, [r4, #0]
 800d806:	b933      	cbnz	r3, 800d816 <__do_global_dtors_aux+0x16>
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <__do_global_dtors_aux+0x1c>)
 800d80a:	b113      	cbz	r3, 800d812 <__do_global_dtors_aux+0x12>
 800d80c:	4804      	ldr	r0, [pc, #16]	; (800d820 <__do_global_dtors_aux+0x20>)
 800d80e:	f3af 8000 	nop.w
 800d812:	2301      	movs	r3, #1
 800d814:	7023      	strb	r3, [r4, #0]
 800d816:	bd10      	pop	{r4, pc}
 800d818:	200040ac 	.word	0x200040ac
 800d81c:	00000000 	.word	0x00000000
 800d820:	08012dc8 	.word	0x08012dc8

0800d824 <frame_dummy>:
 800d824:	b508      	push	{r3, lr}
 800d826:	4b03      	ldr	r3, [pc, #12]	; (800d834 <frame_dummy+0x10>)
 800d828:	b11b      	cbz	r3, 800d832 <frame_dummy+0xe>
 800d82a:	4903      	ldr	r1, [pc, #12]	; (800d838 <frame_dummy+0x14>)
 800d82c:	4803      	ldr	r0, [pc, #12]	; (800d83c <frame_dummy+0x18>)
 800d82e:	f3af 8000 	nop.w
 800d832:	bd08      	pop	{r3, pc}
 800d834:	00000000 	.word	0x00000000
 800d838:	200040b0 	.word	0x200040b0
 800d83c:	08012dc8 	.word	0x08012dc8

0800d840 <rt_hw_interrupt_disable>:

.global rt_hw_interrupt_disable
.type rt_hw_interrupt_disable, %function
//关中断
rt_hw_interrupt_disable:
    MRS     r0, PRIMASK
 800d840:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 800d844:	b672      	cpsid	i
    BX      LR
 800d846:	4770      	bx	lr

0800d848 <rt_hw_interrupt_enable>:
 */
.global rt_hw_interrupt_enable
.type rt_hw_interrupt_enable, %function
//开中断
rt_hw_interrupt_enable:
    MSR     PRIMASK, r0
 800d848:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 800d84c:	4770      	bx	lr

0800d84e <rt_hw_context_switch>:
.type rt_hw_context_switch, %function
//上下文切换函数
rt_hw_context_switch_interrupt:
rt_hw_context_switch:
    //设置中断标志位rt_thread_switch_interrupt_flag为1
    LDR     r2, =rt_thread_switch_interrupt_flag   //加载rt_thread_switch_interrupt_flag的地址到r2
 800d84e:	4a44      	ldr	r2, [pc, #272]	; (800d960 <_update_done+0x10>)
    LDR     r3, [r2]                         //加载rt_thread_switch_interrupt_flag的值到r3
 800d850:	6813      	ldr	r3, [r2, #0]
    CMP     r3, #1                         //r3与1比较，相等则执行BEQ指令，否则不执行
 800d852:	2b01      	cmp	r3, #1
    BEQ     _reswitch
 800d854:	d004      	beq.n	800d860 <_reswitch>
    MOV     r3, #1                       //设置r3的值为1
 800d856:	f04f 0301 	mov.w	r3, #1
    STR     r3, [r2]                       //将r3的值存储到rt_thread_switch_interrupt_flag，即置1
 800d85a:	6013      	str	r3, [r2, #0]
    //设置rt_interrupt_from_thread的值
    LDR     r2, =rt_interrupt_from_thread   //加载rt_interrupt_from_thread的地址到r2
 800d85c:	4a41      	ldr	r2, [pc, #260]	; (800d964 <_update_done+0x14>)
    STR     r0, [r2]          //存储r0的值到rt_interrupt_from_thread，即上一个线程栈指针sp的指针
 800d85e:	6010      	str	r0, [r2, #0]

0800d860 <_reswitch>:

_reswitch:
    //设置rt_interrupt_to_thread的值
    LDR     r2, =rt_interrupt_to_thread     //加载rt_interrupt_to_thread的地址到r2
 800d860:	4a41      	ldr	r2, [pc, #260]	; (800d968 <_update_done+0x18>)
    STR     r1, [r2]      //存储r1的值到rt_interrupt_to_thread，即下一个线程栈指针sp的指针
 800d862:	6011      	str	r1, [r2, #0]
    //触发PendSV异常，实现上下文切换
LDR r0, =NVIC_INT_CTRL
 800d864:	4841      	ldr	r0, [pc, #260]	; (800d96c <_update_done+0x1c>)
    LDR r1, =NVIC_PENDSVSET
 800d866:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR r1, [r0]
 800d86a:	6001      	str	r1, [r0, #0]
    //子程序返回
    BX  LR
 800d86c:	4770      	bx	lr

0800d86e <PendSV_Handler>:
.global PendSV_Handler
.type PendSV_Handler, %function
PendSV_Handler:
    //关中断，保护上下文切换不被中断，MRS加载特殊功能寄存器的值到通用寄存器
    //中断屏蔽寄存器（PRIMASK）D31~D1位保留，只有D0位有意义，CPSID  i将D0位置1（关总中断）
    MRS r2, PRIMASK
 800d86e:	f3ef 8210 	mrs	r2, PRIMASK
    CPSID   I
 800d872:	b672      	cpsid	i
    //获取中断标志位判断是否为0
    LDR r0, =rt_thread_switch_interrupt_flag    //加载rt_thread_switch_interrupt_flag的地址到r0
 800d874:	483a      	ldr	r0, [pc, #232]	; (800d960 <_update_done+0x10>)
    LDR r1, [r0]                           //加载rt_thread_switch_interrupt_flag的值到r1
 800d876:	6801      	ldr	r1, [r0, #0]
    CBZ r1, pendsv_exit                    //判断r1是否为0，为0则跳转到pendsv_exit
 800d878:	b351      	cbz	r1, 800d8d0 <pendsv_exit>

    MOV r1, #0x00                       //r1不为0则清0
 800d87a:	f04f 0100 	mov.w	r1, #0
    STR r1, [r0]                        //将r1的值存储到rt_thread_switch_interrupt_flag，即清0
 800d87e:	6001      	str	r1, [r0, #0]
    //判断rt_interrupt_from_thread的值是否为0
    LDR r0, =rt_interrupt_from_thread    //加载rt_interrupt_from_thread的地址到r0
 800d880:	4838      	ldr	r0, [pc, #224]	; (800d964 <_update_done+0x14>)
    LDR r1, [r0]                      //加载rt_interrupt_from_thread的值到r1
 800d882:	6801      	ldr	r1, [r0, #0]
    CBZ r1, switch_to_thread          //第一次线程切换时rt_interrupt_from_thread肯定为0，
 800d884:	b191      	cbz	r1, 800d8ac <switch_to_thread>

    //上文保存
    //当进入PendSVC Handler时，上一个线程运行的环境即xPSR，PC（线程入口地址），R14，R12，
    //R3，R2，R1，R0（线程的形参），这些CPU寄存器的值会自动保存到线程的栈中，剩下的r4~r11需
    //要手动保存。
    MRS r1, psp                 //获取线程栈指针到r1
 800d886:	f3ef 8109 	mrs	r1, PSP
    
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    TST     lr, #0x10         //if(!EXC_RETURN[4])
 800d88a:	f01e 0f10 	tst.w	lr, #16
                              //检查扩展堆栈帧（通过检查该位来表示是否需要FPU寄存器组）
    VSTMDBEQ r1!, {d8 - d15}     //保存FPU寄存器s16~s31
 800d88e:	bf08      	it	eq
 800d890:	ed21 8b10 	vstmdbeq	r1!, {d8-d15}
#endif
    
    STMFD   r1!, {r4 - r11}      //将CPU寄存器r4~r11的值存储到r1指向的地址
 800d894:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
                                  //(每操作一次地址将递减一次)

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    MOV     r4, #0x00           /* flag = 0 */
 800d898:	f04f 0400 	mov.w	r4, #0
    TST     lr, #0x10           /* if(!EXC_RETURN[4]) */
 800d89c:	f01e 0f10 	tst.w	lr, #16
    MOVEQ   r4, #0x01           /* flag = 1 */
 800d8a0:	bf08      	it	eq
 800d8a2:	2401      	moveq	r4, #1
    STMFD   r1!, {r4}           /* push flag */
 800d8a4:	f841 4d04 	str.w	r4, [r1, #-4]!
#endif

    LDR r0, [r0]               //加载r0指向值到r0，即r0=rt_interrupt_from_thread
 800d8a8:	6800      	ldr	r0, [r0, #0]
    STR r1, [r0]                //将r1的值存储到r0，即更新线程栈sp
 800d8aa:	6001      	str	r1, [r0, #0]

0800d8ac <switch_to_thread>:

//上下文切换
switch_to_thread:
    LDR r1, =rt_interrupt_to_thread  //加载rt_interrupt_to_thread的地址到r1
 800d8ac:	492e      	ldr	r1, [pc, #184]	; (800d968 <_update_done+0x18>)
                                     // rt_interrupt_to_thread是一个全局变量，里面存的是线程栈指针SP的指针
    LDR r1, [r1]                  //加载rt_interrupt_to_thread的值到r1，即sp的指针
 800d8ae:	6809      	ldr	r1, [r1, #0]
    LDR r1, [r1]                //加载sp到r1
 800d8b0:	6809      	ldr	r1, [r1, #0]
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    LDMFD   r1!, {r3}           /* pop flag */
 800d8b2:	c908      	ldmia	r1!, {r3}
#endif

    LDMFD   r1!, {r4 - r11}          //将线程栈指针r1(操作之前先递减)指向的内容
 800d8b4:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
                                      //加载到CPU寄存器r4~r11

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    CMP     r3,  #0             /* if(flag_r3 != 0) */
 800d8b8:	2b00      	cmp	r3, #0
    VLDMIANE  r1!, {d8 - d15}   /* pop FPU register s16~s31 */
 800d8ba:	bf18      	it	ne
 800d8bc:	ecb1 8b10 	vldmiane	r1!, {d8-d15}
#endif

    MSR psp, r1                 //线程栈指针更新到PSP
 800d8c0:	f381 8809 	msr	PSP, r1

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    ORR     lr, lr, #0x10       /* lr |=  (1 << 4), clean FPCA. */
 800d8c4:	f04e 0e10 	orr.w	lr, lr, #16
    CMP     r3,  #0             /* if(flag_r3 != 0) */
 800d8c8:	2b00      	cmp	r3, #0
    BICNE   lr, lr, #0x10       /* lr &= ~(1 << 4), set FPCA. */
 800d8ca:	bf18      	it	ne
 800d8cc:	f02e 0e10 	bicne.w	lr, lr, #16

0800d8d0 <pendsv_exit>:
#endif

pendsv_exit:
    MSR PRIMASK, r2             //恢复中断
 800d8d0:	f382 8810 	msr	PRIMASK, r2
    ORR lr, lr, #0x04       //确保异常返回使用的栈指针是PSP，即LR寄存器的位2要为1
 800d8d4:	f04e 0e04 	orr.w	lr, lr, #4
                           //异常返回，这个时候栈中的剩下内容将会自动加载到CPU寄存器：xPSR，PC（线程入口地址），
                          //R14，R12，R3，R2，R1，R0（线程的形参），同时PSP的值也将更新，即指向线程栈的栈顶
    BX  lr
 800d8d8:	4770      	bx	lr

0800d8da <rt_hw_context_switch_to>:
 */
.global rt_hw_context_switch_to
.type rt_hw_context_switch_to, %function
rt_hw_context_switch_to:
    //（1）将下一个将要运行的线程的栈的sp的指针存放到rt_interrupt_to_thread
    LDR r1, =rt_interrupt_to_thread   //将rt_interrupt_to_thread的地址加载到r1
 800d8da:	4923      	ldr	r1, [pc, #140]	; (800d968 <_update_done+0x18>)
    STR r0, [r1]                    //将r0的值存储到rt_interrupt_to_thread
 800d8dc:	6008      	str	r0, [r1, #0]
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    //第一次线程启动，不需要FPU寄存器保存，强制清除CONTROL[2]标志。此时为堆栈是MSP，也就是复位后进入第一个线程之前的状态
    MRS     r2, CONTROL         /* read */
 800d8de:	f3ef 8214 	mrs	r2, CONTROL
    BIC     r2, #0x04           /* modify */
 800d8e2:	f022 0204 	bic.w	r2, r2, #4
    MSR     CONTROL, r2         /* write-back */
 800d8e6:	f382 8814 	msr	CONTROL, r2
#endif
    //（2）设置rt_interrupt_from_thread的值为0，表示启动第一次线程切换
    LDR r1, =rt_interrupt_from_thread  //将rt_interrupt_from_thread的地址加载到r1
 800d8ea:	491e      	ldr	r1, [pc, #120]	; (800d964 <_update_done+0x14>)
    MOV r0, #0x0                   //配置r0等于0
 800d8ec:	f04f 0000 	mov.w	r0, #0
    STR r0, [r1]                     //将r0的值存储到rt_interrupt_from_thread
 800d8f0:	6008      	str	r0, [r1, #0]
    //（3）设置中断标志位rt_thread_switch_interrupt_flag的值为1
    LDR     r1, =rt_thread_switch_interrupt_flag   //将rt_thread_switch_interrupt_flag的地址加载到r1
 800d8f2:	491b      	ldr	r1, [pc, #108]	; (800d960 <_update_done+0x10>)
    MOV     r0, #1                            //配置r0等于1
 800d8f4:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r1]                           //将r0的值存储到rt_thread_switch_interrupt_flag
 800d8f8:	6008      	str	r0, [r1, #0]
    //（4）设置 PendSV 异常的优先级
    LDR r0, =NVIC_SYSPRI2     //将系统优先级寄存器2地址加载到r0
 800d8fa:	481d      	ldr	r0, [pc, #116]	; (800d970 <_update_done+0x20>)
    LDR r1, =NVIC_PENDSV_PRI   //将PendSV优先级值 (lowest)加载到r1
 800d8fc:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    LDR.W   r2, [r0,#0x00]       //读，（LDR.W始终生成32位指令），将r0保存的系统优先级寄存器2地址加载到r2
 800d900:	f8d0 2000 	ldr.w	r2, [r0]
    ORR     r1,r1,r2             //改，将r1与r2进行“或”运算并将值返回到r1
 800d904:	ea41 0102 	orr.w	r1, r1, r2
    STR     r1, [r0]             //写，将r1值存储到系统优先级寄存器2，即更新设置PendSV优先级值为最低
 800d908:	6001      	str	r1, [r0, #0]
    //（5）触发 PendSV异常 (产生上下文切换)
    LDR r0, =NVIC_INT_CTRL    //将中断控制状态寄存器地址加载到r0
 800d90a:	4818      	ldr	r0, [pc, #96]	; (800d96c <_update_done+0x1c>)
    LDR r1, =NVIC_PENDSVSET   //将能触发PendSV异常的值加载到r1
 800d90c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR r1, [r0]              //更新中断控制状态寄存器，触发PendSV异常
 800d910:	6001      	str	r1, [r0, #0]
    //（6）恢复主堆栈指针MSP
    LDR     r0, =SCB_VTOR   //将中断向量表偏移寄存器地址加载到r0，实际通过中断向量表定位堆栈地址
 800d912:	4818      	ldr	r0, [pc, #96]	; (800d974 <_update_done+0x24>)
    LDR     r0, [r0]
 800d914:	6800      	ldr	r0, [r0, #0]
    LDR     r0, [r0]
 800d916:	6800      	ldr	r0, [r0, #0]
    NOP
 800d918:	bf00      	nop
    MSR     msp, r0        //恢复主堆栈指针MSP，将堆栈地址保存到MSP中
 800d91a:	f380 8808 	msr	MSP, r0
    //（7）使能中断，pendSV中断开始执行，完成首个线程切换
    CPSIE   F
 800d91e:	b661      	cpsie	f
    CPSIE   I
 800d920:	b662      	cpsie	i

0800d922 <rt_hw_interrupt_thread_switch>:

/* compatible with old version */
.global rt_hw_interrupt_thread_switch
.type rt_hw_interrupt_thread_switch, %function
rt_hw_interrupt_thread_switch:
    BX  lr
 800d922:	4770      	bx	lr
    NOP
 800d924:	bf00      	nop

0800d926 <HardFault_Handler>:

.global HardFault_Handler
.type HardFault_Handler, %function
HardFault_Handler:
    /* get current context */
    MRS     r0, msp                 /* get fault context from handler. */
 800d926:	f3ef 8008 	mrs	r0, MSP
    TST     lr, #0x04               /* if(!EXC_RETURN[2]) */
 800d92a:	f01e 0f04 	tst.w	lr, #4
    BEQ     _get_sp_done
 800d92e:	d001      	beq.n	800d934 <_get_sp_done>
    MRS     r0, psp                 /* get fault context from thread. */
 800d930:	f3ef 8009 	mrs	r0, PSP

0800d934 <_get_sp_done>:
_get_sp_done:

    STMFD   r0!, {r4 - r11}         /* push r4 - r11 register */
 800d934:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
#if defined (__VFP_FP__) && !defined(__SOFTFP__)
    STMFD   r0!, {lr}               /* push dummy for flag */
 800d938:	f840 ed04 	str.w	lr, [r0, #-4]!
#endif
    STMFD   r0!, {lr}               /* push exec_return register */
 800d93c:	f840 ed04 	str.w	lr, [r0, #-4]!

    TST     lr, #0x04               /* if(!EXC_RETURN[2]) */
 800d940:	f01e 0f04 	tst.w	lr, #4
    BEQ     _update_msp
 800d944:	d002      	beq.n	800d94c <_update_msp>
    MSR     psp, r0                 /* update stack pointer to PSP. */
 800d946:	f380 8809 	msr	PSP, r0
    B       _update_done
 800d94a:	e001      	b.n	800d950 <_update_done>

0800d94c <_update_msp>:
_update_msp:
    MSR     msp, r0                 /* update stack pointer to MSP. */
 800d94c:	f380 8808 	msr	MSP, r0

0800d950 <_update_done>:
_update_done:

    PUSH    {LR}
 800d950:	b500      	push	{lr}
    BL      rt_hw_hard_fault_exception
 800d952:	f000 fe9d 	bl	800e690 <rt_hw_hard_fault_exception>
    POP     {LR}
 800d956:	f85d eb04 	ldr.w	lr, [sp], #4

    ORR     lr, lr, #0x04
 800d95a:	f04e 0e04 	orr.w	lr, lr, #4
    BX      lr
 800d95e:	4770      	bx	lr
    LDR     r2, =rt_thread_switch_interrupt_flag   //加载rt_thread_switch_interrupt_flag的地址到r2
 800d960:	20007320 	.word	0x20007320
    LDR     r2, =rt_interrupt_from_thread   //加载rt_interrupt_from_thread的地址到r2
 800d964:	2000731c 	.word	0x2000731c
    LDR     r2, =rt_interrupt_to_thread     //加载rt_interrupt_to_thread的地址到r2
 800d968:	20007318 	.word	0x20007318
LDR r0, =NVIC_INT_CTRL
 800d96c:	e000ed04 	.word	0xe000ed04
    LDR r0, =NVIC_SYSPRI2     //将系统优先级寄存器2地址加载到r0
 800d970:	e000ed20 	.word	0xe000ed20
    LDR     r0, =SCB_VTOR   //将中断向量表偏移寄存器地址加载到r0，实际通过中断向量表定位堆栈地址
 800d974:	e000ed08 	.word	0xe000ed08

0800d978 <strlen>:
 800d978:	4603      	mov	r3, r0
 800d97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97e:	2a00      	cmp	r2, #0
 800d980:	d1fb      	bne.n	800d97a <strlen+0x2>
 800d982:	1a18      	subs	r0, r3, r0
 800d984:	3801      	subs	r0, #1
 800d986:	4770      	bx	lr

0800d988 <__aeabi_drsub>:
 800d988:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d98c:	e002      	b.n	800d994 <__adddf3>
 800d98e:	bf00      	nop

0800d990 <__aeabi_dsub>:
 800d990:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d994 <__adddf3>:
 800d994:	b530      	push	{r4, r5, lr}
 800d996:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d99a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d99e:	ea94 0f05 	teq	r4, r5
 800d9a2:	bf08      	it	eq
 800d9a4:	ea90 0f02 	teqeq	r0, r2
 800d9a8:	bf1f      	itttt	ne
 800d9aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d9ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d9b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d9b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d9ba:	f000 80e2 	beq.w	800db82 <__adddf3+0x1ee>
 800d9be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d9c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d9c6:	bfb8      	it	lt
 800d9c8:	426d      	neglt	r5, r5
 800d9ca:	dd0c      	ble.n	800d9e6 <__adddf3+0x52>
 800d9cc:	442c      	add	r4, r5
 800d9ce:	ea80 0202 	eor.w	r2, r0, r2
 800d9d2:	ea81 0303 	eor.w	r3, r1, r3
 800d9d6:	ea82 0000 	eor.w	r0, r2, r0
 800d9da:	ea83 0101 	eor.w	r1, r3, r1
 800d9de:	ea80 0202 	eor.w	r2, r0, r2
 800d9e2:	ea81 0303 	eor.w	r3, r1, r3
 800d9e6:	2d36      	cmp	r5, #54	; 0x36
 800d9e8:	bf88      	it	hi
 800d9ea:	bd30      	pophi	{r4, r5, pc}
 800d9ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d9f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d9f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d9f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d9fc:	d002      	beq.n	800da04 <__adddf3+0x70>
 800d9fe:	4240      	negs	r0, r0
 800da00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800da04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800da08:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800da0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800da10:	d002      	beq.n	800da18 <__adddf3+0x84>
 800da12:	4252      	negs	r2, r2
 800da14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800da18:	ea94 0f05 	teq	r4, r5
 800da1c:	f000 80a7 	beq.w	800db6e <__adddf3+0x1da>
 800da20:	f1a4 0401 	sub.w	r4, r4, #1
 800da24:	f1d5 0e20 	rsbs	lr, r5, #32
 800da28:	db0d      	blt.n	800da46 <__adddf3+0xb2>
 800da2a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800da2e:	fa22 f205 	lsr.w	r2, r2, r5
 800da32:	1880      	adds	r0, r0, r2
 800da34:	f141 0100 	adc.w	r1, r1, #0
 800da38:	fa03 f20e 	lsl.w	r2, r3, lr
 800da3c:	1880      	adds	r0, r0, r2
 800da3e:	fa43 f305 	asr.w	r3, r3, r5
 800da42:	4159      	adcs	r1, r3
 800da44:	e00e      	b.n	800da64 <__adddf3+0xd0>
 800da46:	f1a5 0520 	sub.w	r5, r5, #32
 800da4a:	f10e 0e20 	add.w	lr, lr, #32
 800da4e:	2a01      	cmp	r2, #1
 800da50:	fa03 fc0e 	lsl.w	ip, r3, lr
 800da54:	bf28      	it	cs
 800da56:	f04c 0c02 	orrcs.w	ip, ip, #2
 800da5a:	fa43 f305 	asr.w	r3, r3, r5
 800da5e:	18c0      	adds	r0, r0, r3
 800da60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800da64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800da68:	d507      	bpl.n	800da7a <__adddf3+0xe6>
 800da6a:	f04f 0e00 	mov.w	lr, #0
 800da6e:	f1dc 0c00 	rsbs	ip, ip, #0
 800da72:	eb7e 0000 	sbcs.w	r0, lr, r0
 800da76:	eb6e 0101 	sbc.w	r1, lr, r1
 800da7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800da7e:	d31b      	bcc.n	800dab8 <__adddf3+0x124>
 800da80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800da84:	d30c      	bcc.n	800daa0 <__adddf3+0x10c>
 800da86:	0849      	lsrs	r1, r1, #1
 800da88:	ea5f 0030 	movs.w	r0, r0, rrx
 800da8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800da90:	f104 0401 	add.w	r4, r4, #1
 800da94:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800da98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800da9c:	f080 809a 	bcs.w	800dbd4 <__adddf3+0x240>
 800daa0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800daa4:	bf08      	it	eq
 800daa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800daaa:	f150 0000 	adcs.w	r0, r0, #0
 800daae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800dab2:	ea41 0105 	orr.w	r1, r1, r5
 800dab6:	bd30      	pop	{r4, r5, pc}
 800dab8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800dabc:	4140      	adcs	r0, r0
 800dabe:	eb41 0101 	adc.w	r1, r1, r1
 800dac2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800dac6:	f1a4 0401 	sub.w	r4, r4, #1
 800daca:	d1e9      	bne.n	800daa0 <__adddf3+0x10c>
 800dacc:	f091 0f00 	teq	r1, #0
 800dad0:	bf04      	itt	eq
 800dad2:	4601      	moveq	r1, r0
 800dad4:	2000      	moveq	r0, #0
 800dad6:	fab1 f381 	clz	r3, r1
 800dada:	bf08      	it	eq
 800dadc:	3320      	addeq	r3, #32
 800dade:	f1a3 030b 	sub.w	r3, r3, #11
 800dae2:	f1b3 0220 	subs.w	r2, r3, #32
 800dae6:	da0c      	bge.n	800db02 <__adddf3+0x16e>
 800dae8:	320c      	adds	r2, #12
 800daea:	dd08      	ble.n	800dafe <__adddf3+0x16a>
 800daec:	f102 0c14 	add.w	ip, r2, #20
 800daf0:	f1c2 020c 	rsb	r2, r2, #12
 800daf4:	fa01 f00c 	lsl.w	r0, r1, ip
 800daf8:	fa21 f102 	lsr.w	r1, r1, r2
 800dafc:	e00c      	b.n	800db18 <__adddf3+0x184>
 800dafe:	f102 0214 	add.w	r2, r2, #20
 800db02:	bfd8      	it	le
 800db04:	f1c2 0c20 	rsble	ip, r2, #32
 800db08:	fa01 f102 	lsl.w	r1, r1, r2
 800db0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800db10:	bfdc      	itt	le
 800db12:	ea41 010c 	orrle.w	r1, r1, ip
 800db16:	4090      	lslle	r0, r2
 800db18:	1ae4      	subs	r4, r4, r3
 800db1a:	bfa2      	ittt	ge
 800db1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800db20:	4329      	orrge	r1, r5
 800db22:	bd30      	popge	{r4, r5, pc}
 800db24:	ea6f 0404 	mvn.w	r4, r4
 800db28:	3c1f      	subs	r4, #31
 800db2a:	da1c      	bge.n	800db66 <__adddf3+0x1d2>
 800db2c:	340c      	adds	r4, #12
 800db2e:	dc0e      	bgt.n	800db4e <__adddf3+0x1ba>
 800db30:	f104 0414 	add.w	r4, r4, #20
 800db34:	f1c4 0220 	rsb	r2, r4, #32
 800db38:	fa20 f004 	lsr.w	r0, r0, r4
 800db3c:	fa01 f302 	lsl.w	r3, r1, r2
 800db40:	ea40 0003 	orr.w	r0, r0, r3
 800db44:	fa21 f304 	lsr.w	r3, r1, r4
 800db48:	ea45 0103 	orr.w	r1, r5, r3
 800db4c:	bd30      	pop	{r4, r5, pc}
 800db4e:	f1c4 040c 	rsb	r4, r4, #12
 800db52:	f1c4 0220 	rsb	r2, r4, #32
 800db56:	fa20 f002 	lsr.w	r0, r0, r2
 800db5a:	fa01 f304 	lsl.w	r3, r1, r4
 800db5e:	ea40 0003 	orr.w	r0, r0, r3
 800db62:	4629      	mov	r1, r5
 800db64:	bd30      	pop	{r4, r5, pc}
 800db66:	fa21 f004 	lsr.w	r0, r1, r4
 800db6a:	4629      	mov	r1, r5
 800db6c:	bd30      	pop	{r4, r5, pc}
 800db6e:	f094 0f00 	teq	r4, #0
 800db72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800db76:	bf06      	itte	eq
 800db78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800db7c:	3401      	addeq	r4, #1
 800db7e:	3d01      	subne	r5, #1
 800db80:	e74e      	b.n	800da20 <__adddf3+0x8c>
 800db82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800db86:	bf18      	it	ne
 800db88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800db8c:	d029      	beq.n	800dbe2 <__adddf3+0x24e>
 800db8e:	ea94 0f05 	teq	r4, r5
 800db92:	bf08      	it	eq
 800db94:	ea90 0f02 	teqeq	r0, r2
 800db98:	d005      	beq.n	800dba6 <__adddf3+0x212>
 800db9a:	ea54 0c00 	orrs.w	ip, r4, r0
 800db9e:	bf04      	itt	eq
 800dba0:	4619      	moveq	r1, r3
 800dba2:	4610      	moveq	r0, r2
 800dba4:	bd30      	pop	{r4, r5, pc}
 800dba6:	ea91 0f03 	teq	r1, r3
 800dbaa:	bf1e      	ittt	ne
 800dbac:	2100      	movne	r1, #0
 800dbae:	2000      	movne	r0, #0
 800dbb0:	bd30      	popne	{r4, r5, pc}
 800dbb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800dbb6:	d105      	bne.n	800dbc4 <__adddf3+0x230>
 800dbb8:	0040      	lsls	r0, r0, #1
 800dbba:	4149      	adcs	r1, r1
 800dbbc:	bf28      	it	cs
 800dbbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800dbc2:	bd30      	pop	{r4, r5, pc}
 800dbc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800dbc8:	bf3c      	itt	cc
 800dbca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800dbce:	bd30      	popcc	{r4, r5, pc}
 800dbd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dbd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800dbd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbdc:	f04f 0000 	mov.w	r0, #0
 800dbe0:	bd30      	pop	{r4, r5, pc}
 800dbe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800dbe6:	bf1a      	itte	ne
 800dbe8:	4619      	movne	r1, r3
 800dbea:	4610      	movne	r0, r2
 800dbec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800dbf0:	bf1c      	itt	ne
 800dbf2:	460b      	movne	r3, r1
 800dbf4:	4602      	movne	r2, r0
 800dbf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800dbfa:	bf06      	itte	eq
 800dbfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800dc00:	ea91 0f03 	teqeq	r1, r3
 800dc04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800dc08:	bd30      	pop	{r4, r5, pc}
 800dc0a:	bf00      	nop

0800dc0c <__aeabi_ui2d>:
 800dc0c:	f090 0f00 	teq	r0, #0
 800dc10:	bf04      	itt	eq
 800dc12:	2100      	moveq	r1, #0
 800dc14:	4770      	bxeq	lr
 800dc16:	b530      	push	{r4, r5, lr}
 800dc18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dc1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dc20:	f04f 0500 	mov.w	r5, #0
 800dc24:	f04f 0100 	mov.w	r1, #0
 800dc28:	e750      	b.n	800dacc <__adddf3+0x138>
 800dc2a:	bf00      	nop

0800dc2c <__aeabi_i2d>:
 800dc2c:	f090 0f00 	teq	r0, #0
 800dc30:	bf04      	itt	eq
 800dc32:	2100      	moveq	r1, #0
 800dc34:	4770      	bxeq	lr
 800dc36:	b530      	push	{r4, r5, lr}
 800dc38:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dc3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dc40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800dc44:	bf48      	it	mi
 800dc46:	4240      	negmi	r0, r0
 800dc48:	f04f 0100 	mov.w	r1, #0
 800dc4c:	e73e      	b.n	800dacc <__adddf3+0x138>
 800dc4e:	bf00      	nop

0800dc50 <__aeabi_f2d>:
 800dc50:	0042      	lsls	r2, r0, #1
 800dc52:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800dc56:	ea4f 0131 	mov.w	r1, r1, rrx
 800dc5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800dc5e:	bf1f      	itttt	ne
 800dc60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800dc64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800dc68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800dc6c:	4770      	bxne	lr
 800dc6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800dc72:	bf08      	it	eq
 800dc74:	4770      	bxeq	lr
 800dc76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800dc7a:	bf04      	itt	eq
 800dc7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800dc80:	4770      	bxeq	lr
 800dc82:	b530      	push	{r4, r5, lr}
 800dc84:	f44f 7460 	mov.w	r4, #896	; 0x380
 800dc88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dc8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dc90:	e71c      	b.n	800dacc <__adddf3+0x138>
 800dc92:	bf00      	nop

0800dc94 <__aeabi_ul2d>:
 800dc94:	ea50 0201 	orrs.w	r2, r0, r1
 800dc98:	bf08      	it	eq
 800dc9a:	4770      	bxeq	lr
 800dc9c:	b530      	push	{r4, r5, lr}
 800dc9e:	f04f 0500 	mov.w	r5, #0
 800dca2:	e00a      	b.n	800dcba <__aeabi_l2d+0x16>

0800dca4 <__aeabi_l2d>:
 800dca4:	ea50 0201 	orrs.w	r2, r0, r1
 800dca8:	bf08      	it	eq
 800dcaa:	4770      	bxeq	lr
 800dcac:	b530      	push	{r4, r5, lr}
 800dcae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800dcb2:	d502      	bpl.n	800dcba <__aeabi_l2d+0x16>
 800dcb4:	4240      	negs	r0, r0
 800dcb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dcba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dcbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dcc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800dcc6:	f43f aed8 	beq.w	800da7a <__adddf3+0xe6>
 800dcca:	f04f 0203 	mov.w	r2, #3
 800dcce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dcd2:	bf18      	it	ne
 800dcd4:	3203      	addne	r2, #3
 800dcd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dcda:	bf18      	it	ne
 800dcdc:	3203      	addne	r2, #3
 800dcde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800dce2:	f1c2 0320 	rsb	r3, r2, #32
 800dce6:	fa00 fc03 	lsl.w	ip, r0, r3
 800dcea:	fa20 f002 	lsr.w	r0, r0, r2
 800dcee:	fa01 fe03 	lsl.w	lr, r1, r3
 800dcf2:	ea40 000e 	orr.w	r0, r0, lr
 800dcf6:	fa21 f102 	lsr.w	r1, r1, r2
 800dcfa:	4414      	add	r4, r2
 800dcfc:	e6bd      	b.n	800da7a <__adddf3+0xe6>
 800dcfe:	bf00      	nop

0800dd00 <__aeabi_dmul>:
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800dd06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800dd0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800dd0e:	bf1d      	ittte	ne
 800dd10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800dd14:	ea94 0f0c 	teqne	r4, ip
 800dd18:	ea95 0f0c 	teqne	r5, ip
 800dd1c:	f000 f8de 	bleq	800dedc <__aeabi_dmul+0x1dc>
 800dd20:	442c      	add	r4, r5
 800dd22:	ea81 0603 	eor.w	r6, r1, r3
 800dd26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800dd2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800dd2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800dd32:	bf18      	it	ne
 800dd34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800dd38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dd3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd40:	d038      	beq.n	800ddb4 <__aeabi_dmul+0xb4>
 800dd42:	fba0 ce02 	umull	ip, lr, r0, r2
 800dd46:	f04f 0500 	mov.w	r5, #0
 800dd4a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800dd4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800dd52:	fbe0 e503 	umlal	lr, r5, r0, r3
 800dd56:	f04f 0600 	mov.w	r6, #0
 800dd5a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800dd5e:	f09c 0f00 	teq	ip, #0
 800dd62:	bf18      	it	ne
 800dd64:	f04e 0e01 	orrne.w	lr, lr, #1
 800dd68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800dd6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800dd70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800dd74:	d204      	bcs.n	800dd80 <__aeabi_dmul+0x80>
 800dd76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800dd7a:	416d      	adcs	r5, r5
 800dd7c:	eb46 0606 	adc.w	r6, r6, r6
 800dd80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800dd84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800dd88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800dd8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800dd90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800dd94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800dd98:	bf88      	it	hi
 800dd9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800dd9e:	d81e      	bhi.n	800ddde <__aeabi_dmul+0xde>
 800dda0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800dda4:	bf08      	it	eq
 800dda6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ddaa:	f150 0000 	adcs.w	r0, r0, #0
 800ddae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
 800ddb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ddb8:	ea46 0101 	orr.w	r1, r6, r1
 800ddbc:	ea40 0002 	orr.w	r0, r0, r2
 800ddc0:	ea81 0103 	eor.w	r1, r1, r3
 800ddc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ddc8:	bfc2      	ittt	gt
 800ddca:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ddce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ddd2:	bd70      	popgt	{r4, r5, r6, pc}
 800ddd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ddd8:	f04f 0e00 	mov.w	lr, #0
 800dddc:	3c01      	subs	r4, #1
 800ddde:	f300 80ab 	bgt.w	800df38 <__aeabi_dmul+0x238>
 800dde2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800dde6:	bfde      	ittt	le
 800dde8:	2000      	movle	r0, #0
 800ddea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800ddee:	bd70      	pople	{r4, r5, r6, pc}
 800ddf0:	f1c4 0400 	rsb	r4, r4, #0
 800ddf4:	3c20      	subs	r4, #32
 800ddf6:	da35      	bge.n	800de64 <__aeabi_dmul+0x164>
 800ddf8:	340c      	adds	r4, #12
 800ddfa:	dc1b      	bgt.n	800de34 <__aeabi_dmul+0x134>
 800ddfc:	f104 0414 	add.w	r4, r4, #20
 800de00:	f1c4 0520 	rsb	r5, r4, #32
 800de04:	fa00 f305 	lsl.w	r3, r0, r5
 800de08:	fa20 f004 	lsr.w	r0, r0, r4
 800de0c:	fa01 f205 	lsl.w	r2, r1, r5
 800de10:	ea40 0002 	orr.w	r0, r0, r2
 800de14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800de18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800de20:	fa21 f604 	lsr.w	r6, r1, r4
 800de24:	eb42 0106 	adc.w	r1, r2, r6
 800de28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800de2c:	bf08      	it	eq
 800de2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800de32:	bd70      	pop	{r4, r5, r6, pc}
 800de34:	f1c4 040c 	rsb	r4, r4, #12
 800de38:	f1c4 0520 	rsb	r5, r4, #32
 800de3c:	fa00 f304 	lsl.w	r3, r0, r4
 800de40:	fa20 f005 	lsr.w	r0, r0, r5
 800de44:	fa01 f204 	lsl.w	r2, r1, r4
 800de48:	ea40 0002 	orr.w	r0, r0, r2
 800de4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800de50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800de54:	f141 0100 	adc.w	r1, r1, #0
 800de58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800de5c:	bf08      	it	eq
 800de5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	f1c4 0520 	rsb	r5, r4, #32
 800de68:	fa00 f205 	lsl.w	r2, r0, r5
 800de6c:	ea4e 0e02 	orr.w	lr, lr, r2
 800de70:	fa20 f304 	lsr.w	r3, r0, r4
 800de74:	fa01 f205 	lsl.w	r2, r1, r5
 800de78:	ea43 0302 	orr.w	r3, r3, r2
 800de7c:	fa21 f004 	lsr.w	r0, r1, r4
 800de80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800de84:	fa21 f204 	lsr.w	r2, r1, r4
 800de88:	ea20 0002 	bic.w	r0, r0, r2
 800de8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800de90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800de94:	bf08      	it	eq
 800de96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800de9a:	bd70      	pop	{r4, r5, r6, pc}
 800de9c:	f094 0f00 	teq	r4, #0
 800dea0:	d10f      	bne.n	800dec2 <__aeabi_dmul+0x1c2>
 800dea2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800dea6:	0040      	lsls	r0, r0, #1
 800dea8:	eb41 0101 	adc.w	r1, r1, r1
 800deac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800deb0:	bf08      	it	eq
 800deb2:	3c01      	subeq	r4, #1
 800deb4:	d0f7      	beq.n	800dea6 <__aeabi_dmul+0x1a6>
 800deb6:	ea41 0106 	orr.w	r1, r1, r6
 800deba:	f095 0f00 	teq	r5, #0
 800debe:	bf18      	it	ne
 800dec0:	4770      	bxne	lr
 800dec2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800dec6:	0052      	lsls	r2, r2, #1
 800dec8:	eb43 0303 	adc.w	r3, r3, r3
 800decc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ded0:	bf08      	it	eq
 800ded2:	3d01      	subeq	r5, #1
 800ded4:	d0f7      	beq.n	800dec6 <__aeabi_dmul+0x1c6>
 800ded6:	ea43 0306 	orr.w	r3, r3, r6
 800deda:	4770      	bx	lr
 800dedc:	ea94 0f0c 	teq	r4, ip
 800dee0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dee4:	bf18      	it	ne
 800dee6:	ea95 0f0c 	teqne	r5, ip
 800deea:	d00c      	beq.n	800df06 <__aeabi_dmul+0x206>
 800deec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800def0:	bf18      	it	ne
 800def2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800def6:	d1d1      	bne.n	800de9c <__aeabi_dmul+0x19c>
 800def8:	ea81 0103 	eor.w	r1, r1, r3
 800defc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800df00:	f04f 0000 	mov.w	r0, #0
 800df04:	bd70      	pop	{r4, r5, r6, pc}
 800df06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800df0a:	bf06      	itte	eq
 800df0c:	4610      	moveq	r0, r2
 800df0e:	4619      	moveq	r1, r3
 800df10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800df14:	d019      	beq.n	800df4a <__aeabi_dmul+0x24a>
 800df16:	ea94 0f0c 	teq	r4, ip
 800df1a:	d102      	bne.n	800df22 <__aeabi_dmul+0x222>
 800df1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800df20:	d113      	bne.n	800df4a <__aeabi_dmul+0x24a>
 800df22:	ea95 0f0c 	teq	r5, ip
 800df26:	d105      	bne.n	800df34 <__aeabi_dmul+0x234>
 800df28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800df2c:	bf1c      	itt	ne
 800df2e:	4610      	movne	r0, r2
 800df30:	4619      	movne	r1, r3
 800df32:	d10a      	bne.n	800df4a <__aeabi_dmul+0x24a>
 800df34:	ea81 0103 	eor.w	r1, r1, r3
 800df38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800df3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800df40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df44:	f04f 0000 	mov.w	r0, #0
 800df48:	bd70      	pop	{r4, r5, r6, pc}
 800df4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800df4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800df52:	bd70      	pop	{r4, r5, r6, pc}

0800df54 <__aeabi_ddiv>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800df5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800df5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800df62:	bf1d      	ittte	ne
 800df64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800df68:	ea94 0f0c 	teqne	r4, ip
 800df6c:	ea95 0f0c 	teqne	r5, ip
 800df70:	f000 f8a7 	bleq	800e0c2 <__aeabi_ddiv+0x16e>
 800df74:	eba4 0405 	sub.w	r4, r4, r5
 800df78:	ea81 0e03 	eor.w	lr, r1, r3
 800df7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800df80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800df84:	f000 8088 	beq.w	800e098 <__aeabi_ddiv+0x144>
 800df88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800df8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800df90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800df94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800df98:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800df9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800dfa0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800dfa4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800dfa8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800dfac:	429d      	cmp	r5, r3
 800dfae:	bf08      	it	eq
 800dfb0:	4296      	cmpeq	r6, r2
 800dfb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800dfb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800dfba:	d202      	bcs.n	800dfc2 <__aeabi_ddiv+0x6e>
 800dfbc:	085b      	lsrs	r3, r3, #1
 800dfbe:	ea4f 0232 	mov.w	r2, r2, rrx
 800dfc2:	1ab6      	subs	r6, r6, r2
 800dfc4:	eb65 0503 	sbc.w	r5, r5, r3
 800dfc8:	085b      	lsrs	r3, r3, #1
 800dfca:	ea4f 0232 	mov.w	r2, r2, rrx
 800dfce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dfd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800dfd6:	ebb6 0e02 	subs.w	lr, r6, r2
 800dfda:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dfde:	bf22      	ittt	cs
 800dfe0:	1ab6      	subcs	r6, r6, r2
 800dfe2:	4675      	movcs	r5, lr
 800dfe4:	ea40 000c 	orrcs.w	r0, r0, ip
 800dfe8:	085b      	lsrs	r3, r3, #1
 800dfea:	ea4f 0232 	mov.w	r2, r2, rrx
 800dfee:	ebb6 0e02 	subs.w	lr, r6, r2
 800dff2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800dff6:	bf22      	ittt	cs
 800dff8:	1ab6      	subcs	r6, r6, r2
 800dffa:	4675      	movcs	r5, lr
 800dffc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e000:	085b      	lsrs	r3, r3, #1
 800e002:	ea4f 0232 	mov.w	r2, r2, rrx
 800e006:	ebb6 0e02 	subs.w	lr, r6, r2
 800e00a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e00e:	bf22      	ittt	cs
 800e010:	1ab6      	subcs	r6, r6, r2
 800e012:	4675      	movcs	r5, lr
 800e014:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e018:	085b      	lsrs	r3, r3, #1
 800e01a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e01e:	ebb6 0e02 	subs.w	lr, r6, r2
 800e022:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e026:	bf22      	ittt	cs
 800e028:	1ab6      	subcs	r6, r6, r2
 800e02a:	4675      	movcs	r5, lr
 800e02c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800e030:	ea55 0e06 	orrs.w	lr, r5, r6
 800e034:	d018      	beq.n	800e068 <__aeabi_ddiv+0x114>
 800e036:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800e03a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800e03e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800e042:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e046:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800e04a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e04e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800e052:	d1c0      	bne.n	800dfd6 <__aeabi_ddiv+0x82>
 800e054:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e058:	d10b      	bne.n	800e072 <__aeabi_ddiv+0x11e>
 800e05a:	ea41 0100 	orr.w	r1, r1, r0
 800e05e:	f04f 0000 	mov.w	r0, #0
 800e062:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e066:	e7b6      	b.n	800dfd6 <__aeabi_ddiv+0x82>
 800e068:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e06c:	bf04      	itt	eq
 800e06e:	4301      	orreq	r1, r0
 800e070:	2000      	moveq	r0, #0
 800e072:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e076:	bf88      	it	hi
 800e078:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e07c:	f63f aeaf 	bhi.w	800ddde <__aeabi_dmul+0xde>
 800e080:	ebb5 0c03 	subs.w	ip, r5, r3
 800e084:	bf04      	itt	eq
 800e086:	ebb6 0c02 	subseq.w	ip, r6, r2
 800e08a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e08e:	f150 0000 	adcs.w	r0, r0, #0
 800e092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e096:	bd70      	pop	{r4, r5, r6, pc}
 800e098:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800e09c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800e0a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800e0a4:	bfc2      	ittt	gt
 800e0a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e0aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e0ae:	bd70      	popgt	{r4, r5, r6, pc}
 800e0b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e0b4:	f04f 0e00 	mov.w	lr, #0
 800e0b8:	3c01      	subs	r4, #1
 800e0ba:	e690      	b.n	800ddde <__aeabi_dmul+0xde>
 800e0bc:	ea45 0e06 	orr.w	lr, r5, r6
 800e0c0:	e68d      	b.n	800ddde <__aeabi_dmul+0xde>
 800e0c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e0c6:	ea94 0f0c 	teq	r4, ip
 800e0ca:	bf08      	it	eq
 800e0cc:	ea95 0f0c 	teqeq	r5, ip
 800e0d0:	f43f af3b 	beq.w	800df4a <__aeabi_dmul+0x24a>
 800e0d4:	ea94 0f0c 	teq	r4, ip
 800e0d8:	d10a      	bne.n	800e0f0 <__aeabi_ddiv+0x19c>
 800e0da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e0de:	f47f af34 	bne.w	800df4a <__aeabi_dmul+0x24a>
 800e0e2:	ea95 0f0c 	teq	r5, ip
 800e0e6:	f47f af25 	bne.w	800df34 <__aeabi_dmul+0x234>
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	e72c      	b.n	800df4a <__aeabi_dmul+0x24a>
 800e0f0:	ea95 0f0c 	teq	r5, ip
 800e0f4:	d106      	bne.n	800e104 <__aeabi_ddiv+0x1b0>
 800e0f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e0fa:	f43f aefd 	beq.w	800def8 <__aeabi_dmul+0x1f8>
 800e0fe:	4610      	mov	r0, r2
 800e100:	4619      	mov	r1, r3
 800e102:	e722      	b.n	800df4a <__aeabi_dmul+0x24a>
 800e104:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e108:	bf18      	it	ne
 800e10a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e10e:	f47f aec5 	bne.w	800de9c <__aeabi_dmul+0x19c>
 800e112:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800e116:	f47f af0d 	bne.w	800df34 <__aeabi_dmul+0x234>
 800e11a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800e11e:	f47f aeeb 	bne.w	800def8 <__aeabi_dmul+0x1f8>
 800e122:	e712      	b.n	800df4a <__aeabi_dmul+0x24a>

0800e124 <__gedf2>:
 800e124:	f04f 3cff 	mov.w	ip, #4294967295
 800e128:	e006      	b.n	800e138 <__cmpdf2+0x4>
 800e12a:	bf00      	nop

0800e12c <__ledf2>:
 800e12c:	f04f 0c01 	mov.w	ip, #1
 800e130:	e002      	b.n	800e138 <__cmpdf2+0x4>
 800e132:	bf00      	nop

0800e134 <__cmpdf2>:
 800e134:	f04f 0c01 	mov.w	ip, #1
 800e138:	f84d cd04 	str.w	ip, [sp, #-4]!
 800e13c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e144:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e148:	bf18      	it	ne
 800e14a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800e14e:	d01b      	beq.n	800e188 <__cmpdf2+0x54>
 800e150:	b001      	add	sp, #4
 800e152:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800e156:	bf0c      	ite	eq
 800e158:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800e15c:	ea91 0f03 	teqne	r1, r3
 800e160:	bf02      	ittt	eq
 800e162:	ea90 0f02 	teqeq	r0, r2
 800e166:	2000      	moveq	r0, #0
 800e168:	4770      	bxeq	lr
 800e16a:	f110 0f00 	cmn.w	r0, #0
 800e16e:	ea91 0f03 	teq	r1, r3
 800e172:	bf58      	it	pl
 800e174:	4299      	cmppl	r1, r3
 800e176:	bf08      	it	eq
 800e178:	4290      	cmpeq	r0, r2
 800e17a:	bf2c      	ite	cs
 800e17c:	17d8      	asrcs	r0, r3, #31
 800e17e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800e182:	f040 0001 	orr.w	r0, r0, #1
 800e186:	4770      	bx	lr
 800e188:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e18c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e190:	d102      	bne.n	800e198 <__cmpdf2+0x64>
 800e192:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800e196:	d107      	bne.n	800e1a8 <__cmpdf2+0x74>
 800e198:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e19c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e1a0:	d1d6      	bne.n	800e150 <__cmpdf2+0x1c>
 800e1a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800e1a6:	d0d3      	beq.n	800e150 <__cmpdf2+0x1c>
 800e1a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop

0800e1b0 <__aeabi_cdrcmple>:
 800e1b0:	4684      	mov	ip, r0
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	4662      	mov	r2, ip
 800e1b6:	468c      	mov	ip, r1
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4663      	mov	r3, ip
 800e1bc:	e000      	b.n	800e1c0 <__aeabi_cdcmpeq>
 800e1be:	bf00      	nop

0800e1c0 <__aeabi_cdcmpeq>:
 800e1c0:	b501      	push	{r0, lr}
 800e1c2:	f7ff ffb7 	bl	800e134 <__cmpdf2>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	bf48      	it	mi
 800e1ca:	f110 0f00 	cmnmi.w	r0, #0
 800e1ce:	bd01      	pop	{r0, pc}

0800e1d0 <__aeabi_dcmpeq>:
 800e1d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e1d4:	f7ff fff4 	bl	800e1c0 <__aeabi_cdcmpeq>
 800e1d8:	bf0c      	ite	eq
 800e1da:	2001      	moveq	r0, #1
 800e1dc:	2000      	movne	r0, #0
 800e1de:	f85d fb08 	ldr.w	pc, [sp], #8
 800e1e2:	bf00      	nop

0800e1e4 <__aeabi_dcmplt>:
 800e1e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e1e8:	f7ff ffea 	bl	800e1c0 <__aeabi_cdcmpeq>
 800e1ec:	bf34      	ite	cc
 800e1ee:	2001      	movcc	r0, #1
 800e1f0:	2000      	movcs	r0, #0
 800e1f2:	f85d fb08 	ldr.w	pc, [sp], #8
 800e1f6:	bf00      	nop

0800e1f8 <__aeabi_dcmple>:
 800e1f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e1fc:	f7ff ffe0 	bl	800e1c0 <__aeabi_cdcmpeq>
 800e200:	bf94      	ite	ls
 800e202:	2001      	movls	r0, #1
 800e204:	2000      	movhi	r0, #0
 800e206:	f85d fb08 	ldr.w	pc, [sp], #8
 800e20a:	bf00      	nop

0800e20c <__aeabi_dcmpge>:
 800e20c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e210:	f7ff ffce 	bl	800e1b0 <__aeabi_cdrcmple>
 800e214:	bf94      	ite	ls
 800e216:	2001      	movls	r0, #1
 800e218:	2000      	movhi	r0, #0
 800e21a:	f85d fb08 	ldr.w	pc, [sp], #8
 800e21e:	bf00      	nop

0800e220 <__aeabi_dcmpgt>:
 800e220:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e224:	f7ff ffc4 	bl	800e1b0 <__aeabi_cdrcmple>
 800e228:	bf34      	ite	cc
 800e22a:	2001      	movcc	r0, #1
 800e22c:	2000      	movcs	r0, #0
 800e22e:	f85d fb08 	ldr.w	pc, [sp], #8
 800e232:	bf00      	nop

0800e234 <__aeabi_d2uiz>:
 800e234:	004a      	lsls	r2, r1, #1
 800e236:	d211      	bcs.n	800e25c <__aeabi_d2uiz+0x28>
 800e238:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800e23c:	d211      	bcs.n	800e262 <__aeabi_d2uiz+0x2e>
 800e23e:	d50d      	bpl.n	800e25c <__aeabi_d2uiz+0x28>
 800e240:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800e244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800e248:	d40e      	bmi.n	800e268 <__aeabi_d2uiz+0x34>
 800e24a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800e24e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e256:	fa23 f002 	lsr.w	r0, r3, r2
 800e25a:	4770      	bx	lr
 800e25c:	f04f 0000 	mov.w	r0, #0
 800e260:	4770      	bx	lr
 800e262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800e266:	d102      	bne.n	800e26e <__aeabi_d2uiz+0x3a>
 800e268:	f04f 30ff 	mov.w	r0, #4294967295
 800e26c:	4770      	bx	lr
 800e26e:	f04f 0000 	mov.w	r0, #0
 800e272:	4770      	bx	lr

0800e274 <__aeabi_uldivmod>:
 800e274:	b953      	cbnz	r3, 800e28c <__aeabi_uldivmod+0x18>
 800e276:	b94a      	cbnz	r2, 800e28c <__aeabi_uldivmod+0x18>
 800e278:	2900      	cmp	r1, #0
 800e27a:	bf08      	it	eq
 800e27c:	2800      	cmpeq	r0, #0
 800e27e:	bf1c      	itt	ne
 800e280:	f04f 31ff 	movne.w	r1, #4294967295
 800e284:	f04f 30ff 	movne.w	r0, #4294967295
 800e288:	f000 b994 	b.w	800e5b4 <__aeabi_idiv0>
 800e28c:	f1ad 0c08 	sub.w	ip, sp, #8
 800e290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800e294:	f000 f828 	bl	800e2e8 <__udivmoddi4>
 800e298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2a0:	b004      	add	sp, #16
 800e2a2:	4770      	bx	lr

0800e2a4 <__aeabi_d2ulz>:
 800e2a4:	b5d0      	push	{r4, r6, r7, lr}
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4b0d      	ldr	r3, [pc, #52]	; (800e2e0 <__aeabi_d2ulz+0x3c>)
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	460f      	mov	r7, r1
 800e2ae:	f7ff fd27 	bl	800dd00 <__aeabi_dmul>
 800e2b2:	f7ff ffbf 	bl	800e234 <__aeabi_d2uiz>
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	f7ff fca8 	bl	800dc0c <__aeabi_ui2d>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <__aeabi_d2ulz+0x40>)
 800e2c0:	f7ff fd1e 	bl	800dd00 <__aeabi_dmul>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7ff fb60 	bl	800d990 <__aeabi_dsub>
 800e2d0:	f7ff ffb0 	bl	800e234 <__aeabi_d2uiz>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	4310      	orrs	r0, r2
 800e2da:	4619      	mov	r1, r3
 800e2dc:	bdd0      	pop	{r4, r6, r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	3df00000 	.word	0x3df00000
 800e2e4:	41f00000 	.word	0x41f00000

0800e2e8 <__udivmoddi4>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	9e08      	ldr	r6, [sp, #32]
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4688      	mov	r8, r1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d14b      	bne.n	800e38e <__udivmoddi4+0xa6>
 800e2f6:	428a      	cmp	r2, r1
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	d967      	bls.n	800e3cc <__udivmoddi4+0xe4>
 800e2fc:	fab2 f282 	clz	r2, r2
 800e300:	b14a      	cbz	r2, 800e316 <__udivmoddi4+0x2e>
 800e302:	f1c2 0720 	rsb	r7, r2, #32
 800e306:	fa01 f302 	lsl.w	r3, r1, r2
 800e30a:	fa20 f707 	lsr.w	r7, r0, r7
 800e30e:	4095      	lsls	r5, r2
 800e310:	ea47 0803 	orr.w	r8, r7, r3
 800e314:	4094      	lsls	r4, r2
 800e316:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e31a:	0c23      	lsrs	r3, r4, #16
 800e31c:	fbb8 f7fe 	udiv	r7, r8, lr
 800e320:	fa1f fc85 	uxth.w	ip, r5
 800e324:	fb0e 8817 	mls	r8, lr, r7, r8
 800e328:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e32c:	fb07 f10c 	mul.w	r1, r7, ip
 800e330:	4299      	cmp	r1, r3
 800e332:	d909      	bls.n	800e348 <__udivmoddi4+0x60>
 800e334:	18eb      	adds	r3, r5, r3
 800e336:	f107 30ff 	add.w	r0, r7, #4294967295
 800e33a:	f080 811b 	bcs.w	800e574 <__udivmoddi4+0x28c>
 800e33e:	4299      	cmp	r1, r3
 800e340:	f240 8118 	bls.w	800e574 <__udivmoddi4+0x28c>
 800e344:	3f02      	subs	r7, #2
 800e346:	442b      	add	r3, r5
 800e348:	1a5b      	subs	r3, r3, r1
 800e34a:	b2a4      	uxth	r4, r4
 800e34c:	fbb3 f0fe 	udiv	r0, r3, lr
 800e350:	fb0e 3310 	mls	r3, lr, r0, r3
 800e354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800e358:	fb00 fc0c 	mul.w	ip, r0, ip
 800e35c:	45a4      	cmp	ip, r4
 800e35e:	d909      	bls.n	800e374 <__udivmoddi4+0x8c>
 800e360:	192c      	adds	r4, r5, r4
 800e362:	f100 33ff 	add.w	r3, r0, #4294967295
 800e366:	f080 8107 	bcs.w	800e578 <__udivmoddi4+0x290>
 800e36a:	45a4      	cmp	ip, r4
 800e36c:	f240 8104 	bls.w	800e578 <__udivmoddi4+0x290>
 800e370:	3802      	subs	r0, #2
 800e372:	442c      	add	r4, r5
 800e374:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e378:	eba4 040c 	sub.w	r4, r4, ip
 800e37c:	2700      	movs	r7, #0
 800e37e:	b11e      	cbz	r6, 800e388 <__udivmoddi4+0xa0>
 800e380:	40d4      	lsrs	r4, r2
 800e382:	2300      	movs	r3, #0
 800e384:	e9c6 4300 	strd	r4, r3, [r6]
 800e388:	4639      	mov	r1, r7
 800e38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38e:	428b      	cmp	r3, r1
 800e390:	d909      	bls.n	800e3a6 <__udivmoddi4+0xbe>
 800e392:	2e00      	cmp	r6, #0
 800e394:	f000 80eb 	beq.w	800e56e <__udivmoddi4+0x286>
 800e398:	2700      	movs	r7, #0
 800e39a:	e9c6 0100 	strd	r0, r1, [r6]
 800e39e:	4638      	mov	r0, r7
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a6:	fab3 f783 	clz	r7, r3
 800e3aa:	2f00      	cmp	r7, #0
 800e3ac:	d147      	bne.n	800e43e <__udivmoddi4+0x156>
 800e3ae:	428b      	cmp	r3, r1
 800e3b0:	d302      	bcc.n	800e3b8 <__udivmoddi4+0xd0>
 800e3b2:	4282      	cmp	r2, r0
 800e3b4:	f200 80fa 	bhi.w	800e5ac <__udivmoddi4+0x2c4>
 800e3b8:	1a84      	subs	r4, r0, r2
 800e3ba:	eb61 0303 	sbc.w	r3, r1, r3
 800e3be:	2001      	movs	r0, #1
 800e3c0:	4698      	mov	r8, r3
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	d0e0      	beq.n	800e388 <__udivmoddi4+0xa0>
 800e3c6:	e9c6 4800 	strd	r4, r8, [r6]
 800e3ca:	e7dd      	b.n	800e388 <__udivmoddi4+0xa0>
 800e3cc:	b902      	cbnz	r2, 800e3d0 <__udivmoddi4+0xe8>
 800e3ce:	deff      	udf	#255	; 0xff
 800e3d0:	fab2 f282 	clz	r2, r2
 800e3d4:	2a00      	cmp	r2, #0
 800e3d6:	f040 808f 	bne.w	800e4f8 <__udivmoddi4+0x210>
 800e3da:	1b49      	subs	r1, r1, r5
 800e3dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e3e0:	fa1f f885 	uxth.w	r8, r5
 800e3e4:	2701      	movs	r7, #1
 800e3e6:	fbb1 fcfe 	udiv	ip, r1, lr
 800e3ea:	0c23      	lsrs	r3, r4, #16
 800e3ec:	fb0e 111c 	mls	r1, lr, ip, r1
 800e3f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e3f4:	fb08 f10c 	mul.w	r1, r8, ip
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	d907      	bls.n	800e40c <__udivmoddi4+0x124>
 800e3fc:	18eb      	adds	r3, r5, r3
 800e3fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 800e402:	d202      	bcs.n	800e40a <__udivmoddi4+0x122>
 800e404:	4299      	cmp	r1, r3
 800e406:	f200 80cd 	bhi.w	800e5a4 <__udivmoddi4+0x2bc>
 800e40a:	4684      	mov	ip, r0
 800e40c:	1a59      	subs	r1, r3, r1
 800e40e:	b2a3      	uxth	r3, r4
 800e410:	fbb1 f0fe 	udiv	r0, r1, lr
 800e414:	fb0e 1410 	mls	r4, lr, r0, r1
 800e418:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e41c:	fb08 f800 	mul.w	r8, r8, r0
 800e420:	45a0      	cmp	r8, r4
 800e422:	d907      	bls.n	800e434 <__udivmoddi4+0x14c>
 800e424:	192c      	adds	r4, r5, r4
 800e426:	f100 33ff 	add.w	r3, r0, #4294967295
 800e42a:	d202      	bcs.n	800e432 <__udivmoddi4+0x14a>
 800e42c:	45a0      	cmp	r8, r4
 800e42e:	f200 80b6 	bhi.w	800e59e <__udivmoddi4+0x2b6>
 800e432:	4618      	mov	r0, r3
 800e434:	eba4 0408 	sub.w	r4, r4, r8
 800e438:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800e43c:	e79f      	b.n	800e37e <__udivmoddi4+0x96>
 800e43e:	f1c7 0c20 	rsb	ip, r7, #32
 800e442:	40bb      	lsls	r3, r7
 800e444:	fa22 fe0c 	lsr.w	lr, r2, ip
 800e448:	ea4e 0e03 	orr.w	lr, lr, r3
 800e44c:	fa01 f407 	lsl.w	r4, r1, r7
 800e450:	fa20 f50c 	lsr.w	r5, r0, ip
 800e454:	fa21 f30c 	lsr.w	r3, r1, ip
 800e458:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800e45c:	4325      	orrs	r5, r4
 800e45e:	fbb3 f9f8 	udiv	r9, r3, r8
 800e462:	0c2c      	lsrs	r4, r5, #16
 800e464:	fb08 3319 	mls	r3, r8, r9, r3
 800e468:	fa1f fa8e 	uxth.w	sl, lr
 800e46c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800e470:	fb09 f40a 	mul.w	r4, r9, sl
 800e474:	429c      	cmp	r4, r3
 800e476:	fa02 f207 	lsl.w	r2, r2, r7
 800e47a:	fa00 f107 	lsl.w	r1, r0, r7
 800e47e:	d90b      	bls.n	800e498 <__udivmoddi4+0x1b0>
 800e480:	eb1e 0303 	adds.w	r3, lr, r3
 800e484:	f109 30ff 	add.w	r0, r9, #4294967295
 800e488:	f080 8087 	bcs.w	800e59a <__udivmoddi4+0x2b2>
 800e48c:	429c      	cmp	r4, r3
 800e48e:	f240 8084 	bls.w	800e59a <__udivmoddi4+0x2b2>
 800e492:	f1a9 0902 	sub.w	r9, r9, #2
 800e496:	4473      	add	r3, lr
 800e498:	1b1b      	subs	r3, r3, r4
 800e49a:	b2ad      	uxth	r5, r5
 800e49c:	fbb3 f0f8 	udiv	r0, r3, r8
 800e4a0:	fb08 3310 	mls	r3, r8, r0, r3
 800e4a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800e4a8:	fb00 fa0a 	mul.w	sl, r0, sl
 800e4ac:	45a2      	cmp	sl, r4
 800e4ae:	d908      	bls.n	800e4c2 <__udivmoddi4+0x1da>
 800e4b0:	eb1e 0404 	adds.w	r4, lr, r4
 800e4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4b8:	d26b      	bcs.n	800e592 <__udivmoddi4+0x2aa>
 800e4ba:	45a2      	cmp	sl, r4
 800e4bc:	d969      	bls.n	800e592 <__udivmoddi4+0x2aa>
 800e4be:	3802      	subs	r0, #2
 800e4c0:	4474      	add	r4, lr
 800e4c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800e4c6:	fba0 8902 	umull	r8, r9, r0, r2
 800e4ca:	eba4 040a 	sub.w	r4, r4, sl
 800e4ce:	454c      	cmp	r4, r9
 800e4d0:	46c2      	mov	sl, r8
 800e4d2:	464b      	mov	r3, r9
 800e4d4:	d354      	bcc.n	800e580 <__udivmoddi4+0x298>
 800e4d6:	d051      	beq.n	800e57c <__udivmoddi4+0x294>
 800e4d8:	2e00      	cmp	r6, #0
 800e4da:	d069      	beq.n	800e5b0 <__udivmoddi4+0x2c8>
 800e4dc:	ebb1 050a 	subs.w	r5, r1, sl
 800e4e0:	eb64 0403 	sbc.w	r4, r4, r3
 800e4e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 800e4e8:	40fd      	lsrs	r5, r7
 800e4ea:	40fc      	lsrs	r4, r7
 800e4ec:	ea4c 0505 	orr.w	r5, ip, r5
 800e4f0:	e9c6 5400 	strd	r5, r4, [r6]
 800e4f4:	2700      	movs	r7, #0
 800e4f6:	e747      	b.n	800e388 <__udivmoddi4+0xa0>
 800e4f8:	f1c2 0320 	rsb	r3, r2, #32
 800e4fc:	fa20 f703 	lsr.w	r7, r0, r3
 800e500:	4095      	lsls	r5, r2
 800e502:	fa01 f002 	lsl.w	r0, r1, r2
 800e506:	fa21 f303 	lsr.w	r3, r1, r3
 800e50a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800e50e:	4338      	orrs	r0, r7
 800e510:	0c01      	lsrs	r1, r0, #16
 800e512:	fbb3 f7fe 	udiv	r7, r3, lr
 800e516:	fa1f f885 	uxth.w	r8, r5
 800e51a:	fb0e 3317 	mls	r3, lr, r7, r3
 800e51e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e522:	fb07 f308 	mul.w	r3, r7, r8
 800e526:	428b      	cmp	r3, r1
 800e528:	fa04 f402 	lsl.w	r4, r4, r2
 800e52c:	d907      	bls.n	800e53e <__udivmoddi4+0x256>
 800e52e:	1869      	adds	r1, r5, r1
 800e530:	f107 3cff 	add.w	ip, r7, #4294967295
 800e534:	d22f      	bcs.n	800e596 <__udivmoddi4+0x2ae>
 800e536:	428b      	cmp	r3, r1
 800e538:	d92d      	bls.n	800e596 <__udivmoddi4+0x2ae>
 800e53a:	3f02      	subs	r7, #2
 800e53c:	4429      	add	r1, r5
 800e53e:	1acb      	subs	r3, r1, r3
 800e540:	b281      	uxth	r1, r0
 800e542:	fbb3 f0fe 	udiv	r0, r3, lr
 800e546:	fb0e 3310 	mls	r3, lr, r0, r3
 800e54a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e54e:	fb00 f308 	mul.w	r3, r0, r8
 800e552:	428b      	cmp	r3, r1
 800e554:	d907      	bls.n	800e566 <__udivmoddi4+0x27e>
 800e556:	1869      	adds	r1, r5, r1
 800e558:	f100 3cff 	add.w	ip, r0, #4294967295
 800e55c:	d217      	bcs.n	800e58e <__udivmoddi4+0x2a6>
 800e55e:	428b      	cmp	r3, r1
 800e560:	d915      	bls.n	800e58e <__udivmoddi4+0x2a6>
 800e562:	3802      	subs	r0, #2
 800e564:	4429      	add	r1, r5
 800e566:	1ac9      	subs	r1, r1, r3
 800e568:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800e56c:	e73b      	b.n	800e3e6 <__udivmoddi4+0xfe>
 800e56e:	4637      	mov	r7, r6
 800e570:	4630      	mov	r0, r6
 800e572:	e709      	b.n	800e388 <__udivmoddi4+0xa0>
 800e574:	4607      	mov	r7, r0
 800e576:	e6e7      	b.n	800e348 <__udivmoddi4+0x60>
 800e578:	4618      	mov	r0, r3
 800e57a:	e6fb      	b.n	800e374 <__udivmoddi4+0x8c>
 800e57c:	4541      	cmp	r1, r8
 800e57e:	d2ab      	bcs.n	800e4d8 <__udivmoddi4+0x1f0>
 800e580:	ebb8 0a02 	subs.w	sl, r8, r2
 800e584:	eb69 020e 	sbc.w	r2, r9, lr
 800e588:	3801      	subs	r0, #1
 800e58a:	4613      	mov	r3, r2
 800e58c:	e7a4      	b.n	800e4d8 <__udivmoddi4+0x1f0>
 800e58e:	4660      	mov	r0, ip
 800e590:	e7e9      	b.n	800e566 <__udivmoddi4+0x27e>
 800e592:	4618      	mov	r0, r3
 800e594:	e795      	b.n	800e4c2 <__udivmoddi4+0x1da>
 800e596:	4667      	mov	r7, ip
 800e598:	e7d1      	b.n	800e53e <__udivmoddi4+0x256>
 800e59a:	4681      	mov	r9, r0
 800e59c:	e77c      	b.n	800e498 <__udivmoddi4+0x1b0>
 800e59e:	3802      	subs	r0, #2
 800e5a0:	442c      	add	r4, r5
 800e5a2:	e747      	b.n	800e434 <__udivmoddi4+0x14c>
 800e5a4:	f1ac 0c02 	sub.w	ip, ip, #2
 800e5a8:	442b      	add	r3, r5
 800e5aa:	e72f      	b.n	800e40c <__udivmoddi4+0x124>
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	e708      	b.n	800e3c2 <__udivmoddi4+0xda>
 800e5b0:	4637      	mov	r7, r6
 800e5b2:	e6e9      	b.n	800e388 <__udivmoddi4+0xa0>

0800e5b4 <__aeabi_idiv0>:
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop

0800e5b8 <rti_board_start>:
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
    return 0;
}
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	4770      	bx	lr

0800e5bc <rti_board_end>:
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
    return 0;
}
 800e5bc:	2000      	movs	r0, #0
 800e5be:	4770      	bx	lr

0800e5c0 <rt_components_board_init>:

/**
 * RT-Thread Components Initialization for board
 */
void rt_components_board_init(void)
{
 800e5c0:	b510      	push	{r4, lr}
        rt_kprintf(":%d done\n", result);
    }
#else
    const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
 800e5c2:	4c04      	ldr	r4, [pc, #16]	; (800e5d4 <rt_components_board_init+0x14>)
 800e5c4:	e002      	b.n	800e5cc <rt_components_board_init+0xc>
    {
        (*fn_ptr)();
 800e5c6:	f854 3b04 	ldr.w	r3, [r4], #4
 800e5ca:	4798      	blx	r3
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
 800e5cc:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <rt_components_board_init+0x18>)
 800e5ce:	429c      	cmp	r4, r3
 800e5d0:	d3f9      	bcc.n	800e5c6 <rt_components_board_init+0x6>
    }
#endif
}
 800e5d2:	bd10      	pop	{r4, pc}
 800e5d4:	08014650 	.word	0x08014650
 800e5d8:	08014654 	.word	0x08014654

0800e5dc <thread_eventGreen>:
//参数说明：无
//功能概要：等待绿灯事件被触发，反转绿灯
//内部调用：无
//======================================================================
void thread_eventGreen()
{
 800e5dc:	b500      	push	{lr}
 800e5de:	b085      	sub	sp, #20
	//（1）======申请局部变量=========================================
    uint32_t recvedstate;
    printf("第一次进入绿灯线程!\r\n");
 800e5e0:	4813      	ldr	r0, [pc, #76]	; (800e630 <thread_eventGreen+0x54>)
 800e5e2:	f000 fd11 	bl	800f008 <myprintf>
	gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	f44f 7084 	mov.w	r0, #264	; 0x108
 800e5ee:	f001 fd81 	bl	80100f4 <gpio_init>
	//（2）======主循环（开始）==========================================
    while (1)
    {
    	uart_send_string(UART_User,(void *)"在绿灯线程中，等待绿灯事件被触发\r\n");
 800e5f2:	4910      	ldr	r1, [pc, #64]	; (800e634 <thread_eventGreen+0x58>)
 800e5f4:	2002      	movs	r0, #2
 800e5f6:	f003 fe57 	bl	80122a8 <uart_send_string>
    	//一直等待GREEN_LIGHT_EVENT事件字
        rt_event_recv(EventWord,GREEN_LIGHT_EVENT,RT_EVENT_FLAG_OR|RT_EVENT_FLAG_CLEAR,RT_WAITING_FOREVER,&recvedstate);
 800e5fa:	4b0f      	ldr	r3, [pc, #60]	; (800e638 <thread_eventGreen+0x5c>)
 800e5fc:	6818      	ldr	r0, [r3, #0]
 800e5fe:	ab03      	add	r3, sp, #12
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	f04f 33ff 	mov.w	r3, #4294967295
 800e606:	2206      	movs	r2, #6
 800e608:	2104      	movs	r1, #4
 800e60a:	f001 ffee 	bl	80105ea <rt_event_recv>
    	if(recvedstate==GREEN_LIGHT_EVENT)  //如果接收完成且正确
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	2b04      	cmp	r3, #4
 800e612:	d1ee      	bne.n	800e5f2 <thread_eventGreen+0x16>
    	{
			uart_send_string(UART_User,(void *)"在绿灯线程中，收到绿灯事件，绿灯反转\r\n");
 800e614:	4909      	ldr	r1, [pc, #36]	; (800e63c <thread_eventGreen+0x60>)
 800e616:	2002      	movs	r0, #2
 800e618:	f003 fe46 	bl	80122a8 <uart_send_string>
            gpio_reverse(LIGHT_GREEN);     //转换绿灯状态
 800e61c:	f44f 7084 	mov.w	r0, #264	; 0x108
 800e620:	f001 fdd4 	bl	80101cc <gpio_reverse>
			rt_event_send(EventWord,BLUE_LIGHT_EVENT);
 800e624:	2108      	movs	r1, #8
 800e626:	4b04      	ldr	r3, [pc, #16]	; (800e638 <thread_eventGreen+0x5c>)
 800e628:	6818      	ldr	r0, [r3, #0]
 800e62a:	f001 ff92 	bl	8010552 <rt_event_send>
 800e62e:	e7e0      	b.n	800e5f2 <thread_eventGreen+0x16>
 800e630:	08012de0 	.word	0x08012de0
 800e634:	08012df8 	.word	0x08012df8
 800e638:	20007358 	.word	0x20007358
 800e63c:	08012e1c 	.word	0x08012e1c

0800e640 <rt_hw_stack_init>:
//======================================================================
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
 800e640:	b470      	push	{r4, r5, r6}
 800e642:	4606      	mov	r6, r0
    struct stack_frame *stack_frame;
    rt_uint8_t         *stk;
    unsigned long       i;
    //（1）获取栈顶指针位置
    //（1.1）获取栈顶地址，rt_hw_stack_init在调用的时候，传给stack_addr的是(栈顶指针-4)，所以要sizeof(rt_uint32_t)加回来
    stk  = stack_addr + sizeof(rt_uint32_t);
 800e644:	3204      	adds	r2, #4
    //（1.2）因为浮点运算要求栈是8字节对齐的，且栈底在高地址，所以需要向下8字节对齐
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
 800e646:	f022 0507 	bic.w	r5, r2, #7
    //（1.3）栈顶指针stk指针继续向下移动sizeof(struct stack_frame)个偏移，即移动一个栈帧大小
    stk -= sizeof(struct stack_frame);
 800e64a:	f1a5 0044 	sub.w	r0, r5, #68	; 0x44
    //（1.4）将stk指针强制转化为stack_frame类型，得到stack_frame指针
    stack_frame = (struct stack_frame *)stk;

    //（2）将栈空间里面的stack_frame结构体内存初始化为0xdeadbeef
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
 800e64e:	2200      	movs	r2, #0
 800e650:	e003      	b.n	800e65a <rt_hw_stack_init+0x1a>
    {
        ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
 800e652:	4c0e      	ldr	r4, [pc, #56]	; (800e68c <rt_hw_stack_init+0x4c>)
 800e654:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
 800e658:	3201      	adds	r2, #1
 800e65a:	2a10      	cmp	r2, #16
 800e65c:	d9f9      	bls.n	800e652 <rt_hw_stack_init+0x12>
    }
    //（3）初始化异常发生时自动保存的寄存器
    stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
 800e65e:	f845 1c20 	str.w	r1, [r5, #-32]
    stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
 800e662:	2200      	movs	r2, #0
 800e664:	f845 2c1c 	str.w	r2, [r5, #-28]
    stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
 800e668:	f845 2c18 	str.w	r2, [r5, #-24]
    stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
 800e66c:	f845 2c14 	str.w	r2, [r5, #-20]
    stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
 800e670:	f845 2c10 	str.w	r2, [r5, #-16]
    stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
 800e674:	f845 3c0c 	str.w	r3, [r5, #-12]
    stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
 800e678:	f845 6c08 	str.w	r6, [r5, #-8]
    stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
 800e67c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e680:	f845 3c04 	str.w	r3, [r5, #-4]

#if USE_FPU
    stack_frame->flag = 0;
 800e684:	f845 2c44 	str.w	r2, [r5, #-68]
#endif /* USE_FPU */

    //（4）返回当前的栈顶指针
    return stk;
}
 800e688:	bc70      	pop	{r4, r5, r6}
 800e68a:	4770      	bx	lr
 800e68c:	deadbeef 	.word	0xdeadbeef

0800e690 <rt_hw_hard_fault_exception>:
    rt_uint32_t exc_return;
    struct stack_frame stack_frame;
};

void rt_hw_hard_fault_exception(struct exception_info *exception_info)
{
 800e690:	b510      	push	{r4, lr}
 800e692:	4604      	mov	r4, r0
    extern long list_thread(void);
    struct exception_stack_frame *exception_stack = &exception_info->stack_frame.exception_stack_frame;
    struct stack_frame *context = &exception_info->stack_frame;

    if (rt_exception_hook != RT_NULL)
 800e694:	4b2f      	ldr	r3, [pc, #188]	; (800e754 <rt_hw_hard_fault_exception+0xc4>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	b11b      	cbz	r3, 800e6a2 <rt_hw_hard_fault_exception+0x12>
 800e69a:	3028      	adds	r0, #40	; 0x28
    {
        rt_err_t result;

        result = rt_exception_hook(exception_stack);
 800e69c:	4798      	blx	r3
        if (result == RT_EOK) return;
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d056      	beq.n	800e750 <rt_hw_hard_fault_exception+0xc0>
    }

    rt_kprintf("psr: 0x%08x\n", context->exception_stack_frame.psr);
 800e6a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e6a4:	482c      	ldr	r0, [pc, #176]	; (800e758 <rt_hw_hard_fault_exception+0xc8>)
 800e6a6:	f002 ff8f 	bl	80115c8 <rt_kprintf>

    rt_kprintf("r00: 0x%08x\n", context->exception_stack_frame.r0);
 800e6aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e6ac:	482b      	ldr	r0, [pc, #172]	; (800e75c <rt_hw_hard_fault_exception+0xcc>)
 800e6ae:	f002 ff8b 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r01: 0x%08x\n", context->exception_stack_frame.r1);
 800e6b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e6b4:	482a      	ldr	r0, [pc, #168]	; (800e760 <rt_hw_hard_fault_exception+0xd0>)
 800e6b6:	f002 ff87 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r02: 0x%08x\n", context->exception_stack_frame.r2);
 800e6ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e6bc:	4829      	ldr	r0, [pc, #164]	; (800e764 <rt_hw_hard_fault_exception+0xd4>)
 800e6be:	f002 ff83 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r03: 0x%08x\n", context->exception_stack_frame.r3);
 800e6c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6c4:	4828      	ldr	r0, [pc, #160]	; (800e768 <rt_hw_hard_fault_exception+0xd8>)
 800e6c6:	f002 ff7f 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r04: 0x%08x\n", context->r4);
 800e6ca:	68a1      	ldr	r1, [r4, #8]
 800e6cc:	4827      	ldr	r0, [pc, #156]	; (800e76c <rt_hw_hard_fault_exception+0xdc>)
 800e6ce:	f002 ff7b 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r05: 0x%08x\n", context->r5);
 800e6d2:	68e1      	ldr	r1, [r4, #12]
 800e6d4:	4826      	ldr	r0, [pc, #152]	; (800e770 <rt_hw_hard_fault_exception+0xe0>)
 800e6d6:	f002 ff77 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r06: 0x%08x\n", context->r6);
 800e6da:	6921      	ldr	r1, [r4, #16]
 800e6dc:	4825      	ldr	r0, [pc, #148]	; (800e774 <rt_hw_hard_fault_exception+0xe4>)
 800e6de:	f002 ff73 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r07: 0x%08x\n", context->r7);
 800e6e2:	6961      	ldr	r1, [r4, #20]
 800e6e4:	4824      	ldr	r0, [pc, #144]	; (800e778 <rt_hw_hard_fault_exception+0xe8>)
 800e6e6:	f002 ff6f 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r08: 0x%08x\n", context->r8);
 800e6ea:	69a1      	ldr	r1, [r4, #24]
 800e6ec:	4823      	ldr	r0, [pc, #140]	; (800e77c <rt_hw_hard_fault_exception+0xec>)
 800e6ee:	f002 ff6b 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r09: 0x%08x\n", context->r9);
 800e6f2:	69e1      	ldr	r1, [r4, #28]
 800e6f4:	4822      	ldr	r0, [pc, #136]	; (800e780 <rt_hw_hard_fault_exception+0xf0>)
 800e6f6:	f002 ff67 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r10: 0x%08x\n", context->r10);
 800e6fa:	6a21      	ldr	r1, [r4, #32]
 800e6fc:	4821      	ldr	r0, [pc, #132]	; (800e784 <rt_hw_hard_fault_exception+0xf4>)
 800e6fe:	f002 ff63 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r11: 0x%08x\n", context->r11);
 800e702:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e704:	4820      	ldr	r0, [pc, #128]	; (800e788 <rt_hw_hard_fault_exception+0xf8>)
 800e706:	f002 ff5f 	bl	80115c8 <rt_kprintf>
    rt_kprintf("r12: 0x%08x\n", context->exception_stack_frame.r12);
 800e70a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e70c:	481f      	ldr	r0, [pc, #124]	; (800e78c <rt_hw_hard_fault_exception+0xfc>)
 800e70e:	f002 ff5b 	bl	80115c8 <rt_kprintf>
    rt_kprintf(" lr: 0x%08x\n", context->exception_stack_frame.lr);
 800e712:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e714:	481e      	ldr	r0, [pc, #120]	; (800e790 <rt_hw_hard_fault_exception+0x100>)
 800e716:	f002 ff57 	bl	80115c8 <rt_kprintf>
    rt_kprintf(" pc: 0x%08x\n", context->exception_stack_frame.pc);
 800e71a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e71c:	481d      	ldr	r0, [pc, #116]	; (800e794 <rt_hw_hard_fault_exception+0x104>)
 800e71e:	f002 ff53 	bl	80115c8 <rt_kprintf>

    if (exception_info->exc_return & (1 << 2))
 800e722:	6823      	ldr	r3, [r4, #0]
 800e724:	f013 0f04 	tst.w	r3, #4
 800e728:	d00a      	beq.n	800e740 <rt_hw_hard_fault_exception+0xb0>
    {
        rt_kprintf("hard fault on thread: %s\r\n\r\n", rt_thread_self()->name);
 800e72a:	f000 fd2d 	bl	800f188 <rt_thread_self>
 800e72e:	4601      	mov	r1, r0
 800e730:	4819      	ldr	r0, [pc, #100]	; (800e798 <rt_hw_hard_fault_exception+0x108>)
 800e732:	f002 ff49 	bl	80115c8 <rt_kprintf>
    else
    {
        rt_kprintf("hard fault on handler\r\n\r\n");
    }

    if ( (exception_info->exc_return & 0x10) == 0)
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	f013 0f10 	tst.w	r3, #16
 800e73c:	d004      	beq.n	800e748 <rt_hw_hard_fault_exception+0xb8>
 800e73e:	e7fe      	b.n	800e73e <rt_hw_hard_fault_exception+0xae>
        rt_kprintf("hard fault on handler\r\n\r\n");
 800e740:	4816      	ldr	r0, [pc, #88]	; (800e79c <rt_hw_hard_fault_exception+0x10c>)
 800e742:	f002 ff41 	bl	80115c8 <rt_kprintf>
 800e746:	e7f6      	b.n	800e736 <rt_hw_hard_fault_exception+0xa6>
    {
        rt_kprintf("FPU active!\r\n");
 800e748:	4815      	ldr	r0, [pc, #84]	; (800e7a0 <rt_hw_hard_fault_exception+0x110>)
 800e74a:	f002 ff3d 	bl	80115c8 <rt_kprintf>
 800e74e:	e7f6      	b.n	800e73e <rt_hw_hard_fault_exception+0xae>
#ifdef RT_USING_FINSH
    hard_fault_track();
#endif /* RT_USING_FINSH */

    while (1);
}
 800e750:	bd10      	pop	{r4, pc}
 800e752:	bf00      	nop
 800e754:	200040c8 	.word	0x200040c8
 800e758:	08012e44 	.word	0x08012e44
 800e75c:	08012e54 	.word	0x08012e54
 800e760:	08012e64 	.word	0x08012e64
 800e764:	08012e74 	.word	0x08012e74
 800e768:	08012e84 	.word	0x08012e84
 800e76c:	08012e94 	.word	0x08012e94
 800e770:	08012ea4 	.word	0x08012ea4
 800e774:	08012eb4 	.word	0x08012eb4
 800e778:	08012ec4 	.word	0x08012ec4
 800e77c:	08012ed4 	.word	0x08012ed4
 800e780:	08012ee4 	.word	0x08012ee4
 800e784:	08012ef4 	.word	0x08012ef4
 800e788:	08012f04 	.word	0x08012f04
 800e78c:	08012f14 	.word	0x08012f14
 800e790:	08012f24 	.word	0x08012f24
 800e794:	08012f34 	.word	0x08012f34
 800e798:	08012f44 	.word	0x08012f44
 800e79c:	08012f64 	.word	0x08012f64
 800e7a0:	08012f80 	.word	0x08012f80

0800e7a4 <printk_putc>:
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	460c      	mov	r4, r1
	switch (info->dest) {
 800e7a8:	6813      	ldr	r3, [r2, #0]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d005      	beq.n	800e7ba <printk_putc+0x16>
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d007      	beq.n	800e7c2 <printk_putc+0x1e>
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	6023      	str	r3, [r4, #0]
}
 800e7b8:	bd10      	pop	{r4, pc}
		info->func((char) c);
 800e7ba:	6853      	ldr	r3, [r2, #4]
 800e7bc:	b2c0      	uxtb	r0, r0
 800e7be:	4798      	blx	r3
		break;
 800e7c0:	e7f7      	b.n	800e7b2 <printk_putc+0xe>
		*(info->loc) = (unsigned char) c;
 800e7c2:	6893      	ldr	r3, [r2, #8]
 800e7c4:	7018      	strb	r0, [r3, #0]
		++(info->loc);
 800e7c6:	6893      	ldr	r3, [r2, #8]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	6093      	str	r3, [r2, #8]
		break;
 800e7cc:	e7f1      	b.n	800e7b2 <printk_putc+0xe>

0800e7ce <printk_mknumstr>:
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char *numstr, void *nump, int neg, int radix)
{
 800e7ce:	b430      	push	{r4, r5}
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
 800e7d0:	1c44      	adds	r4, r0, #1
 800e7d2:	2500      	movs	r5, #0
 800e7d4:	7005      	strb	r5, [r0, #0]

	if (neg) {
 800e7d6:	b1b2      	cbz	r2, 800e806 <printk_mknumstr+0x38>
		a = *(int *) nump;
 800e7d8:	6809      	ldr	r1, [r1, #0]
		if (a == 0) {
 800e7da:	b109      	cbz	r1, 800e7e0 <printk_mknumstr+0x12>
	nlen = 0;
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e009      	b.n	800e7f4 <printk_mknumstr+0x26>
			*nstrp = '0';
 800e7e0:	2330      	movs	r3, #48	; 0x30
 800e7e2:	7043      	strb	r3, [r0, #1]
			++nlen;
 800e7e4:	2001      	movs	r0, #1
			goto done;
 800e7e6:	e024      	b.n	800e832 <printk_mknumstr+0x64>
		}
		while (a != 0) {
			b = (int) a / (int) radix;
			c = (int) a - ((int) b * (int) radix);
			if (c < 0) {
				c = ~c + 1 + '0';
 800e7e8:	f1c1 0130 	rsb	r1, r1, #48	; 0x30
			} else {
				c = c + '0';
			}
			a = b;
			*nstrp++ = (char) c;
 800e7ec:	7021      	strb	r1, [r4, #0]
			++nlen;
 800e7ee:	3001      	adds	r0, #1
			*nstrp++ = (char) c;
 800e7f0:	3401      	adds	r4, #1
			a = b;
 800e7f2:	4611      	mov	r1, r2
		while (a != 0) {
 800e7f4:	b1e9      	cbz	r1, 800e832 <printk_mknumstr+0x64>
			b = (int) a / (int) radix;
 800e7f6:	fb91 f2f3 	sdiv	r2, r1, r3
 800e7fa:	fb03 1112 	mls	r1, r3, r2, r1
			if (c < 0) {
 800e7fe:	2900      	cmp	r1, #0
 800e800:	dbf2      	blt.n	800e7e8 <printk_mknumstr+0x1a>
				c = c + '0';
 800e802:	3130      	adds	r1, #48	; 0x30
 800e804:	e7f2      	b.n	800e7ec <printk_mknumstr+0x1e>
 800e806:	4615      	mov	r5, r2
		}
	} else {
		ua = *(unsigned int *) nump;
 800e808:	680a      	ldr	r2, [r1, #0]
		if (ua == 0) {
 800e80a:	b942      	cbnz	r2, 800e81e <printk_mknumstr+0x50>
			*nstrp = '0';
 800e80c:	2330      	movs	r3, #48	; 0x30
 800e80e:	7043      	strb	r3, [r0, #1]
			++nlen;
 800e810:	2001      	movs	r0, #1
			goto done;
 800e812:	e00e      	b.n	800e832 <printk_mknumstr+0x64>
			ub = (unsigned int) ua / (unsigned int) radix;
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
			if (uc < 10) {
				uc = uc + '0';
			} else {
				uc = uc - 10 + 'A';
 800e814:	3237      	adds	r2, #55	; 0x37
			}
			ua = ub;
			*nstrp++ = (char) uc;
 800e816:	7022      	strb	r2, [r4, #0]
			++nlen;
 800e818:	3501      	adds	r5, #1
			*nstrp++ = (char) uc;
 800e81a:	3401      	adds	r4, #1
			ua = ub;
 800e81c:	460a      	mov	r2, r1
		while (ua != 0) {
 800e81e:	b13a      	cbz	r2, 800e830 <printk_mknumstr+0x62>
			ub = (unsigned int) ua / (unsigned int) radix;
 800e820:	fbb2 f1f3 	udiv	r1, r2, r3
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
 800e824:	fb01 2213 	mls	r2, r1, r3, r2
			if (uc < 10) {
 800e828:	2a09      	cmp	r2, #9
 800e82a:	d8f3      	bhi.n	800e814 <printk_mknumstr+0x46>
				uc = uc + '0';
 800e82c:	3230      	adds	r2, #48	; 0x30
 800e82e:	e7f2      	b.n	800e816 <printk_mknumstr+0x48>
		}
	}
	done: return nlen;
 800e830:	4628      	mov	r0, r5
}
 800e832:	bc30      	pop	{r4, r5}
 800e834:	4770      	bx	lr

0800e836 <printk_pad_zero>:
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
 800e836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e838:	4604      	mov	r4, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	4617      	mov	r7, r2
 800e83e:	461e      	mov	r6, r3
	int i;

	for (i = curlen; i < field_width; i++) {
 800e840:	e005      	b.n	800e84e <printk_pad_zero+0x18>
		printk_putc('0', count, info);
 800e842:	4632      	mov	r2, r6
 800e844:	4639      	mov	r1, r7
 800e846:	2030      	movs	r0, #48	; 0x30
 800e848:	f7ff ffac 	bl	800e7a4 <printk_putc>
	for (i = curlen; i < field_width; i++) {
 800e84c:	3401      	adds	r4, #1
 800e84e:	42ac      	cmp	r4, r5
 800e850:	dbf7      	blt.n	800e842 <printk_pad_zero+0xc>
	}
}
 800e852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e854 <printk_pad_space>:

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
 800e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e856:	4604      	mov	r4, r0
 800e858:	460d      	mov	r5, r1
 800e85a:	4617      	mov	r7, r2
 800e85c:	461e      	mov	r6, r3
	int i;

	for (i = curlen; i < field_width; i++) {
 800e85e:	e005      	b.n	800e86c <printk_pad_space+0x18>
		printk_putc(' ', count, info);
 800e860:	4632      	mov	r2, r6
 800e862:	4639      	mov	r1, r7
 800e864:	2020      	movs	r0, #32
 800e866:	f7ff ff9d 	bl	800e7a4 <printk_putc>
	for (i = curlen; i < field_width; i++) {
 800e86a:	3401      	adds	r4, #1
 800e86c:	42ac      	cmp	r4, r5
 800e86e:	dbf7      	blt.n	800e860 <printk_pad_space+0xc>
	}
}
 800e870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e872 <out_char>:
void out_char(char data) {
 800e872:	b508      	push	{r3, lr}
	uart_send1(UART_printf, data);
 800e874:	4601      	mov	r1, r0
 800e876:	2003      	movs	r0, #3
 800e878:	f003 fcd8 	bl	801222c <uart_send1>
}
 800e87c:	bd08      	pop	{r3, pc}

0800e87e <out_char2>:
void out_char2(char data){
 800e87e:	b508      	push	{r3, lr}
	uart_send1(UART_2,data);
 800e880:	4601      	mov	r1, r0
 800e882:	2002      	movs	r0, #2
 800e884:	f003 fcd2 	bl	801222c <uart_send1>
}
 800e888:	bd08      	pop	{r3, pc}
 800e88a:	0000      	movs	r0, r0
 800e88c:	0000      	movs	r0, r0
	...

0800e890 <printk_mkfloatstr>:
{
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	b099      	sub	sp, #100	; 0x64
 800e896:	4604      	mov	r4, r0
 800e898:	4689      	mov	r9, r1
 800e89a:	4692      	mov	sl, r2
	uint32_t p,i,j,k,a[5]={0},b[19]={0};
 800e89c:	2100      	movs	r1, #0
 800e89e:	9113      	str	r1, [sp, #76]	; 0x4c
 800e8a0:	9114      	str	r1, [sp, #80]	; 0x50
 800e8a2:	9115      	str	r1, [sp, #84]	; 0x54
 800e8a4:	9116      	str	r1, [sp, #88]	; 0x58
 800e8a6:	9117      	str	r1, [sp, #92]	; 0x5c
 800e8a8:	224c      	movs	r2, #76	; 0x4c
 800e8aa:	4668      	mov	r0, sp
 800e8ac:	f004 fa83 	bl	8012db6 <memset>
	p=(uint32_t)*f;//整数部分
 800e8b0:	e9d4 4500 	ldrd	r4, r5, [r4]
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	f7ff fcbc 	bl	800e234 <__aeabi_d2uiz>
 800e8bc:	4680      	mov	r8, r0
	tempf=(*f-p);
 800e8be:	f7ff f9a5 	bl	800dc0c <__aeabi_ui2d>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7ff f861 	bl	800d990 <__aeabi_dsub>
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	460d      	mov	r5, r1
	if(precision_width==0)
 800e8d2:	f1ba 0f00 	cmp.w	sl, #0
 800e8d6:	d118      	bne.n	800e90a <printk_mkfloatstr+0x7a>
	   q=(*f-p)*100000000000000000;    //小数部分
 800e8d8:	a35c      	add	r3, pc, #368	; (adr r3, 800ea4c <printk_mkfloatstr+0x1bc>)
 800e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8de:	f7ff fa0f 	bl	800dd00 <__aeabi_dmul>
 800e8e2:	f7ff fcdf 	bl	800e2a4 <__aeabi_d2ulz>
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460f      	mov	r7, r1
	k=0;
 800e8ea:	f04f 0b00 	mov.w	fp, #0
	while(m<1&&m!=0)    //【20201119】-2/3   原为while(m<1)
 800e8ee:	e018      	b.n	800e922 <printk_mkfloatstr+0x92>
		tempf*=10;
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	4b53      	ldr	r3, [pc, #332]	; (800ea40 <printk_mkfloatstr+0x1b0>)
 800e8f4:	f7ff fa04 	bl	800dd00 <__aeabi_dmul>
		while(precision_width--)    
 800e8f8:	4633      	mov	r3, r6
 800e8fa:	1e5e      	subs	r6, r3, #1
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1f7      	bne.n	800e8f0 <printk_mkfloatstr+0x60>
		q=tempf;
 800e900:	f7ff fcd0 	bl	800e2a4 <__aeabi_d2ulz>
 800e904:	4606      	mov	r6, r0
 800e906:	460f      	mov	r7, r1
 800e908:	e7ef      	b.n	800e8ea <printk_mkfloatstr+0x5a>
 800e90a:	4653      	mov	r3, sl
 800e90c:	e7f5      	b.n	800e8fa <printk_mkfloatstr+0x6a>
		m=m*10;
 800e90e:	2200      	movs	r2, #0
 800e910:	4b4b      	ldr	r3, [pc, #300]	; (800ea40 <printk_mkfloatstr+0x1b0>)
 800e912:	4620      	mov	r0, r4
 800e914:	4629      	mov	r1, r5
 800e916:	f7ff f9f3 	bl	800dd00 <__aeabi_dmul>
 800e91a:	4604      	mov	r4, r0
 800e91c:	460d      	mov	r5, r1
		k++;
 800e91e:	f10b 0b01 	add.w	fp, fp, #1
	while(m<1&&m!=0)    //【20201119】-2/3   原为while(m<1)
 800e922:	2200      	movs	r2, #0
 800e924:	4b47      	ldr	r3, [pc, #284]	; (800ea44 <printk_mkfloatstr+0x1b4>)
 800e926:	4620      	mov	r0, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	f7ff fc5b 	bl	800e1e4 <__aeabi_dcmplt>
 800e92e:	b138      	cbz	r0, 800e940 <printk_mkfloatstr+0xb0>
 800e930:	2200      	movs	r2, #0
 800e932:	2300      	movs	r3, #0
 800e934:	4620      	mov	r0, r4
 800e936:	4629      	mov	r1, r5
 800e938:	f7ff fc4a 	bl	800e1d0 <__aeabi_dcmpeq>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	d0e6      	beq.n	800e90e <printk_mkfloatstr+0x7e>
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
 800e940:	f10b 35ff 	add.w	r5, fp, #4294967295
	if(0==p)//整数部分为0
 800e944:	f1b8 0f00 	cmp.w	r8, #0
 800e948:	d123      	bne.n	800e992 <printk_mkfloatstr+0x102>
		c[i++]='0';
 800e94a:	2330      	movs	r3, #48	; 0x30
 800e94c:	f889 3000 	strb.w	r3, [r9]
 800e950:	f04f 0801 	mov.w	r8, #1
	c[i++]='.';   //小数点
 800e954:	f108 0b01 	add.w	fp, r8, #1
 800e958:	232e      	movs	r3, #46	; 0x2e
 800e95a:	f809 3008 	strb.w	r3, [r9, r8]
	if(0==q)     //小数部分为0
 800e95e:	ea56 0307 	orrs.w	r3, r6, r7
 800e962:	d02c      	beq.n	800e9be <printk_mkfloatstr+0x12e>
		j=0;
 800e964:	2400      	movs	r4, #0
 800e966:	e04c      	b.n	800ea02 <printk_mkfloatstr+0x172>
			a[j++]=p%10;
 800e968:	4b37      	ldr	r3, [pc, #220]	; (800ea48 <printk_mkfloatstr+0x1b8>)
 800e96a:	fba3 1308 	umull	r1, r3, r3, r8
 800e96e:	08db      	lsrs	r3, r3, #3
 800e970:	4618      	mov	r0, r3
 800e972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e976:	0059      	lsls	r1, r3, #1
 800e978:	eba8 0301 	sub.w	r3, r8, r1
 800e97c:	a918      	add	r1, sp, #96	; 0x60
 800e97e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e982:	f841 3c14 	str.w	r3, [r1, #-20]
			p/=10;
 800e986:	4680      	mov	r8, r0
			a[j++]=p%10;
 800e988:	3201      	adds	r2, #1
		while(p!=0)//倒序的数字
 800e98a:	f1b8 0f00 	cmp.w	r8, #0
 800e98e:	d1eb      	bne.n	800e968 <printk_mkfloatstr+0xd8>
 800e990:	e00c      	b.n	800e9ac <printk_mkfloatstr+0x11c>
		j=0;
 800e992:	2200      	movs	r2, #0
 800e994:	e7f9      	b.n	800e98a <printk_mkfloatstr+0xfa>
			c[i++]=a[j-1]+'0';
 800e996:	3a01      	subs	r2, #1
 800e998:	ab18      	add	r3, sp, #96	; 0x60
 800e99a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e99e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800e9a2:	3330      	adds	r3, #48	; 0x30
 800e9a4:	f809 3008 	strb.w	r3, [r9, r8]
 800e9a8:	f108 0801 	add.w	r8, r8, #1
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
 800e9ac:	2a00      	cmp	r2, #0
 800e9ae:	d1f2      	bne.n	800e996 <printk_mkfloatstr+0x106>
 800e9b0:	e7d0      	b.n	800e954 <printk_mkfloatstr+0xc4>
		while(zeroNum--) c[i++]='0';     //【20201119】-3/3   原为 c[i++]='0';
 800e9b2:	2230      	movs	r2, #48	; 0x30
 800e9b4:	f809 200b 	strb.w	r2, [r9, fp]
 800e9b8:	469a      	mov	sl, r3
 800e9ba:	f10b 0b01 	add.w	fp, fp, #1
 800e9be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e9c2:	f1ba 0f00 	cmp.w	sl, #0
 800e9c6:	d1f4      	bne.n	800e9b2 <printk_mkfloatstr+0x122>
	c[i]='\0';
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f809 300b 	strb.w	r3, [r9, fp]
}
 800e9ce:	4658      	mov	r0, fp
 800e9d0:	b019      	add	sp, #100	; 0x64
 800e9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[j++]=q%10;
 800e9d6:	220a      	movs	r2, #10
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4630      	mov	r0, r6
 800e9dc:	4639      	mov	r1, r7
 800e9de:	f7ff fc49 	bl	800e274 <__aeabi_uldivmod>
 800e9e2:	f104 0801 	add.w	r8, r4, #1
 800e9e6:	ab18      	add	r3, sp, #96	; 0x60
 800e9e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9ec:	f844 2c60 	str.w	r2, [r4, #-96]
			q/=10;
 800e9f0:	220a      	movs	r2, #10
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7ff fc3c 	bl	800e274 <__aeabi_uldivmod>
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	460f      	mov	r7, r1
			b[j++]=q%10;
 800ea00:	4644      	mov	r4, r8
		while(q!=0)//倒序的数字
 800ea02:	ea56 0307 	orrs.w	r3, r6, r7
 800ea06:	d1e6      	bne.n	800e9d6 <printk_mkfloatstr+0x146>
 800ea08:	e007      	b.n	800ea1a <printk_mkfloatstr+0x18a>
			b[j++]=0;
 800ea0a:	ab18      	add	r3, sp, #96	; 0x60
 800ea0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea10:	2200      	movs	r2, #0
 800ea12:	f843 2c60 	str.w	r2, [r3, #-96]
			k--;
 800ea16:	3d01      	subs	r5, #1
			b[j++]=0;
 800ea18:	3401      	adds	r4, #1
		while(k!=0)
 800ea1a:	2d00      	cmp	r5, #0
 800ea1c:	d1f5      	bne.n	800ea0a <printk_mkfloatstr+0x17a>
 800ea1e:	e00a      	b.n	800ea36 <printk_mkfloatstr+0x1a6>
			c[i++]=b[j-1]+'0';
 800ea20:	3c01      	subs	r4, #1
 800ea22:	ab18      	add	r3, sp, #96	; 0x60
 800ea24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea28:	f853 3c60 	ldr.w	r3, [r3, #-96]
 800ea2c:	3330      	adds	r3, #48	; 0x30
 800ea2e:	f809 300b 	strb.w	r3, [r9, fp]
 800ea32:	f10b 0b01 	add.w	fp, fp, #1
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
 800ea36:	2c00      	cmp	r4, #0
 800ea38:	d1f2      	bne.n	800ea20 <printk_mkfloatstr+0x190>
 800ea3a:	e7c5      	b.n	800e9c8 <printk_mkfloatstr+0x138>
 800ea3c:	f3af 8000 	nop.w
 800ea40:	40240000 	.word	0x40240000
 800ea44:	3ff00000 	.word	0x3ff00000
 800ea48:	cccccccd 	.word	0xcccccccd
 800ea4c:	85d8a000 	.word	0x85d8a000
 800ea50:	43763457 	.word	0x43763457

0800ea54 <printk>:
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
 800ea54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea58:	b097      	sub	sp, #92	; 0x5c
 800ea5a:	9001      	str	r0, [sp, #4]
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	4691      	mov	r9, r2

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
 800ea60:	2221      	movs	r2, #33	; 0x21
 800ea62:	2100      	movs	r1, #0
 800ea64:	a80d      	add	r0, sp, #52	; 0x34
 800ea66:	f004 f9a6 	bl	8012db6 <memset>
 800ea6a:	2330      	movs	r3, #48	; 0x30
 800ea6c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
 800ea70:	2300      	movs	r3, #0
 800ea72:	930c      	str	r3, [sp, #48]	; 0x30
	length_modifier=0;
	precision_used=TRUE;
 800ea74:	2201      	movs	r2, #1
 800ea76:	9202      	str	r2, [sp, #8]
	length_modifier=0;
 800ea78:	469b      	mov	fp, r3
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
 800ea7a:	e00b      	b.n	800ea94 <printk+0x40>
			if (c != '\n') {
				printk_putc(c, &count, info);
			}
			//输出换行符
			else {
				printk_putc(0x0D /* CR */, &count, info);
 800ea7c:	9d01      	ldr	r5, [sp, #4]
 800ea7e:	462a      	mov	r2, r5
 800ea80:	a90c      	add	r1, sp, #48	; 0x30
 800ea82:	200d      	movs	r0, #13
 800ea84:	f7ff fe8e 	bl	800e7a4 <printk_putc>
				printk_putc(0x0A /* LF */, &count, info);
 800ea88:	462a      	mov	r2, r5
 800ea8a:	a90c      	add	r1, sp, #48	; 0x30
 800ea8c:	200a      	movs	r0, #10
 800ea8e:	f7ff fe89 	bl	800e7a4 <printk_putc>
	for (p = (char *) fmt; (c = *p) != 0; p++)
 800ea92:	3401      	adds	r4, #1
 800ea94:	7820      	ldrb	r0, [r4, #0]
 800ea96:	2800      	cmp	r0, #0
 800ea98:	f000 82b2 	beq.w	800f000 <printk+0x5ac>
		if (c != '%')
 800ea9c:	2825      	cmp	r0, #37	; 0x25
 800ea9e:	d041      	beq.n	800eb24 <printk+0xd0>
			if (c != '\n') {
 800eaa0:	280a      	cmp	r0, #10
 800eaa2:	d0eb      	beq.n	800ea7c <printk+0x28>
				printk_putc(c, &count, info);
 800eaa4:	9a01      	ldr	r2, [sp, #4]
 800eaa6:	a90c      	add	r1, sp, #48	; 0x30
 800eaa8:	f7ff fe7c 	bl	800e7a4 <printk_putc>
 800eaac:	e7f1      	b.n	800ea92 <printk+0x3e>
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
			case '-':
				flags_used |= FLAGS_MINUS;
 800eaae:	f046 0601 	orr.w	r6, r6, #1
{
 800eab2:	4614      	mov	r4, r2
		while (!done) {
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d13a      	bne.n	800eb2e <printk+0xda>
			switch (/* c = */*++p) {
 800eab8:	1c62      	adds	r2, r4, #1
 800eaba:	7863      	ldrb	r3, [r4, #1]
 800eabc:	3b20      	subs	r3, #32
 800eabe:	2b10      	cmp	r3, #16
 800eac0:	d833      	bhi.n	800eb2a <printk+0xd6>
 800eac2:	a001      	add	r0, pc, #4	; (adr r0, 800eac8 <printk+0x74>)
 800eac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eac8:	0800eb13 	.word	0x0800eb13
 800eacc:	0800eb2b 	.word	0x0800eb2b
 800ead0:	0800eb2b 	.word	0x0800eb2b
 800ead4:	0800eb1f 	.word	0x0800eb1f
 800ead8:	0800eb2b 	.word	0x0800eb2b
 800eadc:	0800eb2b 	.word	0x0800eb2b
 800eae0:	0800eb2b 	.word	0x0800eb2b
 800eae4:	0800eb2b 	.word	0x0800eb2b
 800eae8:	0800eb2b 	.word	0x0800eb2b
 800eaec:	0800eb2b 	.word	0x0800eb2b
 800eaf0:	0800eb2b 	.word	0x0800eb2b
 800eaf4:	0800eb0d 	.word	0x0800eb0d
 800eaf8:	0800eb2b 	.word	0x0800eb2b
 800eafc:	0800eaaf 	.word	0x0800eaaf
 800eb00:	0800eb2b 	.word	0x0800eb2b
 800eb04:	0800eb2b 	.word	0x0800eb2b
 800eb08:	0800eb19 	.word	0x0800eb19
				break;
			case '+':
				flags_used |= FLAGS_PLUS;
 800eb0c:	f046 0602 	orr.w	r6, r6, #2
				break;
 800eb10:	e7cf      	b.n	800eab2 <printk+0x5e>
			case ' ':
				flags_used |= FLAGS_SPACE;
 800eb12:	f046 0604 	orr.w	r6, r6, #4
				break;
 800eb16:	e7cc      	b.n	800eab2 <printk+0x5e>
			case '0':
				flags_used |= FLAGS_ZERO;
 800eb18:	f046 0608 	orr.w	r6, r6, #8
				break;
 800eb1c:	e7c9      	b.n	800eab2 <printk+0x5e>
			case '#':
				flags_used |= FLAGS_POUND;
 800eb1e:	f046 0610 	orr.w	r6, r6, #16
				break;
 800eb22:	e7c6      	b.n	800eab2 <printk+0x5e>
		flags_used = 0;
 800eb24:	2600      	movs	r6, #0
		done = FALSE;
 800eb26:	4631      	mov	r1, r6
 800eb28:	e7c4      	b.n	800eab4 <printk+0x60>
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	e7c2      	b.n	800eab4 <printk+0x60>
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
 800eb2e:	2500      	movs	r5, #0
		done = FALSE;
 800eb30:	462f      	mov	r7, r5
 800eb32:	e000      	b.n	800eb36 <printk+0xe2>
				field_width = (field_width * 10) + (c - '0');
				break;
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
 800eb34:	460f      	mov	r7, r1
		while (!done) {
 800eb36:	b967      	cbnz	r7, 800eb52 <printk+0xfe>
			switch (c = *++p) {
 800eb38:	1c60      	adds	r0, r4, #1
 800eb3a:	7863      	ldrb	r3, [r4, #1]
 800eb3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eb40:	2a09      	cmp	r2, #9
 800eb42:	d8f7      	bhi.n	800eb34 <printk+0xe0>
				field_width = (field_width * 10) + (c - '0');
 800eb44:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800eb48:	006a      	lsls	r2, r5, #1
 800eb4a:	3b30      	subs	r3, #48	; 0x30
 800eb4c:	18d5      	adds	r5, r2, r3
			switch (c = *++p) {
 800eb4e:	4604      	mov	r4, r0
				break;
 800eb50:	e7f1      	b.n	800eb36 <printk+0xe2>
				break;
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
 800eb52:	1c62      	adds	r2, r4, #1
 800eb54:	7863      	ldrb	r3, [r4, #1]
 800eb56:	2b2e      	cmp	r3, #46	; 0x2e
 800eb58:	d036      	beq.n	800ebc8 <printk+0x174>
		} else {
			/* we've gone one char too far */
			--p;
#if 1
			precision_used = FALSE;
			precision_width = 0;
 800eb5a:	f04f 0800 	mov.w	r8, #0
			precision_used = FALSE;
 800eb5e:	f8cd 8008 	str.w	r8, [sp, #8]
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
 800eb62:	1c63      	adds	r3, r4, #1
 800eb64:	7862      	ldrb	r2, [r4, #1]
 800eb66:	2a68      	cmp	r2, #104	; 0x68
 800eb68:	d004      	beq.n	800eb74 <printk+0x120>
 800eb6a:	2a6c      	cmp	r2, #108	; 0x6c
 800eb6c:	d042      	beq.n	800ebf4 <printk+0x1a0>
 800eb6e:	2a4c      	cmp	r2, #76	; 0x4c
 800eb70:	d043      	beq.n	800ebfa <printk+0x1a6>
		case 'L':
			 length_modifier |= LENMOD_L;
			break;
		default:
			/* we've gone one char too far */
			--p;
 800eb72:	4623      	mov	r3, r4
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
 800eb74:	1c5c      	adds	r4, r3, #1
 800eb76:	7858      	ldrb	r0, [r3, #1]
 800eb78:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
 800eb7c:	2b20      	cmp	r3, #32
 800eb7e:	f200 8238 	bhi.w	800eff2 <printk+0x59e>
 800eb82:	e8df f013 	tbh	[pc, r3, lsl #1]
 800eb86:	011f      	.short	0x011f
 800eb88:	02360236 	.word	0x02360236
 800eb8c:	02360236 	.word	0x02360236
 800eb90:	02360236 	.word	0x02360236
 800eb94:	02360236 	.word	0x02360236
 800eb98:	01a20236 	.word	0x01a20236
 800eb9c:	003d01ef 	.word	0x003d01ef
 800eba0:	009a0236 	.word	0x009a0236
 800eba4:	02360236 	.word	0x02360236
 800eba8:	0236003d 	.word	0x0236003d
 800ebac:	02360236 	.word	0x02360236
 800ebb0:	022f0236 	.word	0x022f0236
 800ebb4:	01b10184 	.word	0x01b10184
 800ebb8:	02360236 	.word	0x02360236
 800ebbc:	023601f9 	.word	0x023601f9
 800ebc0:	023601c0 	.word	0x023601c0
 800ebc4:	011f0236 	.word	0x011f0236
			precision_width = 0;
 800ebc8:	f04f 0800 	mov.w	r8, #0
			done = FALSE;
 800ebcc:	4640      	mov	r0, r8
 800ebce:	e000      	b.n	800ebd2 <printk+0x17e>
					done = TRUE;
 800ebd0:	4638      	mov	r0, r7
			while (!done) {
 800ebd2:	b968      	cbnz	r0, 800ebf0 <printk+0x19c>
				switch ( c = *++p) {
 800ebd4:	1c54      	adds	r4, r2, #1
 800ebd6:	7853      	ldrb	r3, [r2, #1]
 800ebd8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ebdc:	2909      	cmp	r1, #9
 800ebde:	d8f7      	bhi.n	800ebd0 <printk+0x17c>
				precision_width = (precision_width * 10) +	(c - '0');
 800ebe0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800ebe4:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800ebe8:	eb02 0801 	add.w	r8, r2, r1
				switch ( c = *++p) {
 800ebec:	4622      	mov	r2, r4
					break;
 800ebee:	e7f0      	b.n	800ebd2 <printk+0x17e>
 800ebf0:	4614      	mov	r4, r2
 800ebf2:	e7b6      	b.n	800eb62 <printk+0x10e>
			 length_modifier |= LENMOD_l;
 800ebf4:	f04b 0b01 	orr.w	fp, fp, #1
			break;
 800ebf8:	e7bc      	b.n	800eb74 <printk+0x120>
			 length_modifier |= LENMOD_L;
 800ebfa:	f04b 0b02 	orr.w	fp, fp, #2
			break;
 800ebfe:	e7b9      	b.n	800eb74 <printk+0x120>
		case 'd':
		case 'i':
			 //此时ap为指向可变参数列表的第一个参数
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec00:	f109 0704 	add.w	r7, r9, #4
 800ec04:	f8d9 3000 	ldr.w	r3, [r9]
 800ec08:	a916      	add	r1, sp, #88	; 0x58
 800ec0a:	f841 3d2c 	str.w	r3, [r1, #-44]!
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ec0e:	230a      	movs	r3, #10
 800ec10:	2201      	movs	r2, #1
 800ec12:	a80d      	add	r0, sp, #52	; 0x34
 800ec14:	f7ff fddb 	bl	800e7ce <printk_mknumstr>
 800ec18:	4682      	mov	sl, r0
			vstrp = &vstr[vlen];  //指向转换后的最后一个字符
 800ec1a:	ab0d      	add	r3, sp, #52	; 0x34
 800ec1c:	eb03 0800 	add.w	r8, r3, r0

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
 800ec20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	db07      	blt.n	800ec36 <printk+0x1e2>
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
 800ec26:	f016 0f02 	tst.w	r6, #2
 800ec2a:	d017      	beq.n	800ec5c <printk+0x208>
					schar = '+';
					++vlen;
 800ec2c:	f100 0a01 	add.w	sl, r0, #1
					schar = '+';
 800ec30:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800ec34:	e003      	b.n	800ec3e <printk+0x1ea>
				++vlen;
 800ec36:	f100 0a01 	add.w	sl, r0, #1
				schar = '-';
 800ec3a:	f04f 092d 	mov.w	r9, #45	; 0x2d
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
 800ec3e:	f016 0f08 	tst.w	r6, #8
 800ec42:	d019      	beq.n	800ec78 <printk+0x224>
				if (schar)
 800ec44:	f1b9 0f00 	cmp.w	r9, #0
 800ec48:	d110      	bne.n	800ec6c <printk+0x218>
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
 800ec4a:	9b01      	ldr	r3, [sp, #4]
 800ec4c:	aa0c      	add	r2, sp, #48	; 0x30
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4650      	mov	r0, sl
 800ec52:	f7ff fdf0 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800ec56:	46aa      	mov	sl, r5
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec58:	46b9      	mov	r9, r7
 800ec5a:	e171      	b.n	800ef40 <printk+0x4ec>
					if (IS_FLAG_SPACE(flags_used)) {
 800ec5c:	f016 0904 	ands.w	r9, r6, #4
 800ec60:	d0ed      	beq.n	800ec3e <printk+0x1ea>
						++vlen;
 800ec62:	f100 0a01 	add.w	sl, r0, #1
						schar = ' ';
 800ec66:	f04f 0920 	mov.w	r9, #32
 800ec6a:	e7e8      	b.n	800ec3e <printk+0x1ea>
					printk_putc(schar, &count, info);  //输出符号
 800ec6c:	9a01      	ldr	r2, [sp, #4]
 800ec6e:	a90c      	add	r1, sp, #48	; 0x30
 800ec70:	4648      	mov	r0, r9
 800ec72:	f7ff fd97 	bl	800e7a4 <printk_putc>
 800ec76:	e7e8      	b.n	800ec4a <printk+0x1f6>
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
 800ec78:	f016 0f01 	tst.w	r6, #1
 800ec7c:	d004      	beq.n	800ec88 <printk+0x234>
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
 800ec7e:	f1b9 0f00 	cmp.w	r9, #0
 800ec82:	d113      	bne.n	800ecac <printk+0x258>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec84:	46b9      	mov	r9, r7
 800ec86:	e15b      	b.n	800ef40 <printk+0x4ec>
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	aa0c      	add	r2, sp, #48	; 0x30
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	4650      	mov	r0, sl
 800ec90:	f7ff fde0 	bl	800e854 <printk_pad_space>
					if (schar)
 800ec94:	f1b9 0f00 	cmp.w	r9, #0
 800ec98:	d101      	bne.n	800ec9e <printk+0x24a>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ec9a:	46b9      	mov	r9, r7
 800ec9c:	e150      	b.n	800ef40 <printk+0x4ec>
						printk_putc(schar, &count, info);
 800ec9e:	9a01      	ldr	r2, [sp, #4]
 800eca0:	a90c      	add	r1, sp, #48	; 0x30
 800eca2:	4648      	mov	r0, r9
 800eca4:	f7ff fd7e 	bl	800e7a4 <printk_putc>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800eca8:	46b9      	mov	r9, r7
 800ecaa:	e149      	b.n	800ef40 <printk+0x4ec>
				printk_putc(schar, &count, info);
 800ecac:	9a01      	ldr	r2, [sp, #4]
 800ecae:	a90c      	add	r1, sp, #48	; 0x30
 800ecb0:	4648      	mov	r0, r9
 800ecb2:	f7ff fd77 	bl	800e7a4 <printk_putc>
			ival = (int) va_arg(ap, int);  //返回当前参数，并将ap指向下一个参数
 800ecb6:	46b9      	mov	r9, r7
 800ecb8:	e142      	b.n	800ef40 <printk+0x4ec>
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg(ap,double);
 800ecba:	f109 070c 	add.w	r7, r9, #12
 800ecbe:	e9d9 9a01 	ldrd	r9, sl, [r9, #4]
 800ecc2:	e9cd 9a08 	strd	r9, sl, [sp, #32]
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	2300      	movs	r3, #0
 800ecca:	4648      	mov	r0, r9
 800eccc:	4651      	mov	r1, sl
 800ecce:	f7ff fa89 	bl	800e1e4 <__aeabi_dcmplt>
 800ecd2:	b940      	cbnz	r0, 800ece6 <printk+0x292>
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
 800ecd4:	f016 0f02 	tst.w	r6, #2
 800ecd8:	d12b      	bne.n	800ed32 <printk+0x2de>
					schar = '+';
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
 800ecda:	f016 0904 	ands.w	r9, r6, #4
 800ecde:	d00d      	beq.n	800ecfc <printk+0x2a8>
						schar = ' ';
 800ece0:	f04f 0920 	mov.w	r9, #32
 800ece4:	e00a      	b.n	800ecfc <printk+0x2a8>
				fval = -fval;				//负数取它的正数
 800ece6:	f8cd 9010 	str.w	r9, [sp, #16]
 800ecea:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800ecee:	9305      	str	r3, [sp, #20]
 800ecf0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ecf4:	ed8d 7b08 	vstr	d7, [sp, #32]
				schar = '-';
 800ecf8:	f04f 092d 	mov.w	r9, #45	; 0x2d
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
 800ecfc:	9b02      	ldr	r3, [sp, #8]
 800ecfe:	b9db      	cbnz	r3, 800ed38 <printk+0x2e4>
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{
				if(length_modifier==0)   //浮点型精度到小数点后8位
 800ed00:	f1bb 0f00 	cmp.w	fp, #0
 800ed04:	d11f      	bne.n	800ed46 <printk+0x2f2>
				{
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ed06:	2206      	movs	r2, #6
 800ed08:	a90d      	add	r1, sp, #52	; 0x34
 800ed0a:	a808      	add	r0, sp, #32
 800ed0c:	f7ff fdc0 	bl	800e890 <printk_mkfloatstr>
 800ed10:	4680      	mov	r8, r0
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
 800ed12:	f016 0f08 	tst.w	r6, #8
 800ed16:	d023      	beq.n	800ed60 <printk+0x30c>
				if (schar)
 800ed18:	f1b9 0f00 	cmp.w	r9, #0
 800ed1c:	d11a      	bne.n	800ed54 <printk+0x300>
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
 800ed1e:	9b01      	ldr	r3, [sp, #4]
 800ed20:	aa0c      	add	r2, sp, #48	; 0x30
 800ed22:	4629      	mov	r1, r5
 800ed24:	4640      	mov	r0, r8
 800ed26:	f7ff fd86 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800ed2a:	46a8      	mov	r8, r5
 800ed2c:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 800ed30:	e037      	b.n	800eda2 <printk+0x34e>
					schar = '+';
 800ed32:	f04f 092b 	mov.w	r9, #43	; 0x2b
 800ed36:	e7e1      	b.n	800ecfc <printk+0x2a8>
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ed38:	4642      	mov	r2, r8
 800ed3a:	a90d      	add	r1, sp, #52	; 0x34
 800ed3c:	a808      	add	r0, sp, #32
 800ed3e:	f7ff fda7 	bl	800e890 <printk_mkfloatstr>
 800ed42:	4680      	mov	r8, r0
 800ed44:	e7e5      	b.n	800ed12 <printk+0x2be>
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
 800ed46:	2206      	movs	r2, #6
 800ed48:	a90d      	add	r1, sp, #52	; 0x34
 800ed4a:	a808      	add	r0, sp, #32
 800ed4c:	f7ff fda0 	bl	800e890 <printk_mkfloatstr>
 800ed50:	4680      	mov	r8, r0
 800ed52:	e7de      	b.n	800ed12 <printk+0x2be>
					printk_putc(schar, &count, info);  //输出符号
 800ed54:	9a01      	ldr	r2, [sp, #4]
 800ed56:	a90c      	add	r1, sp, #48	; 0x30
 800ed58:	4648      	mov	r0, r9
 800ed5a:	f7ff fd23 	bl	800e7a4 <printk_putc>
 800ed5e:	e7de      	b.n	800ed1e <printk+0x2ca>
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
 800ed60:	f016 0f01 	tst.w	r6, #1
 800ed64:	d008      	beq.n	800ed78 <printk+0x324>
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
 800ed66:	f1b9 0f00 	cmp.w	r9, #0
 800ed6a:	d0df      	beq.n	800ed2c <printk+0x2d8>
				printk_putc(schar, &count, info);
 800ed6c:	9a01      	ldr	r2, [sp, #4]
 800ed6e:	a90c      	add	r1, sp, #48	; 0x30
 800ed70:	4648      	mov	r0, r9
 800ed72:	f7ff fd17 	bl	800e7a4 <printk_putc>
 800ed76:	e7d9      	b.n	800ed2c <printk+0x2d8>
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	aa0c      	add	r2, sp, #48	; 0x30
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4640      	mov	r0, r8
 800ed80:	f7ff fd68 	bl	800e854 <printk_pad_space>
					if (schar)
 800ed84:	f1b9 0f00 	cmp.w	r9, #0
 800ed88:	d0d0      	beq.n	800ed2c <printk+0x2d8>
						printk_putc(schar, &count, info);
 800ed8a:	9a01      	ldr	r2, [sp, #4]
 800ed8c:	a90c      	add	r1, sp, #48	; 0x30
 800ed8e:	4648      	mov	r0, r9
 800ed90:	f7ff fd08 	bl	800e7a4 <printk_putc>
 800ed94:	e7ca      	b.n	800ed2c <printk+0x2d8>
			}
			while (*vstrp)
				printk_putc(*vstrp++, &count, info);
 800ed96:	f109 0901 	add.w	r9, r9, #1
 800ed9a:	9a01      	ldr	r2, [sp, #4]
 800ed9c:	a90c      	add	r1, sp, #48	; 0x30
 800ed9e:	f7ff fd01 	bl	800e7a4 <printk_putc>
			while (*vstrp)
 800eda2:	f899 0000 	ldrb.w	r0, [r9]
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d1f5      	bne.n	800ed96 <printk+0x342>
			if (IS_FLAG_MINUS(flags_used)) {
 800edaa:	f016 0f01 	tst.w	r6, #1
 800edae:	d101      	bne.n	800edb4 <printk+0x360>
			fval= (double)va_arg(ap,double);
 800edb0:	46b9      	mov	r9, r7
 800edb2:	e66e      	b.n	800ea92 <printk+0x3e>
				printk_pad_space(vlen, field_width, &count, info);
 800edb4:	9b01      	ldr	r3, [sp, #4]
 800edb6:	aa0c      	add	r2, sp, #48	; 0x30
 800edb8:	4629      	mov	r1, r5
 800edba:	4640      	mov	r0, r8
 800edbc:	f7ff fd4a 	bl	800e854 <printk_pad_space>
			fval= (double)va_arg(ap,double);
 800edc0:	46b9      	mov	r9, r7
 800edc2:	e666      	b.n	800ea92 <printk+0x3e>
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg(ap, unsigned int);
 800edc4:	f109 0304 	add.w	r3, r9, #4
 800edc8:	9303      	str	r3, [sp, #12]
 800edca:	f8d9 3000 	ldr.w	r3, [r9]
 800edce:	a916      	add	r1, sp, #88	; 0x58
 800edd0:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
 800edd4:	2310      	movs	r3, #16
 800edd6:	2200      	movs	r2, #0
 800edd8:	a80d      	add	r0, sp, #52	; 0x34
 800edda:	f7ff fcf8 	bl	800e7ce <printk_mknumstr>
 800edde:	4682      	mov	sl, r0
			vstrp = &vstr[vlen];
 800ede0:	ab0d      	add	r3, sp, #52	; 0x34
 800ede2:	eb03 0800 	add.w	r8, r3, r0

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
 800ede6:	f016 0908 	ands.w	r9, r6, #8
 800edea:	d021      	beq.n	800ee30 <printk+0x3dc>
				if (IS_FLAG_POUND(flags_used)) {
 800edec:	f016 0910 	ands.w	r9, r6, #16
 800edf0:	d110      	bne.n	800ee14 <printk+0x3c0>
					printk_putc('0', &count, info);
					printk_putc('x', &count, info);
					/*vlen += 2;*/
					dschar = TRUE;
				}
				printk_pad_zero(vlen, field_width, &count, info);
 800edf2:	9b01      	ldr	r3, [sp, #4]
 800edf4:	aa0c      	add	r2, sp, #48	; 0x30
 800edf6:	4629      	mov	r1, r5
 800edf8:	4650      	mov	r0, sl
 800edfa:	f7ff fd1c 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800edfe:	46aa      	mov	sl, r5
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
 800ee00:	f016 0f10 	tst.w	r6, #16
 800ee04:	f000 80ab 	beq.w	800ef5e <printk+0x50a>
 800ee08:	f1b9 0f00 	cmp.w	r9, #0
 800ee0c:	d02f      	beq.n	800ee6e <printk+0x41a>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ee0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ee12:	e095      	b.n	800ef40 <printk+0x4ec>
					printk_putc('0', &count, info);
 800ee14:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee18:	464a      	mov	r2, r9
 800ee1a:	a90c      	add	r1, sp, #48	; 0x30
 800ee1c:	2030      	movs	r0, #48	; 0x30
 800ee1e:	f7ff fcc1 	bl	800e7a4 <printk_putc>
					printk_putc('x', &count, info);
 800ee22:	464a      	mov	r2, r9
 800ee24:	a90c      	add	r1, sp, #48	; 0x30
 800ee26:	2078      	movs	r0, #120	; 0x78
 800ee28:	f7ff fcbc 	bl	800e7a4 <printk_putc>
					dschar = TRUE;
 800ee2c:	46b9      	mov	r9, r7
 800ee2e:	e7e0      	b.n	800edf2 <printk+0x39e>
				if (!IS_FLAG_MINUS(flags_used)) {
 800ee30:	f016 0f01 	tst.w	r6, #1
 800ee34:	d1e4      	bne.n	800ee00 <printk+0x3ac>
					if (IS_FLAG_POUND(flags_used)) {
 800ee36:	f016 0910 	ands.w	r9, r6, #16
 800ee3a:	d001      	beq.n	800ee40 <printk+0x3ec>
						vlen += 2;
 800ee3c:	f100 0a02 	add.w	sl, r0, #2
					printk_pad_space(vlen, field_width, &count, info);
 800ee40:	9b01      	ldr	r3, [sp, #4]
 800ee42:	aa0c      	add	r2, sp, #48	; 0x30
 800ee44:	4629      	mov	r1, r5
 800ee46:	4650      	mov	r0, sl
 800ee48:	f7ff fd04 	bl	800e854 <printk_pad_space>
					if (IS_FLAG_POUND(flags_used)) {
 800ee4c:	f1b9 0f00 	cmp.w	r9, #0
 800ee50:	d0d6      	beq.n	800ee00 <printk+0x3ac>
						printk_putc('0', &count, info);
 800ee52:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee56:	464a      	mov	r2, r9
 800ee58:	a90c      	add	r1, sp, #48	; 0x30
 800ee5a:	2030      	movs	r0, #48	; 0x30
 800ee5c:	f7ff fca2 	bl	800e7a4 <printk_putc>
						printk_putc('x', &count, info);
 800ee60:	464a      	mov	r2, r9
 800ee62:	a90c      	add	r1, sp, #48	; 0x30
 800ee64:	2078      	movs	r0, #120	; 0x78
 800ee66:	f7ff fc9d 	bl	800e7a4 <printk_putc>
						dschar = TRUE;
 800ee6a:	46b9      	mov	r9, r7
 800ee6c:	e7c8      	b.n	800ee00 <printk+0x3ac>
				printk_putc('0', &count, info);
 800ee6e:	9f01      	ldr	r7, [sp, #4]
 800ee70:	463a      	mov	r2, r7
 800ee72:	a90c      	add	r1, sp, #48	; 0x30
 800ee74:	2030      	movs	r0, #48	; 0x30
 800ee76:	f7ff fc95 	bl	800e7a4 <printk_putc>
				printk_putc('x', &count, info);
 800ee7a:	463a      	mov	r2, r7
 800ee7c:	a90c      	add	r1, sp, #48	; 0x30
 800ee7e:	2078      	movs	r0, #120	; 0x78
 800ee80:	f7ff fc90 	bl	800e7a4 <printk_putc>
				vlen += 2;
 800ee84:	f10a 0a02 	add.w	sl, sl, #2
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ee88:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ee8c:	e058      	b.n	800ef40 <printk+0x4ec>
			}
			goto cont_xd;
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ee8e:	f109 0704 	add.w	r7, r9, #4
 800ee92:	f8d9 3000 	ldr.w	r3, [r9]
 800ee96:	a916      	add	r1, sp, #88	; 0x58
 800ee98:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
 800ee9c:	2308      	movs	r3, #8
 800ee9e:	2200      	movs	r2, #0
 800eea0:	a80d      	add	r0, sp, #52	; 0x34
 800eea2:	f7ff fc94 	bl	800e7ce <printk_mknumstr>
 800eea6:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, unsigned int);
 800eea8:	46b9      	mov	r9, r7
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
 800eeaa:	ab0d      	add	r3, sp, #52	; 0x34
 800eeac:	eb03 080a 	add.w	r8, r3, sl

			if (IS_FLAG_ZERO(flags_used)) {
 800eeb0:	f016 0f08 	tst.w	r6, #8
 800eeb4:	d136      	bne.n	800ef24 <printk+0x4d0>
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
 800eeb6:	f016 0f01 	tst.w	r6, #1
 800eeba:	d141      	bne.n	800ef40 <printk+0x4ec>
					printk_pad_space(vlen, field_width, &count, info);
 800eebc:	9b01      	ldr	r3, [sp, #4]
 800eebe:	aa0c      	add	r2, sp, #48	; 0x30
 800eec0:	4629      	mov	r1, r5
 800eec2:	4650      	mov	r0, sl
 800eec4:	f7ff fcc6 	bl	800e854 <printk_pad_space>
 800eec8:	e03a      	b.n	800ef40 <printk+0x4ec>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800eeca:	f109 0704 	add.w	r7, r9, #4
 800eece:	f8d9 3000 	ldr.w	r3, [r9]
 800eed2:	a916      	add	r1, sp, #88	; 0x58
 800eed4:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
 800eed8:	2302      	movs	r3, #2
 800eeda:	2200      	movs	r2, #0
 800eedc:	a80d      	add	r0, sp, #52	; 0x34
 800eede:	f7ff fc76 	bl	800e7ce <printk_mknumstr>
 800eee2:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, unsigned int);
 800eee4:	46b9      	mov	r9, r7
			goto cont_u;
 800eee6:	e7e0      	b.n	800eeaa <printk+0x456>
			uval = (unsigned int) va_arg(ap, void *);
 800eee8:	f109 0704 	add.w	r7, r9, #4
 800eeec:	f8d9 3000 	ldr.w	r3, [r9]
 800eef0:	a916      	add	r1, sp, #88	; 0x58
 800eef2:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
 800eef6:	2310      	movs	r3, #16
 800eef8:	2200      	movs	r2, #0
 800eefa:	a80d      	add	r0, sp, #52	; 0x34
 800eefc:	f7ff fc67 	bl	800e7ce <printk_mknumstr>
 800ef00:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, void *);
 800ef02:	46b9      	mov	r9, r7
			goto cont_u;
 800ef04:	e7d1      	b.n	800eeaa <printk+0x456>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ef06:	f109 0704 	add.w	r7, r9, #4
 800ef0a:	f8d9 3000 	ldr.w	r3, [r9]
 800ef0e:	a916      	add	r1, sp, #88	; 0x58
 800ef10:	f841 3d3c 	str.w	r3, [r1, #-60]!
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
 800ef14:	230a      	movs	r3, #10
 800ef16:	2200      	movs	r2, #0
 800ef18:	a80d      	add	r0, sp, #52	; 0x34
 800ef1a:	f7ff fc58 	bl	800e7ce <printk_mknumstr>
 800ef1e:	4682      	mov	sl, r0
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ef20:	46b9      	mov	r9, r7
 800ef22:	e7c2      	b.n	800eeaa <printk+0x456>
				printk_pad_zero(vlen, field_width, &count, info);
 800ef24:	9b01      	ldr	r3, [sp, #4]
 800ef26:	aa0c      	add	r2, sp, #48	; 0x30
 800ef28:	4629      	mov	r1, r5
 800ef2a:	4650      	mov	r0, sl
 800ef2c:	f7ff fc83 	bl	800e836 <printk_pad_zero>
				vlen = field_width;
 800ef30:	46aa      	mov	sl, r5
 800ef32:	e005      	b.n	800ef40 <printk+0x4ec>
				}
			}

			cont_xd: while (*vstrp)
				printk_putc(*vstrp--, &count, info);
 800ef34:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef38:	9a01      	ldr	r2, [sp, #4]
 800ef3a:	a90c      	add	r1, sp, #48	; 0x30
 800ef3c:	f7ff fc32 	bl	800e7a4 <printk_putc>
			cont_xd: while (*vstrp)
 800ef40:	f898 0000 	ldrb.w	r0, [r8]
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d1f5      	bne.n	800ef34 <printk+0x4e0>

			if (IS_FLAG_MINUS(flags_used)) {
 800ef48:	f016 0f01 	tst.w	r6, #1
 800ef4c:	f43f ada1 	beq.w	800ea92 <printk+0x3e>
				printk_pad_space(vlen, field_width, &count, info);
 800ef50:	9b01      	ldr	r3, [sp, #4]
 800ef52:	aa0c      	add	r2, sp, #48	; 0x30
 800ef54:	4629      	mov	r1, r5
 800ef56:	4650      	mov	r0, sl
 800ef58:	f7ff fc7c 	bl	800e854 <printk_pad_space>
 800ef5c:	e599      	b.n	800ea92 <printk+0x3e>
			uval = (unsigned int) va_arg(ap, unsigned int);
 800ef5e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ef62:	e7ed      	b.n	800ef40 <printk+0x4ec>
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg(ap, unsigned int);
 800ef64:	f109 0504 	add.w	r5, r9, #4
			printk_putc(cval, &count, info);
 800ef68:	9a01      	ldr	r2, [sp, #4]
 800ef6a:	a90c      	add	r1, sp, #48	; 0x30
 800ef6c:	f899 0000 	ldrb.w	r0, [r9]
 800ef70:	f7ff fc18 	bl	800e7a4 <printk_putc>
			cval = (char) va_arg(ap, unsigned int);
 800ef74:	46a9      	mov	r9, r5
			break;
 800ef76:	e58c      	b.n	800ea92 <printk+0x3e>
		case 's':
			sval = (char *) va_arg(ap, char *);
 800ef78:	f109 0a04 	add.w	sl, r9, #4
 800ef7c:	f8d9 7000 	ldr.w	r7, [r9]
			if (sval) {
 800ef80:	2f00      	cmp	r7, #0
 800ef82:	d03b      	beq.n	800effc <printk+0x5a8>
				vlen = strlen(sval);
 800ef84:	4638      	mov	r0, r7
 800ef86:	f7fe fcf7 	bl	800d978 <strlen>
 800ef8a:	4681      	mov	r9, r0
				if (!IS_FLAG_MINUS(flags_used)) {
 800ef8c:	f016 0601 	ands.w	r6, r6, #1
 800ef90:	d00f      	beq.n	800efb2 <printk+0x55e>
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
 800ef92:	f1b8 0f00 	cmp.w	r8, #0
 800ef96:	d017      	beq.n	800efc8 <printk+0x574>
				{
					while (*sval)
 800ef98:	7838      	ldrb	r0, [r7, #0]
 800ef9a:	b1c0      	cbz	r0, 800efce <printk+0x57a>
					{
						if(precision_width>=1)
 800ef9c:	f1b8 0f00 	cmp.w	r8, #0
 800efa0:	ddfa      	ble.n	800ef98 <printk+0x544>
						{
							precision_width--;
 800efa2:	f108 38ff 	add.w	r8, r8, #4294967295
							printk_putc(*sval++, &count, info);
 800efa6:	3701      	adds	r7, #1
 800efa8:	9a01      	ldr	r2, [sp, #4]
 800efaa:	a90c      	add	r1, sp, #48	; 0x30
 800efac:	f7ff fbfa 	bl	800e7a4 <printk_putc>
 800efb0:	e7f2      	b.n	800ef98 <printk+0x544>
					printk_pad_space(vlen, field_width, &count, info);
 800efb2:	9b01      	ldr	r3, [sp, #4]
 800efb4:	aa0c      	add	r2, sp, #48	; 0x30
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7ff fc4c 	bl	800e854 <printk_pad_space>
 800efbc:	e7e9      	b.n	800ef92 <printk+0x53e>
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
					   printk_putc(*sval++, &count, info);
 800efbe:	3701      	adds	r7, #1
 800efc0:	9a01      	ldr	r2, [sp, #4]
 800efc2:	a90c      	add	r1, sp, #48	; 0x30
 800efc4:	f7ff fbee 	bl	800e7a4 <printk_putc>
					while (*sval)
 800efc8:	7838      	ldrb	r0, [r7, #0]
 800efca:	2800      	cmp	r0, #0
 800efcc:	d1f7      	bne.n	800efbe <printk+0x56a>
				}
				if (IS_FLAG_MINUS(flags_used)) {
 800efce:	b90e      	cbnz	r6, 800efd4 <printk+0x580>
			sval = (char *) va_arg(ap, char *);
 800efd0:	46d1      	mov	r9, sl
 800efd2:	e55e      	b.n	800ea92 <printk+0x3e>
					printk_pad_space(vlen, field_width, &count, info);
 800efd4:	9b01      	ldr	r3, [sp, #4]
 800efd6:	aa0c      	add	r2, sp, #48	; 0x30
 800efd8:	4629      	mov	r1, r5
 800efda:	4648      	mov	r0, r9
 800efdc:	f7ff fc3a 	bl	800e854 <printk_pad_space>
			sval = (char *) va_arg(ap, char *);
 800efe0:	46d1      	mov	r9, sl
 800efe2:	e556      	b.n	800ea92 <printk+0x3e>
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg(ap, int *);
 800efe4:	f8d9 3000 	ldr.w	r3, [r9]
			*ivalp = count;
 800efe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efea:	601a      	str	r2, [r3, #0]
			ivalp = (int *) va_arg(ap, int *);
 800efec:	f109 0904 	add.w	r9, r9, #4
			break;
 800eff0:	e54f      	b.n	800ea92 <printk+0x3e>

		default:
			printk_putc(c, &count, info);
 800eff2:	9a01      	ldr	r2, [sp, #4]
 800eff4:	a90c      	add	r1, sp, #48	; 0x30
 800eff6:	f7ff fbd5 	bl	800e7a4 <printk_putc>
			break;
 800effa:	e54a      	b.n	800ea92 <printk+0x3e>
			sval = (char *) va_arg(ap, char *);
 800effc:	46d1      	mov	r9, sl
 800effe:	e548      	b.n	800ea92 <printk+0x3e>
		}
	}
	return count;
}
 800f000:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f002:	b017      	add	sp, #92	; 0x5c
 800f004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f008 <myprintf>:
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
 800f008:	b40f      	push	{r0, r1, r2, r3}
 800f00a:	b500      	push	{lr}
 800f00c:	b085      	sub	sp, #20
	char * ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
 800f00e:	2301      	movs	r3, #1
 800f010:	9301      	str	r3, [sp, #4]
	info.func = &out_char;     //调用的串口输出函数
 800f012:	4b06      	ldr	r3, [pc, #24]	; (800f02c <myprintf+0x24>)
 800f014:	9302      	str	r3, [sp, #8]
	va_start(ap, fmt);  //对ap 进行初始化，让它指向可变参数表里面的第一个参数
	rvalue = printk(&info, fmt, ap);
 800f016:	aa06      	add	r2, sp, #24
 800f018:	f852 1b04 	ldr.w	r1, [r2], #4
 800f01c:	a801      	add	r0, sp, #4
 800f01e:	f7ff fd19 	bl	800ea54 <printk>

	va_end(ap);

	return rvalue;
}
 800f022:	b005      	add	sp, #20
 800f024:	f85d eb04 	ldr.w	lr, [sp], #4
 800f028:	b004      	add	sp, #16
 800f02a:	4770      	bx	lr
 800f02c:	0800e873 	.word	0x0800e873

0800f030 <userprintf>:


int userprintf(const char *fmt, ...)
{
 800f030:	b40f      	push	{r0, r1, r2, r3}
 800f032:	b500      	push	{lr}
 800f034:	b085      	sub	sp, #20
	char * ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
 800f036:	2301      	movs	r3, #1
 800f038:	9301      	str	r3, [sp, #4]
	info.func = &out_char2;     //调用的串口输出函数
 800f03a:	4b06      	ldr	r3, [pc, #24]	; (800f054 <userprintf+0x24>)
 800f03c:	9302      	str	r3, [sp, #8]
	va_start(ap, fmt);  //对ap 进行初始化，让它指向可变参数表里面的第一个参数
	rvalue = printk(&info, fmt, ap);
 800f03e:	aa06      	add	r2, sp, #24
 800f040:	f852 1b04 	ldr.w	r1, [r2], #4
 800f044:	a801      	add	r0, sp, #4
 800f046:	f7ff fd05 	bl	800ea54 <printk>

	va_end(ap);

	return rvalue;
}
 800f04a:	b005      	add	sp, #20
 800f04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f050:	b004      	add	sp, #16
 800f052:	4770      	bx	lr
 800f054:	0800e87f 	.word	0x0800e87f

0800f058 <rt_thread_exit>:
}

#endif

void rt_thread_exit(void)
{
 800f058:	b538      	push	{r3, r4, r5, lr}
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_current_thread;
 800f05a:	4b14      	ldr	r3, [pc, #80]	; (800f0ac <rt_thread_exit+0x54>)
 800f05c:	681c      	ldr	r4, [r3, #0]

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f05e:	f7fe fbef 	bl	800d840 <rt_hw_interrupt_disable>
 800f062:	4605      	mov	r5, r0

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
 800f064:	4620      	mov	r0, r4
 800f066:	f002 febd 	bl	8011de4 <rt_schedule_remove_thread>
    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
 800f06a:	2304      	movs	r3, #4
 800f06c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
 800f070:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f074:	f000 fbb7 	bl	800f7e6 <rt_timer_detach>

    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f078:	4620      	mov	r0, r4
 800f07a:	f000 fe70 	bl	800fd5e <rt_object_is_systemobject>
 800f07e:	2801      	cmp	r0, #1
 800f080:	d00d      	beq.n	800f09e <rt_thread_exit+0x46>
        rt_object_detach((rt_object_t)thread);
    }
    else
    {
        /* insert to defunct thread list */
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 800f082:	f104 0214 	add.w	r2, r4, #20
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
    l->next->prev = n;
 800f086:	4b0a      	ldr	r3, [pc, #40]	; (800f0b0 <rt_thread_exit+0x58>)
 800f088:	6819      	ldr	r1, [r3, #0]
 800f08a:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f08c:	6161      	str	r1, [r4, #20]

    l->next = n;
 800f08e:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f090:	61a3      	str	r3, [r4, #24]
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f092:	4628      	mov	r0, r5
 800f094:	f7fe fbd8 	bl	800d848 <rt_hw_interrupt_enable>

    /* switch to next task */
    rt_schedule();
 800f098:	f002 fe42 	bl	8011d20 <rt_schedule>
}
 800f09c:	bd38      	pop	{r3, r4, r5, pc}
        thread->cleanup == RT_NULL)
 800f09e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1ee      	bne.n	800f082 <rt_thread_exit+0x2a>
        rt_object_detach((rt_object_t)thread);
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f000 fe09 	bl	800fcbc <rt_object_detach>
 800f0aa:	e7f2      	b.n	800f092 <rt_thread_exit+0x3a>
 800f0ac:	20007c70 	.word	0x20007c70
 800f0b0:	20007c78 	.word	0x20007c78

0800f0b4 <_rt_thread_init>:
                                void             *parameter,
                                void             *stack_start,
                                rt_uint32_t       stack_size,
                                rt_uint8_t        priority,
                                rt_uint32_t       tick)
{
 800f0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	9808      	ldr	r0, [sp, #32]
 800f0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0be:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 800f0c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    /* init thread list */
    rt_list_init(&(thread->tlist));
 800f0c4:	f104 0714 	add.w	r7, r4, #20
    l->next = l->prev = l;
 800f0c8:	61a7      	str	r7, [r4, #24]
 800f0ca:	6167      	str	r7, [r4, #20]

    thread->entry = (void *)entry;
 800f0cc:	6222      	str	r2, [r4, #32]
    thread->parameter = parameter;
 800f0ce:	6263      	str	r3, [r4, #36]	; 0x24

    /* stack init */
    thread->stack_addr = stack_start;
 800f0d0:	62a0      	str	r0, [r4, #40]	; 0x28
    thread->stack_size = stack_size;
 800f0d2:	62e1      	str	r1, [r4, #44]	; 0x2c

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
 800f0d4:	460a      	mov	r2, r1
 800f0d6:	2123      	movs	r1, #35	; 0x23
 800f0d8:	f002 f85e 	bl	8011198 <rt_memset>
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)rt_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr + thread->stack_size - 4),
 800f0dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f0de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f0e0:	1f1a      	subs	r2, r3, #4
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 800f0e2:	4b10      	ldr	r3, [pc, #64]	; (800f124 <_rt_thread_init+0x70>)
 800f0e4:	440a      	add	r2, r1
 800f0e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f0e8:	6a20      	ldr	r0, [r4, #32]
 800f0ea:	f7ff faa9 	bl	800e640 <rt_hw_stack_init>
 800f0ee:	61e0      	str	r0, [r4, #28]
                                          (void *)rt_thread_exit);
#endif

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    thread->init_priority    = priority;
 800f0f0:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    thread->current_priority = priority;
 800f0f4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35

    thread->number_mask = 0;
 800f0f8:	2500      	movs	r5, #0
 800f0fa:	63a5      	str	r5, [r4, #56]	; 0x38
    thread->number = 0;
    thread->high_mask = 0;
#endif

    /* tick init */
    thread->init_tick      = tick;
 800f0fc:	6466      	str	r6, [r4, #68]	; 0x44
    thread->remaining_tick = tick;
 800f0fe:	64a6      	str	r6, [r4, #72]	; 0x48

    /* error and flags */
    thread->error = RT_EOK;
 800f100:	6325      	str	r5, [r4, #48]	; 0x30
    thread->stat  = RT_THREAD_INIT;
 800f102:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
 800f106:	67a5      	str	r5, [r4, #120]	; 0x78
    thread->user_data = 0;
 800f108:	67e5      	str	r5, [r4, #124]	; 0x7c

    /* init thread timer */
    rt_timer_init(&(thread->thread_timer),
 800f10a:	9501      	str	r5, [sp, #4]
 800f10c:	9500      	str	r5, [sp, #0]
 800f10e:	4623      	mov	r3, r4
 800f110:	4a05      	ldr	r2, [pc, #20]	; (800f128 <_rt_thread_init+0x74>)
 800f112:	4621      	mov	r1, r4
 800f114:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f118:	f000 fb51 	bl	800f7be <rt_timer_init>
#endif

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));

    return RT_EOK;
}
 800f11c:	4628      	mov	r0, r5
 800f11e:	b003      	add	sp, #12
 800f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f122:	bf00      	nop
 800f124:	0800f059 	.word	0x0800f059
 800f128:	0800f12d 	.word	0x0800f12d

0800f12c <rt_thread_timeout>:
 * when thread is timeout to wait some resource.
 *
 * @param parameter the parameter of thread timeout function
 */
void rt_thread_timeout(void *parameter)
{
 800f12c:	b510      	push	{r4, lr}
    RT_ASSERT(thread != RT_NULL);
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);

    /* set error number */
    thread->error = -RT_ETIMEOUT;
 800f12e:	f06f 0201 	mvn.w	r2, #1
 800f132:	6302      	str	r2, [r0, #48]	; 0x30

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
 800f134:	f100 0214 	add.w	r2, r0, #20
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
    n->next->prev = n->prev;
 800f138:	6941      	ldr	r1, [r0, #20]
 800f13a:	6984      	ldr	r4, [r0, #24]
 800f13c:	604c      	str	r4, [r1, #4]
    n->prev->next = n->next;
 800f13e:	6981      	ldr	r1, [r0, #24]
 800f140:	6944      	ldr	r4, [r0, #20]
 800f142:	600c      	str	r4, [r1, #0]

    n->next = n->prev = n;
 800f144:	6182      	str	r2, [r0, #24]
 800f146:	6142      	str	r2, [r0, #20]

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
 800f148:	f002 fe26 	bl	8011d98 <rt_schedule_insert_thread>

    /* do schedule */
    rt_schedule();
 800f14c:	f002 fde8 	bl	8011d20 <rt_schedule>
}
 800f150:	bd10      	pop	{r4, pc}

0800f152 <rt_thread_init>:
{
 800f152:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f154:	b085      	sub	sp, #20
 800f156:	4605      	mov	r5, r0
 800f158:	460c      	mov	r4, r1
 800f15a:	4616      	mov	r6, r2
 800f15c:	461f      	mov	r7, r3
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
 800f15e:	460a      	mov	r2, r1
 800f160:	2101      	movs	r1, #1
 800f162:	f000 fd89 	bl	800fc78 <rt_object_init>
    return _rt_thread_init(thread,
 800f166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f168:	9303      	str	r3, [sp, #12]
 800f16a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f16e:	9302      	str	r3, [sp, #8]
 800f170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f172:	9301      	str	r3, [sp, #4]
 800f174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	463b      	mov	r3, r7
 800f17a:	4632      	mov	r2, r6
 800f17c:	4621      	mov	r1, r4
 800f17e:	4628      	mov	r0, r5
 800f180:	f7ff ff98 	bl	800f0b4 <_rt_thread_init>
}
 800f184:	b005      	add	sp, #20
 800f186:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f188 <rt_thread_self>:
}
 800f188:	4b01      	ldr	r3, [pc, #4]	; (800f190 <rt_thread_self+0x8>)
 800f18a:	6818      	ldr	r0, [r3, #0]
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20007c70 	.word	0x20007c70

0800f194 <rt_thread_detach>:
{
 800f194:	b510      	push	{r4, lr}
 800f196:	4604      	mov	r4, r0
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 800f198:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f19c:	f013 0f0f 	tst.w	r3, #15
 800f1a0:	d11b      	bne.n	800f1da <rt_thread_detach+0x46>
    rt_timer_detach(&(thread->thread_timer));
 800f1a2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f1a6:	f000 fb1e 	bl	800f7e6 <rt_timer_detach>
    thread->stat = RT_THREAD_CLOSE;
 800f1aa:	2304      	movs	r3, #4
 800f1ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 fdd4 	bl	800fd5e <rt_object_is_systemobject>
 800f1b6:	2801      	cmp	r0, #1
 800f1b8:	d101      	bne.n	800f1be <rt_thread_detach+0x2a>
        thread->cleanup == RT_NULL)
 800f1ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 800f1bc:	b183      	cbz	r3, 800f1e0 <rt_thread_detach+0x4c>
        lock = rt_hw_interrupt_disable();
 800f1be:	f7fe fb3f 	bl	800d840 <rt_hw_interrupt_disable>
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 800f1c2:	f104 0214 	add.w	r2, r4, #20
    l->next->prev = n;
 800f1c6:	4b08      	ldr	r3, [pc, #32]	; (800f1e8 <rt_thread_detach+0x54>)
 800f1c8:	6819      	ldr	r1, [r3, #0]
 800f1ca:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f1cc:	6161      	str	r1, [r4, #20]
    l->next = n;
 800f1ce:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f1d0:	61a3      	str	r3, [r4, #24]
        rt_hw_interrupt_enable(lock);
 800f1d2:	f7fe fb39 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	bd10      	pop	{r4, pc}
        rt_schedule_remove_thread(thread);
 800f1da:	f002 fe03 	bl	8011de4 <rt_schedule_remove_thread>
 800f1de:	e7e0      	b.n	800f1a2 <rt_thread_detach+0xe>
        rt_object_detach((rt_object_t)thread);
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f000 fd6b 	bl	800fcbc <rt_object_detach>
 800f1e6:	e7f6      	b.n	800f1d6 <rt_thread_detach+0x42>
 800f1e8:	20007c78 	.word	0x20007c78

0800f1ec <rt_thread_create>:
{
 800f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f0:	b084      	sub	sp, #16
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	4690      	mov	r8, r2
 800f1f8:	461e      	mov	r6, r3
    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	f000 fd70 	bl	800fce2 <rt_object_allocate>
    if (thread == RT_NULL)
 800f202:	b1d0      	cbz	r0, 800f23a <rt_thread_create+0x4e>
 800f204:	4604      	mov	r4, r0
    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
 800f206:	4630      	mov	r0, r6
 800f208:	f003 fc22 	bl	8012a50 <rt_malloc>
    if (stack_start == RT_NULL)
 800f20c:	b180      	cbz	r0, 800f230 <rt_thread_create+0x44>
    _rt_thread_init(thread,
 800f20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f210:	9203      	str	r2, [sp, #12]
 800f212:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800f216:	9202      	str	r2, [sp, #8]
 800f218:	9601      	str	r6, [sp, #4]
 800f21a:	9000      	str	r0, [sp, #0]
 800f21c:	4643      	mov	r3, r8
 800f21e:	463a      	mov	r2, r7
 800f220:	4629      	mov	r1, r5
 800f222:	4620      	mov	r0, r4
 800f224:	f7ff ff46 	bl	800f0b4 <_rt_thread_init>
}
 800f228:	4620      	mov	r0, r4
 800f22a:	b004      	add	sp, #16
 800f22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rt_object_delete((rt_object_t)thread);
 800f230:	4620      	mov	r0, r4
 800f232:	f000 fd7e 	bl	800fd32 <rt_object_delete>
        return RT_NULL;
 800f236:	2400      	movs	r4, #0
 800f238:	e7f6      	b.n	800f228 <rt_thread_create+0x3c>
        return RT_NULL;
 800f23a:	2400      	movs	r4, #0
 800f23c:	e7f4      	b.n	800f228 <rt_thread_create+0x3c>
	...

0800f240 <rt_thread_delete>:
{
 800f240:	b510      	push	{r4, lr}
 800f242:	4604      	mov	r4, r0
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 800f244:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f248:	f013 0f0f 	tst.w	r3, #15
 800f24c:	d114      	bne.n	800f278 <rt_thread_delete+0x38>
    rt_timer_detach(&(thread->thread_timer));
 800f24e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f252:	f000 fac8 	bl	800f7e6 <rt_timer_detach>
    thread->stat = RT_THREAD_CLOSE;
 800f256:	2304      	movs	r3, #4
 800f258:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    lock = rt_hw_interrupt_disable();
 800f25c:	f7fe faf0 	bl	800d840 <rt_hw_interrupt_disable>
    rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 800f260:	f104 0214 	add.w	r2, r4, #20
    l->next->prev = n;
 800f264:	4b06      	ldr	r3, [pc, #24]	; (800f280 <rt_thread_delete+0x40>)
 800f266:	6819      	ldr	r1, [r3, #0]
 800f268:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f26a:	6161      	str	r1, [r4, #20]
    l->next = n;
 800f26c:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f26e:	61a3      	str	r3, [r4, #24]
    rt_hw_interrupt_enable(lock);
 800f270:	f7fe faea 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f274:	2000      	movs	r0, #0
 800f276:	bd10      	pop	{r4, pc}
        rt_schedule_remove_thread(thread);
 800f278:	f002 fdb4 	bl	8011de4 <rt_schedule_remove_thread>
 800f27c:	e7e7      	b.n	800f24e <rt_thread_delete+0xe>
 800f27e:	bf00      	nop
 800f280:	20007c78 	.word	0x20007c78

0800f284 <rt_thread_yield>:
{
 800f284:	b510      	push	{r4, lr}
    level = rt_hw_interrupt_disable();
 800f286:	f7fe fadb 	bl	800d840 <rt_hw_interrupt_disable>
    thread = rt_current_thread;
 800f28a:	4b14      	ldr	r3, [pc, #80]	; (800f2dc <rt_thread_yield+0x58>)
 800f28c:	681b      	ldr	r3, [r3, #0]
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
 800f28e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f292:	f002 020f 	and.w	r2, r2, #15
 800f296:	2a01      	cmp	r2, #1
 800f298:	d103      	bne.n	800f2a2 <rt_thread_yield+0x1e>
        thread->tlist.next != thread->tlist.prev)
 800f29a:	695a      	ldr	r2, [r3, #20]
 800f29c:	6999      	ldr	r1, [r3, #24]
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
 800f29e:	428a      	cmp	r2, r1
 800f2a0:	d103      	bne.n	800f2aa <rt_thread_yield+0x26>
    rt_hw_interrupt_enable(level);
 800f2a2:	f7fe fad1 	bl	800d848 <rt_hw_interrupt_enable>
}
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	bd10      	pop	{r4, pc}
        rt_list_remove(&(thread->tlist));
 800f2aa:	f103 0414 	add.w	r4, r3, #20
    n->next->prev = n->prev;
 800f2ae:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800f2b0:	699a      	ldr	r2, [r3, #24]
 800f2b2:	6959      	ldr	r1, [r3, #20]
 800f2b4:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800f2b6:	619c      	str	r4, [r3, #24]
 800f2b8:	615c      	str	r4, [r3, #20]
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 800f2ba:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800f2be:	4a08      	ldr	r2, [pc, #32]	; (800f2e0 <rt_thread_yield+0x5c>)
 800f2c0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    l->prev->next = n;
 800f2c4:	6851      	ldr	r1, [r2, #4]
 800f2c6:	600c      	str	r4, [r1, #0]
    n->prev = l->prev;
 800f2c8:	6851      	ldr	r1, [r2, #4]
 800f2ca:	6199      	str	r1, [r3, #24]
    l->prev = n;
 800f2cc:	6054      	str	r4, [r2, #4]
    n->next = l;
 800f2ce:	615a      	str	r2, [r3, #20]
        rt_hw_interrupt_enable(level);
 800f2d0:	f7fe faba 	bl	800d848 <rt_hw_interrupt_enable>
        rt_schedule();
 800f2d4:	f002 fd24 	bl	8011d20 <rt_schedule>
        return RT_EOK;
 800f2d8:	e7e5      	b.n	800f2a6 <rt_thread_yield+0x22>
 800f2da:	bf00      	nop
 800f2dc:	20007c70 	.word	0x20007c70
 800f2e0:	20007b6c 	.word	0x20007b6c

0800f2e4 <rt_thread_suspend>:
{
 800f2e4:	b538      	push	{r3, r4, r5, lr}
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
 800f2e6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f2ea:	f003 030f 	and.w	r3, r3, #15
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d117      	bne.n	800f322 <rt_thread_suspend+0x3e>
 800f2f2:	4604      	mov	r4, r0
    temp = rt_hw_interrupt_disable();
 800f2f4:	f7fe faa4 	bl	800d840 <rt_hw_interrupt_disable>
 800f2f8:	4605      	mov	r5, r0
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 800f2fa:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 800f2fe:	f023 030f 	bic.w	r3, r3, #15
 800f302:	f043 0302 	orr.w	r3, r3, #2
 800f306:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    rt_schedule_remove_thread(thread);
 800f30a:	4620      	mov	r0, r4
 800f30c:	f002 fd6a 	bl	8011de4 <rt_schedule_remove_thread>
    rt_timer_stop(&(thread->thread_timer));
 800f310:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f314:	f000 fae4 	bl	800f8e0 <rt_timer_stop>
    rt_hw_interrupt_enable(temp);
 800f318:	4628      	mov	r0, r5
 800f31a:	f7fe fa95 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 800f31e:	2000      	movs	r0, #0
}
 800f320:	bd38      	pop	{r3, r4, r5, pc}
        return -RT_ERROR;
 800f322:	f04f 30ff 	mov.w	r0, #4294967295
 800f326:	e7fb      	b.n	800f320 <rt_thread_suspend+0x3c>

0800f328 <rt_thread_sleep>:
{
 800f328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f32a:	b083      	sub	sp, #12
 800f32c:	ad02      	add	r5, sp, #8
 800f32e:	f845 0d04 	str.w	r0, [r5, #-4]!
    temp = rt_hw_interrupt_disable();
 800f332:	f7fe fa85 	bl	800d840 <rt_hw_interrupt_disable>
 800f336:	4607      	mov	r7, r0
    thread = rt_current_thread;
 800f338:	4b0e      	ldr	r3, [pc, #56]	; (800f374 <rt_thread_sleep+0x4c>)
 800f33a:	681c      	ldr	r4, [r3, #0]
    rt_thread_suspend(thread);
 800f33c:	4620      	mov	r0, r4
 800f33e:	f7ff ffd1 	bl	800f2e4 <rt_thread_suspend>
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
 800f342:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800f346:	462a      	mov	r2, r5
 800f348:	2100      	movs	r1, #0
 800f34a:	4630      	mov	r0, r6
 800f34c:	f000 faec 	bl	800f928 <rt_timer_control>
    rt_timer_start(&(thread->thread_timer));
 800f350:	4630      	mov	r0, r6
 800f352:	f000 fa65 	bl	800f820 <rt_timer_start>
    rt_hw_interrupt_enable(temp);
 800f356:	4638      	mov	r0, r7
 800f358:	f7fe fa76 	bl	800d848 <rt_hw_interrupt_enable>
    rt_schedule();
 800f35c:	f002 fce0 	bl	8011d20 <rt_schedule>
    if (thread->error == -RT_ETIMEOUT)
 800f360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f362:	f113 0f02 	cmn.w	r3, #2
 800f366:	d002      	beq.n	800f36e <rt_thread_sleep+0x46>
}
 800f368:	2000      	movs	r0, #0
 800f36a:	b003      	add	sp, #12
 800f36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        thread->error = RT_EOK;
 800f36e:	2300      	movs	r3, #0
 800f370:	6323      	str	r3, [r4, #48]	; 0x30
 800f372:	e7f9      	b.n	800f368 <rt_thread_sleep+0x40>
 800f374:	20007c70 	.word	0x20007c70

0800f378 <rt_thread_delay>:
{
 800f378:	b508      	push	{r3, lr}
    return rt_thread_sleep(tick);
 800f37a:	f7ff ffd5 	bl	800f328 <rt_thread_sleep>
}
 800f37e:	bd08      	pop	{r3, pc}

0800f380 <rt_thread_resume>:
{
 800f380:	b538      	push	{r3, r4, r5, lr}
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
 800f382:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800f386:	f003 030f 	and.w	r3, r3, #15
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	d119      	bne.n	800f3c2 <rt_thread_resume+0x42>
 800f38e:	4604      	mov	r4, r0
    temp = rt_hw_interrupt_disable();
 800f390:	f7fe fa56 	bl	800d840 <rt_hw_interrupt_disable>
 800f394:	4605      	mov	r5, r0
    rt_list_remove(&(thread->tlist));
 800f396:	f104 0314 	add.w	r3, r4, #20
    n->next->prev = n->prev;
 800f39a:	6962      	ldr	r2, [r4, #20]
 800f39c:	69a1      	ldr	r1, [r4, #24]
 800f39e:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800f3a0:	69a2      	ldr	r2, [r4, #24]
 800f3a2:	6961      	ldr	r1, [r4, #20]
 800f3a4:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800f3a6:	61a3      	str	r3, [r4, #24]
 800f3a8:	6163      	str	r3, [r4, #20]
    rt_timer_stop(&thread->thread_timer);
 800f3aa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f3ae:	f000 fa97 	bl	800f8e0 <rt_timer_stop>
    rt_hw_interrupt_enable(temp);
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7fe fa48 	bl	800d848 <rt_hw_interrupt_enable>
    rt_schedule_insert_thread(thread);
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f002 fced 	bl	8011d98 <rt_schedule_insert_thread>
    return RT_EOK;
 800f3be:	2000      	movs	r0, #0
}
 800f3c0:	bd38      	pop	{r3, r4, r5, pc}
        return -RT_ERROR;
 800f3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c6:	e7fb      	b.n	800f3c0 <rt_thread_resume+0x40>

0800f3c8 <rt_thread_startup>:
{
 800f3c8:	b508      	push	{r3, lr}
    thread->current_priority = thread->init_priority;
 800f3ca:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
 800f3ce:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
    thread->number_mask = 1L << thread->current_priority;
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	408a      	lsls	r2, r1
 800f3d6:	6382      	str	r2, [r0, #56]	; 0x38
    thread->stat = RT_THREAD_SUSPEND;
 800f3d8:	2202      	movs	r2, #2
 800f3da:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    rt_thread_resume(thread);
 800f3de:	f7ff ffcf 	bl	800f380 <rt_thread_resume>
    if (rt_thread_self() != RT_NULL)
 800f3e2:	f7ff fed1 	bl	800f188 <rt_thread_self>
 800f3e6:	b108      	cbz	r0, 800f3ec <rt_thread_startup+0x24>
        rt_schedule();
 800f3e8:	f002 fc9a 	bl	8011d20 <rt_schedule>
}
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	bd08      	pop	{r3, pc}

0800f3f0 <rt_thread_control>:
{
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	4604      	mov	r4, r0
    switch (cmd)
 800f3f4:	2901      	cmp	r1, #1
 800f3f6:	d029      	beq.n	800f44c <rt_thread_control+0x5c>
 800f3f8:	4615      	mov	r5, r2
 800f3fa:	2902      	cmp	r1, #2
 800f3fc:	d002      	beq.n	800f404 <rt_thread_control+0x14>
 800f3fe:	b311      	cbz	r1, 800f446 <rt_thread_control+0x56>
    return RT_EOK;
 800f400:	2000      	movs	r0, #0
 800f402:	e012      	b.n	800f42a <rt_thread_control+0x3a>
        temp = rt_hw_interrupt_disable();
 800f404:	f7fe fa1c 	bl	800d840 <rt_hw_interrupt_disable>
 800f408:	4606      	mov	r6, r0
        if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
 800f40a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800f40e:	f003 030f 	and.w	r3, r3, #15
 800f412:	2b01      	cmp	r3, #1
 800f414:	d00a      	beq.n	800f42c <rt_thread_control+0x3c>
            thread->current_priority = *(rt_uint8_t *)arg;
 800f416:	782a      	ldrb	r2, [r5, #0]
 800f418:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
            thread->number_mask = 1 << thread->current_priority;
 800f41c:	2301      	movs	r3, #1
 800f41e:	4093      	lsls	r3, r2
 800f420:	63a3      	str	r3, [r4, #56]	; 0x38
        rt_hw_interrupt_enable(temp);
 800f422:	4630      	mov	r0, r6
 800f424:	f7fe fa10 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 800f428:	2000      	movs	r0, #0
}
 800f42a:	bd70      	pop	{r4, r5, r6, pc}
            rt_schedule_remove_thread(thread);
 800f42c:	4620      	mov	r0, r4
 800f42e:	f002 fcd9 	bl	8011de4 <rt_schedule_remove_thread>
            thread->current_priority = *(rt_uint8_t *)arg;
 800f432:	782a      	ldrb	r2, [r5, #0]
 800f434:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
            thread->number_mask = 1 << thread->current_priority;
 800f438:	2301      	movs	r3, #1
 800f43a:	4093      	lsls	r3, r2
 800f43c:	63a3      	str	r3, [r4, #56]	; 0x38
            rt_schedule_insert_thread(thread);
 800f43e:	4620      	mov	r0, r4
 800f440:	f002 fcaa 	bl	8011d98 <rt_schedule_insert_thread>
 800f444:	e7ed      	b.n	800f422 <rt_thread_control+0x32>
        return rt_thread_startup(thread);
 800f446:	f7ff ffbf 	bl	800f3c8 <rt_thread_startup>
 800f44a:	e7ee      	b.n	800f42a <rt_thread_control+0x3a>
        return rt_thread_delete(thread);
 800f44c:	f7ff fef8 	bl	800f240 <rt_thread_delete>
 800f450:	e7eb      	b.n	800f42a <rt_thread_control+0x3a>
	...

0800f454 <thread_lcdshow>:
#include "includes.h"

void thread_lcdshow()
{
 800f454:	b510      	push	{r4, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	e020      	b.n	800f49c <thread_lcdshow+0x48>
        if(gpio_get(LIGHT_BLUE)==0&&gpio_get(LIGHT_GREEN)==1&&gpio_get(LIGHT_RED)==1)
        {
            LCD_ShowString(6,160,BLACK,GRAY,(char *)"小灯状态:蓝灯开");
            for(i=1;i<=r;i++)
            {
                LCD_DrawCircle(120,255,i,BLUE);
 800f45a:	231f      	movs	r3, #31
 800f45c:	b2e2      	uxtb	r2, r4
 800f45e:	21ff      	movs	r1, #255	; 0xff
 800f460:	2078      	movs	r0, #120	; 0x78
 800f462:	f001 fb88 	bl	8010b76 <LCD_DrawCircle>
            for(i=1;i<=r;i++)
 800f466:	3401      	adds	r4, #1
 800f468:	2c37      	cmp	r4, #55	; 0x37
 800f46a:	ddf6      	ble.n	800f45a <thread_lcdshow+0x6>
            }
            LCD_DrawCircle(120,255,55,BLUE);
 800f46c:	231f      	movs	r3, #31
 800f46e:	2237      	movs	r2, #55	; 0x37
 800f470:	21ff      	movs	r1, #255	; 0xff
 800f472:	2078      	movs	r0, #120	; 0x78
 800f474:	f001 fb7f 	bl	8010b76 <LCD_DrawCircle>
        }
        if(gpio_get(LIGHT_BLUE)==1&&gpio_get(LIGHT_GREEN)==0&&gpio_get(LIGHT_RED)==1)
 800f478:	f240 1009 	movw	r0, #265	; 0x109
 800f47c:	f000 fe72 	bl	8010164 <gpio_get>
 800f480:	2801      	cmp	r0, #1
 800f482:	d02c      	beq.n	800f4de <thread_lcdshow+0x8a>
            for(i=1;i<=r;i++)
            {
                LCD_DrawCircle(120,255,i,GREEN);
            }
        }
        if(gpio_get(LIGHT_BLUE)==1&&gpio_get(LIGHT_GREEN)==1&&gpio_get(LIGHT_RED)==0)
 800f484:	f240 1009 	movw	r0, #265	; 0x109
 800f488:	f000 fe6c 	bl	8010164 <gpio_get>
 800f48c:	2801      	cmp	r0, #1
 800f48e:	d048      	beq.n	800f522 <thread_lcdshow+0xce>
            for(i=1;i<=r;i++)
            {
                LCD_DrawCircle(120,255,i,RED);
            }
        }
        if(gpio_get(LIGHT_BLUE)==1&&gpio_get(LIGHT_GREEN)==1&&gpio_get(LIGHT_RED)==1)
 800f490:	f240 1009 	movw	r0, #265	; 0x109
 800f494:	f000 fe66 	bl	8010164 <gpio_get>
 800f498:	2801      	cmp	r0, #1
 800f49a:	d064      	beq.n	800f566 <thread_lcdshow+0x112>
        delay_ms(1000);
 800f49c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f4a0:	f7ff ff6a 	bl	800f378 <rt_thread_delay>
        if(gpio_get(LIGHT_BLUE)==0&&gpio_get(LIGHT_GREEN)==1&&gpio_get(LIGHT_RED)==1)
 800f4a4:	f240 1009 	movw	r0, #265	; 0x109
 800f4a8:	f000 fe5c 	bl	8010164 <gpio_get>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d1e3      	bne.n	800f478 <thread_lcdshow+0x24>
 800f4b0:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f4b4:	f000 fe56 	bl	8010164 <gpio_get>
 800f4b8:	2801      	cmp	r0, #1
 800f4ba:	d1dd      	bne.n	800f478 <thread_lcdshow+0x24>
 800f4bc:	f240 1007 	movw	r0, #263	; 0x107
 800f4c0:	f000 fe50 	bl	8010164 <gpio_get>
 800f4c4:	2801      	cmp	r0, #1
 800f4c6:	d1d7      	bne.n	800f478 <thread_lcdshow+0x24>
            LCD_ShowString(6,160,BLACK,GRAY,(char *)"小灯状态:蓝灯开");
 800f4c8:	4b37      	ldr	r3, [pc, #220]	; (800f5a8 <thread_lcdshow+0x154>)
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	f248 4330 	movw	r3, #33840	; 0x8430
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	21a0      	movs	r1, #160	; 0xa0
 800f4d4:	2006      	movs	r0, #6
 800f4d6:	f001 fc3b 	bl	8010d50 <LCD_ShowString>
            for(i=1;i<=r;i++)
 800f4da:	2401      	movs	r4, #1
 800f4dc:	e7c4      	b.n	800f468 <thread_lcdshow+0x14>
        if(gpio_get(LIGHT_BLUE)==1&&gpio_get(LIGHT_GREEN)==0&&gpio_get(LIGHT_RED)==1)
 800f4de:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f4e2:	f000 fe3f 	bl	8010164 <gpio_get>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d1cc      	bne.n	800f484 <thread_lcdshow+0x30>
 800f4ea:	f240 1007 	movw	r0, #263	; 0x107
 800f4ee:	f000 fe39 	bl	8010164 <gpio_get>
 800f4f2:	2801      	cmp	r0, #1
 800f4f4:	d1c6      	bne.n	800f484 <thread_lcdshow+0x30>
            LCD_ShowString(6,160,BLACK,GRAY,(char *)"小灯状态:绿灯开");
 800f4f6:	4b2d      	ldr	r3, [pc, #180]	; (800f5ac <thread_lcdshow+0x158>)
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	f248 4330 	movw	r3, #33840	; 0x8430
 800f4fe:	2200      	movs	r2, #0
 800f500:	21a0      	movs	r1, #160	; 0xa0
 800f502:	2006      	movs	r0, #6
 800f504:	f001 fc24 	bl	8010d50 <LCD_ShowString>
            for(i=1;i<=r;i++)
 800f508:	2401      	movs	r4, #1
 800f50a:	e007      	b.n	800f51c <thread_lcdshow+0xc8>
                LCD_DrawCircle(120,255,i,GREEN);
 800f50c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800f510:	b2e2      	uxtb	r2, r4
 800f512:	21ff      	movs	r1, #255	; 0xff
 800f514:	2078      	movs	r0, #120	; 0x78
 800f516:	f001 fb2e 	bl	8010b76 <LCD_DrawCircle>
            for(i=1;i<=r;i++)
 800f51a:	3401      	adds	r4, #1
 800f51c:	2c37      	cmp	r4, #55	; 0x37
 800f51e:	ddf5      	ble.n	800f50c <thread_lcdshow+0xb8>
 800f520:	e7b0      	b.n	800f484 <thread_lcdshow+0x30>
        if(gpio_get(LIGHT_BLUE)==1&&gpio_get(LIGHT_GREEN)==1&&gpio_get(LIGHT_RED)==0)
 800f522:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f526:	f000 fe1d 	bl	8010164 <gpio_get>
 800f52a:	2801      	cmp	r0, #1
 800f52c:	d1b0      	bne.n	800f490 <thread_lcdshow+0x3c>
 800f52e:	f240 1007 	movw	r0, #263	; 0x107
 800f532:	f000 fe17 	bl	8010164 <gpio_get>
 800f536:	2800      	cmp	r0, #0
 800f538:	d1aa      	bne.n	800f490 <thread_lcdshow+0x3c>
            LCD_ShowString(6,160,BLACK,GRAY,(char *)"小灯状态:红灯开");
 800f53a:	4b1d      	ldr	r3, [pc, #116]	; (800f5b0 <thread_lcdshow+0x15c>)
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	f248 4330 	movw	r3, #33840	; 0x8430
 800f542:	2200      	movs	r2, #0
 800f544:	21a0      	movs	r1, #160	; 0xa0
 800f546:	2006      	movs	r0, #6
 800f548:	f001 fc02 	bl	8010d50 <LCD_ShowString>
            for(i=1;i<=r;i++)
 800f54c:	2401      	movs	r4, #1
 800f54e:	e007      	b.n	800f560 <thread_lcdshow+0x10c>
                LCD_DrawCircle(120,255,i,RED);
 800f550:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800f554:	b2e2      	uxtb	r2, r4
 800f556:	21ff      	movs	r1, #255	; 0xff
 800f558:	2078      	movs	r0, #120	; 0x78
 800f55a:	f001 fb0c 	bl	8010b76 <LCD_DrawCircle>
            for(i=1;i<=r;i++)
 800f55e:	3401      	adds	r4, #1
 800f560:	2c37      	cmp	r4, #55	; 0x37
 800f562:	ddf5      	ble.n	800f550 <thread_lcdshow+0xfc>
 800f564:	e794      	b.n	800f490 <thread_lcdshow+0x3c>
        if(gpio_get(LIGHT_BLUE)==1&&gpio_get(LIGHT_GREEN)==1&&gpio_get(LIGHT_RED)==1)
 800f566:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f56a:	f000 fdfb 	bl	8010164 <gpio_get>
 800f56e:	2801      	cmp	r0, #1
 800f570:	d194      	bne.n	800f49c <thread_lcdshow+0x48>
 800f572:	f240 1007 	movw	r0, #263	; 0x107
 800f576:	f000 fdf5 	bl	8010164 <gpio_get>
 800f57a:	2801      	cmp	r0, #1
 800f57c:	d18e      	bne.n	800f49c <thread_lcdshow+0x48>
        {
            LCD_ShowString(6,160,BLACK,GRAY,(char *)"小灯状态:关      ");
 800f57e:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <thread_lcdshow+0x160>)
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	f248 4330 	movw	r3, #33840	; 0x8430
 800f586:	2200      	movs	r2, #0
 800f588:	21a0      	movs	r1, #160	; 0xa0
 800f58a:	2006      	movs	r0, #6
 800f58c:	f001 fbe0 	bl	8010d50 <LCD_ShowString>
            for(i=1;i<=r;i++)
 800f590:	2401      	movs	r4, #1
 800f592:	e006      	b.n	800f5a2 <thread_lcdshow+0x14e>
            {
                LCD_DrawCircle(120,255,i,BLACK);
 800f594:	2300      	movs	r3, #0
 800f596:	b2e2      	uxtb	r2, r4
 800f598:	21ff      	movs	r1, #255	; 0xff
 800f59a:	2078      	movs	r0, #120	; 0x78
 800f59c:	f001 faeb 	bl	8010b76 <LCD_DrawCircle>
            for(i=1;i<=r;i++)
 800f5a0:	3401      	adds	r4, #1
 800f5a2:	2c37      	cmp	r4, #55	; 0x37
 800f5a4:	ddf6      	ble.n	800f594 <thread_lcdshow+0x140>
 800f5a6:	e779      	b.n	800f49c <thread_lcdshow+0x48>
 800f5a8:	08012f90 	.word	0x08012f90
 800f5ac:	08012fa0 	.word	0x08012fa0
 800f5b0:	08012fb0 	.word	0x08012fb0
 800f5b4:	08012fc0 	.word	0x08012fc0

0800f5b8 <spi_init>:
//       CPHA：CPHA=0相位为0； CPHA=1相位为1；
//函数返回：无
//=====================================================================
void spi_init(uint8_t No,uint8_t MSTR,uint16_t BaudRate,\
uint8_t CPOL,uint8_t CPHA)
{
 800f5b8:	b430      	push	{r4, r5}
    uint32_t temp = 0x00;    //
    uint16_t Freq_div;
    uint8_t BaudRate_Mode;
    if(No<SPI_1||No>SPI_3)   No=SPI_1;    //如果SPI号参数错误则强制选择 SPI1
 800f5ba:	2802      	cmp	r0, #2
 800f5bc:	d822      	bhi.n	800f604 <spi_init+0x4c>
    //（1）使能SPI和对应GPIO时钟
    switch(No)
 800f5be:	b310      	cbz	r0, 800f606 <spi_init+0x4e>
 800f5c0:	2801      	cmp	r0, #1
 800f5c2:	d14f      	bne.n	800f664 <spi_init+0xac>
        //配置引脚速率
        GPIOA->OSPEEDR |= 0xc000fc00;
        break;
        case SPI_2:
        //使能SPI2和GPIOB时钟
        RCC->APB1ENR1 |= RCC_APB1ENR1_SPI2EN;
 800f5c4:	4c4a      	ldr	r4, [pc, #296]	; (800f6f0 <spi_init+0x138>)
 800f5c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800f5c8:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800f5cc:	65a5      	str	r5, [r4, #88]	; 0x58
        RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800f5ce:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f5d0:	f045 0502 	orr.w	r5, r5, #2
 800f5d4:	64e5      	str	r5, [r4, #76]	; 0x4c
        //使能PTB13,PTB14,PTB15,PTB12为SPI(SCK,MISO,MOSI,NSS)功能
        GPIOB->MODER &= ~(GPIO_MODER_MODE12|GPIO_MODER_MODE13|GPIO_MODER_MODE14|GPIO_MODER_MODE15);
 800f5d6:	4c47      	ldr	r4, [pc, #284]	; (800f6f4 <spi_init+0x13c>)
 800f5d8:	6825      	ldr	r5, [r4, #0]
 800f5da:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800f5de:	6025      	str	r5, [r4, #0]
        GPIOB->MODER |= (GPIO_MODER_MODE12_1|GPIO_MODER_MODE13_1|GPIO_MODER_MODE14_1|GPIO_MODER_MODE15_1);
 800f5e0:	6825      	ldr	r5, [r4, #0]
 800f5e2:	f045 452a 	orr.w	r5, r5, #2852126720	; 0xaa000000
 800f5e6:	6025      	str	r5, [r4, #0]
        GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL12|GPIO_AFRH_AFSEL13|GPIO_AFRH_AFSEL14|GPIO_AFRH_AFSEL15);
 800f5e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f5ea:	b2ad      	uxth	r5, r5
 800f5ec:	6265      	str	r5, [r4, #36]	; 0x24
        GPIOB->AFR[1] |= (GPIO_AFRH_AFSEL12_0 | GPIO_AFRH_AFSEL12_2)|(GPIO_AFRH_AFSEL13_0 | GPIO_AFRH_AFSEL13_2)|(GPIO_AFRH_AFSEL14_0 | GPIO_AFRH_AFSEL14_2)|(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2);
 800f5ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f5f0:	f045 45aa 	orr.w	r5, r5, #1426063360	; 0x55000000
 800f5f4:	f445 05aa 	orr.w	r5, r5, #5570560	; 0x550000
 800f5f8:	6265      	str	r5, [r4, #36]	; 0x24
        //配置引脚速率
        GPIOB->OSPEEDR |= 0xff000000;
 800f5fa:	68a5      	ldr	r5, [r4, #8]
 800f5fc:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 800f600:	60a5      	str	r5, [r4, #8]
        break;
 800f602:	e02f      	b.n	800f664 <spi_init+0xac>
    if(No<SPI_1||No>SPI_3)   No=SPI_1;    //如果SPI号参数错误则强制选择 SPI1
 800f604:	2000      	movs	r0, #0
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800f606:	4c3a      	ldr	r4, [pc, #232]	; (800f6f0 <spi_init+0x138>)
 800f608:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800f60a:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800f60e:	6625      	str	r5, [r4, #96]	; 0x60
        RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800f610:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f612:	f045 0501 	orr.w	r5, r5, #1
 800f616:	64e5      	str	r5, [r4, #76]	; 0x4c
        GPIOA->MODER &= ~(GPIO_MODER_MODE5|GPIO_MODER_MODE6|GPIO_MODER_MODE7|GPIO_MODER_MODE15);
 800f618:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 800f61c:	6825      	ldr	r5, [r4, #0]
 800f61e:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
 800f622:	f425 457c 	bic.w	r5, r5, #64512	; 0xfc00
 800f626:	6025      	str	r5, [r4, #0]
        GPIOA->MODER |= (GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1|GPIO_MODER_MODE15_1);
 800f628:	6825      	ldr	r5, [r4, #0]
 800f62a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800f62e:	f445 4528 	orr.w	r5, r5, #43008	; 0xa800
 800f632:	6025      	str	r5, [r4, #0]
        GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5|GPIO_AFRL_AFSEL6|GPIO_AFRL_AFSEL7);
 800f634:	6a25      	ldr	r5, [r4, #32]
 800f636:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f63a:	6225      	str	r5, [r4, #32]
        GPIOA->AFR[0] |= ((GPIO_AFRL_AFSEL5_0 | GPIO_AFRL_AFSEL5_2) | (GPIO_AFRL_AFSEL6_0 | GPIO_AFRL_AFSEL6_2) | (GPIO_AFRL_AFSEL7_0 | GPIO_AFRL_AFSEL7_2));
 800f63c:	6a25      	ldr	r5, [r4, #32]
 800f63e:	f045 45aa 	orr.w	r5, r5, #1426063360	; 0x55000000
 800f642:	f445 05a0 	orr.w	r5, r5, #5242880	; 0x500000
 800f646:	6225      	str	r5, [r4, #32]
        GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL15;
 800f648:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f64a:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
 800f64e:	6265      	str	r5, [r4, #36]	; 0x24
        GPIOA->AFR[1] |= (GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2);
 800f650:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f652:	f045 45a0 	orr.w	r5, r5, #1342177280	; 0x50000000
 800f656:	6265      	str	r5, [r4, #36]	; 0x24
        GPIOA->OSPEEDR |= 0xc000fc00;
 800f658:	68a5      	ldr	r5, [r4, #8]
 800f65a:	f045 4540 	orr.w	r5, r5, #3221225472	; 0xc0000000
 800f65e:	f445 457c 	orr.w	r5, r5, #64512	; 0xfc00
 800f662:	60a5      	str	r5, [r4, #8]
        break;
    }

    //（2）配置CR1寄存器
    //（2.1）暂时禁用SPI功能
    SPI_ARR[No]->CR1 &= ~SPI_CR1_SPE;
 800f664:	4604      	mov	r4, r0
 800f666:	4d24      	ldr	r5, [pc, #144]	; (800f6f8 <spi_init+0x140>)
 800f668:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 800f66c:	6828      	ldr	r0, [r5, #0]
 800f66e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800f672:	6028      	str	r0, [r5, #0]
    //（2.2）配置SPI主从机模式
    if(MSTR == 1)    //主机模式
 800f674:	2901      	cmp	r1, #1
 800f676:	d016      	beq.n	800f6a6 <spi_init+0xee>
    else    //从机模式
    {
        temp &= ~SPI_CR1_MSTR;
        //配置NSS脚由软件控制，置位为0
        temp |= SPI_CR1_SSM;
        temp &= ~SPI_CR1_SSI;
 800f678:	f44f 7100 	mov.w	r1, #512	; 0x200
    }

    //（2.3）配置SPI相位和极性
    if(CPOL == 1)
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d015      	beq.n	800f6ac <spi_init+0xf4>
    temp |= SPI_CR1_CPOL;
    else
    temp &= ~SPI_CR1_CPOL;
 800f680:	f021 0302 	bic.w	r3, r1, #2

    if(CPHA == 1)
 800f684:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f688:	2901      	cmp	r1, #1
 800f68a:	d012      	beq.n	800f6b2 <spi_init+0xfa>
    temp |= SPI_CR1_CPHA;
    else
    temp &= ~SPI_CR1_CPHA;
 800f68c:	f023 0101 	bic.w	r1, r3, #1

    //（2.4）配置SPI波特率
    Freq_div = SystemCoreClock/1000/BaudRate;
 800f690:	4b1a      	ldr	r3, [pc, #104]	; (800f6fc <spi_init+0x144>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	481a      	ldr	r0, [pc, #104]	; (800f700 <spi_init+0x148>)
 800f696:	fba0 0303 	umull	r0, r3, r0, r3
 800f69a:	099b      	lsrs	r3, r3, #6
 800f69c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f6a0:	b292      	uxth	r2, r2
    BaudRate_Mode = 0;
 800f6a2:	2300      	movs	r3, #0
    while(Freq_div/2 >= 2)
 800f6a4:	e00b      	b.n	800f6be <spi_init+0x106>
        temp |= SPI_CR1_SSI|SPI_CR1_SSM;
 800f6a6:	f44f 7141 	mov.w	r1, #772	; 0x304
 800f6aa:	e7e7      	b.n	800f67c <spi_init+0xc4>
    temp |= SPI_CR1_CPOL;
 800f6ac:	f041 0302 	orr.w	r3, r1, #2
 800f6b0:	e7e8      	b.n	800f684 <spi_init+0xcc>
    temp |= SPI_CR1_CPHA;
 800f6b2:	f043 0101 	orr.w	r1, r3, #1
 800f6b6:	e7eb      	b.n	800f690 <spi_init+0xd8>
    {
        BaudRate_Mode++;
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	b2db      	uxtb	r3, r3
        Freq_div = Freq_div/2;
 800f6bc:	0852      	lsrs	r2, r2, #1
    while(Freq_div/2 >= 2)
 800f6be:	2a03      	cmp	r2, #3
 800f6c0:	d8fa      	bhi.n	800f6b8 <spi_init+0x100>
    }
    temp |= (BaudRate_Mode<<3);
 800f6c2:	ea41 03c3 	orr.w	r3, r1, r3, lsl #3

    //（2.5）统一配置CR1寄存器
    SPI_ARR[No]->CR1 |= temp;
 800f6c6:	4a0c      	ldr	r2, [pc, #48]	; (800f6f8 <spi_init+0x140>)
 800f6c8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800f6cc:	6801      	ldr	r1, [r0, #0]
 800f6ce:	430b      	orrs	r3, r1
 800f6d0:	6003      	str	r3, [r0, #0]
    temp = 0x00;
    //（3.1）配置数据为16bit
    //	temp |= SPI_CR2_DS;
    temp |= (SPI_CR2_DS_0|SPI_CR2_DS_1|SPI_CR2_DS_2);
    temp |= SPI_CR2_FRXTH;
    SPI_ARR[No]->CR2 |= temp;
 800f6d2:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800f6d6:	684b      	ldr	r3, [r1, #4]
 800f6d8:	f443 53b8 	orr.w	r3, r3, #5888	; 0x1700
 800f6dc:	604b      	str	r3, [r1, #4]
    //（4）使能SPI功能
    SPI_ARR[No]->CR1 |= SPI_CR1_SPE;
 800f6de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6e8:	6013      	str	r3, [r2, #0]
}
 800f6ea:	bc30      	pop	{r4, r5}
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	40021000 	.word	0x40021000
 800f6f4:	48000400 	.word	0x48000400
 800f6f8:	20004000 	.word	0x20004000
 800f6fc:	2000400c 	.word	0x2000400c
 800f700:	10624dd3 	.word	0x10624dd3

0800f704 <spi_send1>:
//函数参数：No：模块号，可用参数可参见gec.h文件
//       data：     需要发送的一字节数据。
//函数返回：0：发送失败；1：发送成功。
//=====================================================================
uint8_t spi_send1(uint8_t No,uint8_t data)
{
 800f704:	b410      	push	{r4}
 800f706:	b083      	sub	sp, #12
    volatile uint32_t i;

    i = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	9301      	str	r3, [sp, #4]

    if(No<SPI_1||No>SPI_3)   return 0;  //如果SPI号参数错误则发送失败
 800f70c:	2802      	cmp	r0, #2
 800f70e:	d836      	bhi.n	800f77e <spi_send1+0x7a>

    //若SPI未使能，则使能
    if ((SPI_ARR[No]->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f710:	4604      	mov	r4, r0
 800f712:	4b1d      	ldr	r3, [pc, #116]	; (800f788 <spi_send1+0x84>)
 800f714:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f71e:	d103      	bne.n	800f728 <spi_send1+0x24>
    {
        SPI_ARR[No]->CR1 |= SPI_CR1_SPE;
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f726:	601a      	str	r2, [r3, #0]
    }
    //判断发送缓冲区是否为空。若为空，则发送数据
    while((SPI_ARR[No]->SR & SPI_SR_TXE) !=  SPI_SR_TXE)
 800f728:	4b17      	ldr	r3, [pc, #92]	; (800f788 <spi_send1+0x84>)
 800f72a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f72e:	689a      	ldr	r2, [r3, #8]
 800f730:	f012 0f02 	tst.w	r2, #2
 800f734:	d109      	bne.n	800f74a <spi_send1+0x46>
    {
        i++;
 800f736:	9b01      	ldr	r3, [sp, #4]
 800f738:	3301      	adds	r3, #1
 800f73a:	9301      	str	r3, [sp, #4]
        if(i>0xfffe) return 0;
 800f73c:	9a01      	ldr	r2, [sp, #4]
 800f73e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f742:	429a      	cmp	r2, r3
 800f744:	d9f0      	bls.n	800f728 <spi_send1+0x24>
 800f746:	2000      	movs	r0, #0
 800f748:	e01a      	b.n	800f780 <spi_send1+0x7c>
    }
    *((__IO uint8_t *)&SPI_ARR[No]->DR) = data;
 800f74a:	7319      	strb	r1, [r3, #12]
    i = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	9301      	str	r3, [sp, #4]

    //接收回发数据，防止发送缓冲区溢出
    while((SPI_ARR[No]->SR & SPI_SR_RXNE) !=  SPI_SR_RXNE)
 800f750:	4b0d      	ldr	r3, [pc, #52]	; (800f788 <spi_send1+0x84>)
 800f752:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f756:	689a      	ldr	r2, [r3, #8]
 800f758:	f012 0f01 	tst.w	r2, #1
 800f75c:	d109      	bne.n	800f772 <spi_send1+0x6e>
    {
        i++;
 800f75e:	9b01      	ldr	r3, [sp, #4]
 800f760:	3301      	adds	r3, #1
 800f762:	9301      	str	r3, [sp, #4]
        if(i>0xfffe) return 0;
 800f764:	9a01      	ldr	r2, [sp, #4]
 800f766:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d9f0      	bls.n	800f750 <spi_send1+0x4c>
 800f76e:	2000      	movs	r0, #0
 800f770:	e006      	b.n	800f780 <spi_send1+0x7c>
    }
    //读一次DR,SR，防止DR,SR不被清空
    i = SPI_ARR[No]->DR;
 800f772:	68da      	ldr	r2, [r3, #12]
 800f774:	9201      	str	r2, [sp, #4]
    i = SPI_ARR[No]->SR;
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	9301      	str	r3, [sp, #4]
    return 1;
 800f77a:	2001      	movs	r0, #1
 800f77c:	e000      	b.n	800f780 <spi_send1+0x7c>
    if(No<SPI_1||No>SPI_3)   return 0;  //如果SPI号参数错误则发送失败
 800f77e:	2000      	movs	r0, #0
}
 800f780:	b003      	add	sp, #12
 800f782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	20004000 	.word	0x20004000

0800f78c <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
 800f78c:	b410      	push	{r4}

    /* set flag */
    timer->parent.flag  = flag;

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f78e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800f792:	f024 0401 	bic.w	r4, r4, #1
 800f796:	7244      	strb	r4, [r0, #9]

    timer->timeout_func = timeout;
 800f798:	61c1      	str	r1, [r0, #28]
    timer->parameter    = parameter;
 800f79a:	6202      	str	r2, [r0, #32]

    timer->timeout_tick = 0;
 800f79c:	2200      	movs	r2, #0
 800f79e:	6282      	str	r2, [r0, #40]	; 0x28
    timer->init_tick    = time;
 800f7a0:	6243      	str	r3, [r0, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dd02      	ble.n	800f7ae <_rt_timer_init+0x22>
    {
        rt_list_init(&(timer->row[i]));
    }
}
 800f7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7ac:	4770      	bx	lr
        rt_list_init(&(timer->row[i]));
 800f7ae:	1c9a      	adds	r2, r3, #2
 800f7b0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800f7b4:	1d11      	adds	r1, r2, #4
    l->next = l->prev = l;
 800f7b6:	6091      	str	r1, [r2, #8]
 800f7b8:	6051      	str	r1, [r2, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	e7f2      	b.n	800f7a4 <_rt_timer_init+0x18>

0800f7be <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
 800f7be:	b570      	push	{r4, r5, r6, lr}
 800f7c0:	b082      	sub	sp, #8
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4615      	mov	r5, r2
 800f7c6:	461e      	mov	r6, r3
    /* timer check */
    RT_ASSERT(timer != RT_NULL);

    /* timer object initialization */
    rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
 800f7c8:	460a      	mov	r2, r1
 800f7ca:	210a      	movs	r1, #10
 800f7cc:	f000 fa54 	bl	800fc78 <rt_object_init>

    _rt_timer_init(timer, timeout, parameter, time, flag);
 800f7d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f7d4:	9300      	str	r3, [sp, #0]
 800f7d6:	9b06      	ldr	r3, [sp, #24]
 800f7d8:	4632      	mov	r2, r6
 800f7da:	4629      	mov	r1, r5
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f7ff ffd5 	bl	800f78c <_rt_timer_init>
}
 800f7e2:	b002      	add	sp, #8
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}

0800f7e6 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
 800f7e6:	b570      	push	{r4, r5, r6, lr}
 800f7e8:	4604      	mov	r4, r0
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f7ea:	f7fe f829 	bl	800d840 <rt_hw_interrupt_disable>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2a00      	cmp	r2, #0
 800f7f2:	dd06      	ble.n	800f802 <rt_timer_detach+0x1c>

    _rt_timer_remove(timer);

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f7f4:	f7fe f828 	bl	800d848 <rt_hw_interrupt_enable>

    rt_object_detach((rt_object_t)timer);
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f000 fa5f 	bl	800fcbc <rt_object_detach>

    return RT_EOK;
}
 800f7fe:	2000      	movs	r0, #0
 800f800:	bd70      	pop	{r4, r5, r6, pc}
        rt_list_remove(&timer->row[i]);
 800f802:	1c93      	adds	r3, r2, #2
 800f804:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f808:	1d19      	adds	r1, r3, #4
    n->next->prev = n->prev;
 800f80a:	685d      	ldr	r5, [r3, #4]
 800f80c:	689e      	ldr	r6, [r3, #8]
 800f80e:	606e      	str	r6, [r5, #4]
    n->prev->next = n->next;
 800f810:	689d      	ldr	r5, [r3, #8]
 800f812:	685e      	ldr	r6, [r3, #4]
 800f814:	602e      	str	r6, [r5, #0]
    n->next = n->prev = n;
 800f816:	6099      	str	r1, [r3, #8]
 800f818:	6059      	str	r1, [r3, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f81a:	3201      	adds	r2, #1
 800f81c:	e7e8      	b.n	800f7f0 <rt_timer_detach+0xa>
	...

0800f820 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	4604      	mov	r4, r0
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
 800f826:	f7fe f80b 	bl	800d840 <rt_hw_interrupt_disable>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f82a:	2200      	movs	r2, #0
 800f82c:	2a00      	cmp	r2, #0
 800f82e:	dd26      	ble.n	800f87e <rt_timer_start+0x5e>
    /* remove timer from list */
    _rt_timer_remove(timer);
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f830:	7a63      	ldrb	r3, [r4, #9]
 800f832:	f023 0301 	bic.w	r3, r3, #1
 800f836:	7263      	strb	r3, [r4, #9]
    rt_hw_interrupt_enable(level);
 800f838:	f7fe f806 	bl	800d848 <rt_hw_interrupt_enable>
    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
 800f83c:	f001 ff24 	bl	8011688 <rt_tick_get>
 800f840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f842:	4418      	add	r0, r3
 800f844:	62a0      	str	r0, [r4, #40]	; 0x28

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f846:	f7fd fffb 	bl	800d840 <rt_hw_interrupt_disable>
    {
        /* insert timer to system timer list */
        timer_list = rt_timer_list;
    }

    row_head[0]  = &timer_list[0];
 800f84a:	4b22      	ldr	r3, [pc, #136]	; (800f8d4 <rt_timer_start+0xb4>)
 800f84c:	9301      	str	r3, [sp, #4]
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 800f84e:	2100      	movs	r1, #0
 800f850:	b341      	cbz	r1, 800f8a4 <rt_timer_start+0x84>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
 800f852:	4a21      	ldr	r2, [pc, #132]	; (800f8d8 <rt_timer_start+0xb8>)
 800f854:	6813      	ldr	r3, [r2, #0]
 800f856:	3301      	adds	r3, #1
 800f858:	6013      	str	r3, [r2, #0]
    tst_nr = random_nr;

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
 800f85a:	9b01      	ldr	r3, [sp, #4]
 800f85c:	f104 0214 	add.w	r2, r4, #20
    l->next->prev = n;
 800f860:	6819      	ldr	r1, [r3, #0]
 800f862:	604a      	str	r2, [r1, #4]
    n->next = l->next;
 800f864:	6819      	ldr	r1, [r3, #0]
 800f866:	6161      	str	r1, [r4, #20]
    l->next = n;
 800f868:	601a      	str	r2, [r3, #0]
    n->prev = l;
 800f86a:	61a3      	str	r3, [r4, #24]
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
 800f86c:	7a63      	ldrb	r3, [r4, #9]
 800f86e:	f043 0301 	orr.w	r3, r3, #1
 800f872:	7263      	strb	r3, [r4, #9]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f874:	f7fd ffe8 	bl	800d848 <rt_hw_interrupt_enable>
        }
    }
#endif

    return RT_EOK;
}
 800f878:	2000      	movs	r0, #0
 800f87a:	b002      	add	sp, #8
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
        rt_list_remove(&timer->row[i]);
 800f87e:	1c93      	adds	r3, r2, #2
 800f880:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f884:	1d19      	adds	r1, r3, #4
    n->next->prev = n->prev;
 800f886:	685d      	ldr	r5, [r3, #4]
 800f888:	689e      	ldr	r6, [r3, #8]
 800f88a:	606e      	str	r6, [r5, #4]
    n->prev->next = n->next;
 800f88c:	689d      	ldr	r5, [r3, #8]
 800f88e:	685e      	ldr	r6, [r3, #4]
 800f890:	602e      	str	r6, [r5, #0]
    n->next = n->prev = n;
 800f892:	6099      	str	r1, [r3, #8]
 800f894:	6059      	str	r1, [r3, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f896:	3201      	adds	r2, #1
 800f898:	e7c8      	b.n	800f82c <rt_timer_start+0xc>
             row_head[row_lvl]  = row_head[row_lvl]->next)
 800f89a:	ab02      	add	r3, sp, #8
 800f89c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f8a0:	f843 2c04 	str.w	r2, [r3, #-4]
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
 800f8a4:	ab02      	add	r3, sp, #8
 800f8a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f8aa:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800f8ae:	00cb      	lsls	r3, r1, #3
 800f8b0:	4a08      	ldr	r2, [pc, #32]	; (800f8d4 <rt_timer_start+0xb4>)
 800f8b2:	441a      	add	r2, r3
 800f8b4:	6852      	ldr	r2, [r2, #4]
 800f8b6:	4295      	cmp	r5, r2
 800f8b8:	d00a      	beq.n	800f8d0 <rt_timer_start+0xb0>
            rt_list_t *p = row_head[row_lvl]->next;
 800f8ba:	682a      	ldr	r2, [r5, #0]
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
 800f8bc:	3314      	adds	r3, #20
 800f8be:	1ad3      	subs	r3, r2, r3
            if ((t->timeout_tick - timer->timeout_tick) == 0)
 800f8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f8c4:	42ab      	cmp	r3, r5
 800f8c6:	d0e8      	beq.n	800f89a <rt_timer_start+0x7a>
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
 800f8c8:	1b5b      	subs	r3, r3, r5
 800f8ca:	4d04      	ldr	r5, [pc, #16]	; (800f8dc <rt_timer_start+0xbc>)
 800f8cc:	42ab      	cmp	r3, r5
 800f8ce:	d8e4      	bhi.n	800f89a <rt_timer_start+0x7a>
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 800f8d0:	3101      	adds	r1, #1
 800f8d2:	e7bd      	b.n	800f850 <rt_timer_start+0x30>
 800f8d4:	200040d0 	.word	0x200040d0
 800f8d8:	200040cc 	.word	0x200040cc
 800f8dc:	7ffffffe 	.word	0x7ffffffe

0800f8e0 <rt_timer_stop>:

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 800f8e0:	7a43      	ldrb	r3, [r0, #9]
 800f8e2:	f013 0f01 	tst.w	r3, #1
 800f8e6:	d01c      	beq.n	800f922 <rt_timer_stop+0x42>
{
 800f8e8:	b570      	push	{r4, r5, r6, lr}
 800f8ea:	4604      	mov	r4, r0
        return -RT_ERROR;

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f8ec:	f7fd ffa8 	bl	800d840 <rt_hw_interrupt_disable>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2a00      	cmp	r2, #0
 800f8f4:	dd07      	ble.n	800f906 <rt_timer_stop+0x26>

    _rt_timer_remove(timer);

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f8f6:	f7fd ffa7 	bl	800d848 <rt_hw_interrupt_enable>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f8fa:	7a63      	ldrb	r3, [r4, #9]
 800f8fc:	f023 0301 	bic.w	r3, r3, #1
 800f900:	7263      	strb	r3, [r4, #9]

    return RT_EOK;
 800f902:	2000      	movs	r0, #0
}
 800f904:	bd70      	pop	{r4, r5, r6, pc}
        rt_list_remove(&timer->row[i]);
 800f906:	1c93      	adds	r3, r2, #2
 800f908:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f90c:	1d19      	adds	r1, r3, #4
    n->next->prev = n->prev;
 800f90e:	685d      	ldr	r5, [r3, #4]
 800f910:	689e      	ldr	r6, [r3, #8]
 800f912:	606e      	str	r6, [r5, #4]
    n->prev->next = n->next;
 800f914:	689d      	ldr	r5, [r3, #8]
 800f916:	685e      	ldr	r6, [r3, #4]
 800f918:	602e      	str	r6, [r5, #0]
    n->next = n->prev = n;
 800f91a:	6099      	str	r1, [r3, #8]
 800f91c:	6059      	str	r1, [r3, #4]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f91e:	3201      	adds	r2, #1
 800f920:	e7e7      	b.n	800f8f2 <rt_timer_stop+0x12>
        return -RT_ERROR;
 800f922:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f926:	4770      	bx	lr

0800f928 <rt_timer_control>:
{
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);

    switch (cmd)
 800f928:	2903      	cmp	r1, #3
 800f92a:	d805      	bhi.n	800f938 <rt_timer_control+0x10>
 800f92c:	e8df f001 	tbb	[pc, r1]
 800f930:	0e090206 	.word	0x0e090206
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
 800f934:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f936:	6013      	str	r3, [r2, #0]
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
        break;
    }

    return RT_EOK;
}
 800f938:	2000      	movs	r0, #0
 800f93a:	4770      	bx	lr
        timer->init_tick = *(rt_tick_t *)arg;
 800f93c:	6813      	ldr	r3, [r2, #0]
 800f93e:	6243      	str	r3, [r0, #36]	; 0x24
        break;
 800f940:	e7fa      	b.n	800f938 <rt_timer_control+0x10>
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
 800f942:	7a43      	ldrb	r3, [r0, #9]
 800f944:	f023 0302 	bic.w	r3, r3, #2
 800f948:	7243      	strb	r3, [r0, #9]
        break;
 800f94a:	e7f5      	b.n	800f938 <rt_timer_control+0x10>
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
 800f94c:	7a43      	ldrb	r3, [r0, #9]
 800f94e:	f043 0302 	orr.w	r3, r3, #2
 800f952:	7243      	strb	r3, [r0, #9]
        break;
 800f954:	e7f0      	b.n	800f938 <rt_timer_control+0x10>
	...

0800f958 <rt_timer_check>:
 * corresponding timeout function will be invoked.
 *
 * @note this function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
 800f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    rt_tick_t current_tick;
    register rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
 800f95a:	f001 fe95 	bl	8011688 <rt_tick_get>
 800f95e:	4607      	mov	r7, r0

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 800f960:	f7fd ff6e 	bl	800d840 <rt_hw_interrupt_disable>
 800f964:	4605      	mov	r5, r0
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
    return l->next == l;
 800f966:	4b21      	ldr	r3, [pc, #132]	; (800f9ec <rt_timer_check+0x94>)
 800f968:	681c      	ldr	r4, [r3, #0]

    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
 800f96a:	429c      	cmp	r4, r3
 800f96c:	d103      	bne.n	800f976 <rt_timer_check+0x1e>
        else
            break;
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 800f96e:	4628      	mov	r0, r5
 800f970:	f7fd ff6a 	bl	800d848 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
 800f974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 800f976:	f1a4 0614 	sub.w	r6, r4, #20
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
 800f97a:	6963      	ldr	r3, [r4, #20]
 800f97c:	1aff      	subs	r7, r7, r3
 800f97e:	4b1c      	ldr	r3, [pc, #112]	; (800f9f0 <rt_timer_check+0x98>)
 800f980:	429f      	cmp	r7, r3
 800f982:	d8f4      	bhi.n	800f96e <rt_timer_check+0x16>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f984:	2100      	movs	r1, #0
 800f986:	2900      	cmp	r1, #0
 800f988:	dd10      	ble.n	800f9ac <rt_timer_check+0x54>
            t->timeout_func(t->parameter);
 800f98a:	68a3      	ldr	r3, [r4, #8]
 800f98c:	68e0      	ldr	r0, [r4, #12]
 800f98e:	4798      	blx	r3
            current_tick = rt_tick_get();
 800f990:	f001 fe7a 	bl	8011688 <rt_tick_get>
 800f994:	4607      	mov	r7, r0
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 800f996:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800f99a:	f003 0203 	and.w	r2, r3, #3
 800f99e:	2a03      	cmp	r2, #3
 800f9a0:	d01b      	beq.n	800f9da <rt_timer_check+0x82>
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f9a2:	f023 0301 	bic.w	r3, r3, #1
 800f9a6:	f804 3c0b 	strb.w	r3, [r4, #-11]
 800f9aa:	e7dc      	b.n	800f966 <rt_timer_check+0xe>
        rt_list_remove(&timer->row[i]);
 800f9ac:	f1a4 0214 	sub.w	r2, r4, #20
 800f9b0:	1c8b      	adds	r3, r1, #2
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	441a      	add	r2, r3
 800f9b6:	3204      	adds	r2, #4
    n->next->prev = n->prev;
 800f9b8:	4423      	add	r3, r4
 800f9ba:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800f9be:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 800f9c2:	6047      	str	r7, [r0, #4]
    n->prev->next = n->next;
 800f9c4:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800f9c8:	f853 7c10 	ldr.w	r7, [r3, #-16]
 800f9cc:	6007      	str	r7, [r0, #0]
    n->next = n->prev = n;
 800f9ce:	f843 2c0c 	str.w	r2, [r3, #-12]
 800f9d2:	f843 2c10 	str.w	r2, [r3, #-16]
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 800f9d6:	3101      	adds	r1, #1
 800f9d8:	e7d5      	b.n	800f986 <rt_timer_check+0x2e>
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 800f9da:	f023 0301 	bic.w	r3, r3, #1
 800f9de:	f804 3c0b 	strb.w	r3, [r4, #-11]
                rt_timer_start(t);
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f7ff ff1c 	bl	800f820 <rt_timer_start>
 800f9e8:	e7bd      	b.n	800f966 <rt_timer_check+0xe>
 800f9ea:	bf00      	nop
 800f9ec:	200040d0 	.word	0x200040d0
 800f9f0:	7ffffffe 	.word	0x7ffffffe

0800f9f4 <rt_system_timer_init>:
 */
void rt_system_timer_init(void)
{
    int i;

    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	b103      	cbz	r3, 800f9fa <rt_system_timer_init+0x6>
    {
        rt_list_init(rt_timer_list + i);
    }
}
 800f9f8:	4770      	bx	lr
        rt_list_init(rt_timer_list + i);
 800f9fa:	4904      	ldr	r1, [pc, #16]	; (800fa0c <rt_system_timer_init+0x18>)
 800f9fc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    l->next = l->prev = l;
 800fa00:	6052      	str	r2, [r2, #4]
 800fa02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
 800fa06:	3301      	adds	r3, #1
 800fa08:	e7f5      	b.n	800f9f6 <rt_system_timer_init+0x2>
 800fa0a:	bf00      	nop
 800fa0c:	200040d0 	.word	0x200040d0

0800fa10 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800fa10:	4b2f      	ldr	r3, [pc, #188]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f013 0f08 	tst.w	r3, #8
 800fa18:	d116      	bne.n	800fa48 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800fa1a:	4b2d      	ldr	r3, [pc, #180]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800fa1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa20:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800fa24:	4a2b      	ldr	r2, [pc, #172]	; (800fad4 <SystemCoreClockUpdate+0xc4>)
 800fa26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa2a:	4a29      	ldr	r2, [pc, #164]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800fa2c:	6893      	ldr	r3, [r2, #8]
 800fa2e:	f003 030c 	and.w	r3, r3, #12
 800fa32:	2b0c      	cmp	r3, #12
 800fa34:	d848      	bhi.n	800fac8 <SystemCoreClockUpdate+0xb8>
 800fa36:	e8df f003 	tbb	[pc, r3]
 800fa3a:	470c      	.short	0x470c
 800fa3c:	47194747 	.word	0x47194747
 800fa40:	471d4747 	.word	0x471d4747
 800fa44:	4747      	.short	0x4747
 800fa46:	21          	.byte	0x21
 800fa47:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800fa48:	4b21      	ldr	r3, [pc, #132]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fa50:	e7e8      	b.n	800fa24 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800fa52:	4b21      	ldr	r3, [pc, #132]	; (800fad8 <SystemCoreClockUpdate+0xc8>)
 800fa54:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800fa56:	4b1e      	ldr	r3, [pc, #120]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fa5e:	4a1f      	ldr	r2, [pc, #124]	; (800fadc <SystemCoreClockUpdate+0xcc>)
 800fa60:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800fa62:	4a1d      	ldr	r2, [pc, #116]	; (800fad8 <SystemCoreClockUpdate+0xc8>)
 800fa64:	6813      	ldr	r3, [r2, #0]
 800fa66:	40cb      	lsrs	r3, r1
 800fa68:	6013      	str	r3, [r2, #0]
}
 800fa6a:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 800fa6c:	4b1a      	ldr	r3, [pc, #104]	; (800fad8 <SystemCoreClockUpdate+0xc8>)
 800fa6e:	4a1c      	ldr	r2, [pc, #112]	; (800fae0 <SystemCoreClockUpdate+0xd0>)
 800fa70:	601a      	str	r2, [r3, #0]
      break;
 800fa72:	e7f0      	b.n	800fa56 <SystemCoreClockUpdate+0x46>
      SystemCoreClock = HSE_VALUE;
 800fa74:	4b18      	ldr	r3, [pc, #96]	; (800fad8 <SystemCoreClockUpdate+0xc8>)
 800fa76:	4a1b      	ldr	r2, [pc, #108]	; (800fae4 <SystemCoreClockUpdate+0xd4>)
 800fa78:	601a      	str	r2, [r3, #0]
      break;
 800fa7a:	e7ec      	b.n	800fa56 <SystemCoreClockUpdate+0x46>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800fa7c:	4b14      	ldr	r3, [pc, #80]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800fa7e:	68da      	ldr	r2, [r3, #12]
 800fa80:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fa8a:	3301      	adds	r3, #1
      switch (pllsource)
 800fa8c:	2a02      	cmp	r2, #2
 800fa8e:	d004      	beq.n	800fa9a <SystemCoreClockUpdate+0x8a>
 800fa90:	2a03      	cmp	r2, #3
 800fa92:	d015      	beq.n	800fac0 <SystemCoreClockUpdate+0xb0>
          pllvco = (msirange / pllm);
 800fa94:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 800fa98:	e002      	b.n	800faa0 <SystemCoreClockUpdate+0x90>
          pllvco = (HSI_VALUE / pllm);
 800fa9a:	4a11      	ldr	r2, [pc, #68]	; (800fae0 <SystemCoreClockUpdate+0xd0>)
 800fa9c:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800faa0:	490b      	ldr	r1, [pc, #44]	; (800fad0 <SystemCoreClockUpdate+0xc0>)
 800faa2:	68ca      	ldr	r2, [r1, #12]
 800faa4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800faa8:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800faac:	68ca      	ldr	r2, [r1, #12]
 800faae:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800fab2:	3201      	adds	r2, #1
 800fab4:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 800fab6:	fbb3 f3f2 	udiv	r3, r3, r2
 800faba:	4a07      	ldr	r2, [pc, #28]	; (800fad8 <SystemCoreClockUpdate+0xc8>)
 800fabc:	6013      	str	r3, [r2, #0]
      break;
 800fabe:	e7ca      	b.n	800fa56 <SystemCoreClockUpdate+0x46>
          pllvco = (HSE_VALUE / pllm);
 800fac0:	4a08      	ldr	r2, [pc, #32]	; (800fae4 <SystemCoreClockUpdate+0xd4>)
 800fac2:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 800fac6:	e7eb      	b.n	800faa0 <SystemCoreClockUpdate+0x90>
      SystemCoreClock = msirange;
 800fac8:	4b03      	ldr	r3, [pc, #12]	; (800fad8 <SystemCoreClockUpdate+0xc8>)
 800faca:	6019      	str	r1, [r3, #0]
      break;
 800facc:	e7c3      	b.n	800fa56 <SystemCoreClockUpdate+0x46>
 800face:	bf00      	nop
 800fad0:	40021000 	.word	0x40021000
 800fad4:	08012fe4 	.word	0x08012fe4
 800fad8:	2000400c 	.word	0x2000400c
 800fadc:	08012fd4 	.word	0x08012fd4
 800fae0:	00f42400 	.word	0x00f42400
 800fae4:	007a1200 	.word	0x007a1200

0800fae8 <SysClock_Config>:
//函数返回：1：成功；0：失败
//参数说明：msirange：MSI时钟频率等级
//功能概要：初始化时钟频率
//=====================================================================
uint8_t SysClock_Config(uint32_t msirange)
{
 800fae8:	b082      	sub	sp, #8
  uint32_t vos;
  uint32_t latency = 0;  /* default value 0WS */

  if(READ_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN) != 0U)
 800faea:	4b23      	ldr	r3, [pc, #140]	; (800fb78 <SysClock_Config+0x90>)
 800faec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800faf2:	d015      	beq.n	800fb20 <SysClock_Config+0x38>
  {
	vos = (PWR->CR1 & PWR_CR1_VOS);
 800faf4:	4b21      	ldr	r3, [pc, #132]	; (800fb7c <SysClock_Config+0x94>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		 } while(0);
	vos = (PWR->CR1 & PWR_CR1_VOS);
	CLEAR_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
  }

  if(vos == PWR_CR1_VOS_0)
 800fafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb00:	d021      	beq.n	800fb46 <SysClock_Config+0x5e>
  uint32_t latency = 0;  /* default value 0WS */
 800fb02:	2100      	movs	r1, #0
	  }
	}
	/* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }

  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (latency));
 800fb04:	4a1e      	ldr	r2, [pc, #120]	; (800fb80 <SysClock_Config+0x98>)
 800fb06:	6813      	ldr	r3, [r2, #0]
 800fb08:	f023 0307 	bic.w	r3, r3, #7
 800fb0c:	430b      	orrs	r3, r1
 800fb0e:	6013      	str	r3, [r2, #0]

   /* Check that the new number of wait states is taken into account to access the Flash
      memory by reading the FLASH_ACR register */
   if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 800fb10:	6813      	ldr	r3, [r2, #0]
 800fb12:	f003 0307 	and.w	r3, r3, #7
 800fb16:	428b      	cmp	r3, r1
 800fb18:	d01f      	beq.n	800fb5a <SysClock_Config+0x72>
   {
     return 0;
 800fb1a:	2000      	movs	r0, #0
   }
   SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
   	MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, (0xB0));
   return 1;

}
 800fb1c:	b002      	add	sp, #8
 800fb1e:	4770      	bx	lr
		   SET_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
 800fb20:	4a15      	ldr	r2, [pc, #84]	; (800fb78 <SysClock_Config+0x90>)
 800fb22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fb24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb28:	6593      	str	r3, [r2, #88]	; 0x58
		   tmpreg = READ_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
 800fb2a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fb2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb30:	9301      	str	r3, [sp, #4]
		   (void)(tmpreg);
 800fb32:	9b01      	ldr	r3, [sp, #4]
	vos = (PWR->CR1 & PWR_CR1_VOS);
 800fb34:	4b11      	ldr	r3, [pc, #68]	; (800fb7c <SysClock_Config+0x94>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	CLEAR_BIT(RCC->APB1ENR1, RCC_APB1ENR1_PWREN);
 800fb3c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800fb3e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800fb42:	6591      	str	r1, [r2, #88]	; 0x58
 800fb44:	e7da      	b.n	800fafc <SysClock_Config+0x14>
	if(msirange > RCC_CR_MSIRANGE_8)
 800fb46:	2880      	cmp	r0, #128	; 0x80
 800fb48:	d903      	bls.n	800fb52 <SysClock_Config+0x6a>
	  if(msirange > RCC_CR_MSIRANGE_10)
 800fb4a:	28a0      	cmp	r0, #160	; 0xa0
 800fb4c:	d903      	bls.n	800fb56 <SysClock_Config+0x6e>
		latency = 2; /* 2WS */
 800fb4e:	2102      	movs	r1, #2
 800fb50:	e7d8      	b.n	800fb04 <SysClock_Config+0x1c>
  uint32_t latency = 0;  /* default value 0WS */
 800fb52:	2100      	movs	r1, #0
 800fb54:	e7d6      	b.n	800fb04 <SysClock_Config+0x1c>
		latency = 1; /* 1WS */
 800fb56:	2101      	movs	r1, #1
 800fb58:	e7d4      	b.n	800fb04 <SysClock_Config+0x1c>
   SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800fb5a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800fb5e:	6813      	ldr	r3, [r2, #0]
 800fb60:	f043 0308 	orr.w	r3, r3, #8
 800fb64:	6013      	str	r3, [r2, #0]
   	MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, (0xB0));
 800fb66:	6813      	ldr	r3, [r2, #0]
 800fb68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb6c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800fb70:	6013      	str	r3, [r2, #0]
   return 1;
 800fb72:	2001      	movs	r0, #1
 800fb74:	e7d2      	b.n	800fb1c <SysClock_Config+0x34>
 800fb76:	bf00      	nop
 800fb78:	40021000 	.word	0x40021000
 800fb7c:	40007000 	.word	0x40007000
 800fb80:	40022000 	.word	0x40022000

0800fb84 <SystemInit>:
{
 800fb84:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fb86:	4c11      	ldr	r4, [pc, #68]	; (800fbcc <SystemInit+0x48>)
 800fb88:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800fb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800fb94:	4b0e      	ldr	r3, [pc, #56]	; (800fbd0 <SystemInit+0x4c>)
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	f042 0201 	orr.w	r2, r2, #1
 800fb9c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800fb9e:	2100      	movs	r1, #0
 800fba0:	6099      	str	r1, [r3, #8]
  RCC->CR &= 0xEAF6FFFFU;
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800fba8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800fbac:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 800fbae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbb2:	60da      	str	r2, [r3, #12]
  RCC->CR &= 0xFFFBFFFFU;
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fbba:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 800fbbc:	6199      	str	r1, [r3, #24]
  SysClock_Config(0xB0);
 800fbbe:	20b0      	movs	r0, #176	; 0xb0
 800fbc0:	f7ff ff92 	bl	800fae8 <SysClock_Config>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800fbc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbc8:	60a3      	str	r3, [r4, #8]
}
 800fbca:	bd10      	pop	{r4, pc}
 800fbcc:	e000ed00 	.word	0xe000ed00
 800fbd0:	40021000 	.word	0x40021000

0800fbd4 <thread_SPThread2>:
//参数说明：无
//功能概要：抢夺信号量
//内部调用：无
//======================================================================
void thread_SPThread2()
{
 800fbd4:	b510      	push	{r4, lr}
    //（1）======申明局部变量===========================================
    int SPcount;      //记录信号量的个数
    uart_send_string(UART_User,(void *)"第一次进入线程2！\n");
 800fbd6:	4918      	ldr	r1, [pc, #96]	; (800fc38 <thread_SPThread2+0x64>)
 800fbd8:	2002      	movs	r0, #2
 800fbda:	f002 fb65 	bl	80122a8 <uart_send_string>
 800fbde:	e015      	b.n	800fc0c <thread_SPThread2+0x38>
		if(SPcount==0)
		{
			uart_send_string(UART_User,(void *)"SP个数为0，线程2等待\n");

		}
		rt_sem_take(SP,RT_WAITING_FOREVER); //获取一个信号量
 800fbe0:	4c16      	ldr	r4, [pc, #88]	; (800fc3c <thread_SPThread2+0x68>)
 800fbe2:	f04f 31ff 	mov.w	r1, #4294967295
 800fbe6:	6820      	ldr	r0, [r4, #0]
 800fbe8:	f000 fb35 	bl	8010256 <rt_sem_take>
		SPcount=SP->value;
 800fbec:	6823      	ldr	r3, [r4, #0]
		//uart_send_string(UART_User,(void *)"线程2获取1个SP，SP还剩%d\n");
		userprintf("线程2获取1个SP，SP还剩%d\n",SPcount);
 800fbee:	8b99      	ldrh	r1, [r3, #28]
 800fbf0:	4813      	ldr	r0, [pc, #76]	; (800fc40 <thread_SPThread2+0x6c>)
 800fbf2:	f7ff fa1d 	bl	800f030 <userprintf>
		delay_ms(2000);
 800fbf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fbfa:	f7ff fbbd 	bl	800f378 <rt_thread_delay>
		rt_sem_release(SP);   //释放一个信号量
 800fbfe:	6820      	ldr	r0, [r4, #0]
 800fc00:	f000 fb8f 	bl	8010322 <rt_sem_release>
        uart_send_string(UART_User,(void *)"线程2成功释放1个SP\n");
 800fc04:	490f      	ldr	r1, [pc, #60]	; (800fc44 <thread_SPThread2+0x70>)
 800fc06:	2002      	movs	r0, #2
 800fc08:	f002 fb4e 	bl	80122a8 <uart_send_string>
		delay_ms(1000);
 800fc0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fc10:	f7ff fbb2 	bl	800f378 <rt_thread_delay>
    	SPcount=SP->value;   //获取信号量的值
 800fc14:	4b09      	ldr	r3, [pc, #36]	; (800fc3c <thread_SPThread2+0x68>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	8b9c      	ldrh	r4, [r3, #28]
		userprintf("当前SP为%d\n",SPcount);
 800fc1a:	4621      	mov	r1, r4
 800fc1c:	480a      	ldr	r0, [pc, #40]	; (800fc48 <thread_SPThread2+0x74>)
 800fc1e:	f7ff fa07 	bl	800f030 <userprintf>
		uart_send_string(UART_User,(void *)"线程2请求1个SP\n");
 800fc22:	490a      	ldr	r1, [pc, #40]	; (800fc4c <thread_SPThread2+0x78>)
 800fc24:	2002      	movs	r0, #2
 800fc26:	f002 fb3f 	bl	80122a8 <uart_send_string>
		if(SPcount==0)
 800fc2a:	2c00      	cmp	r4, #0
 800fc2c:	d1d8      	bne.n	800fbe0 <thread_SPThread2+0xc>
			uart_send_string(UART_User,(void *)"SP个数为0，线程2等待\n");
 800fc2e:	4908      	ldr	r1, [pc, #32]	; (800fc50 <thread_SPThread2+0x7c>)
 800fc30:	2002      	movs	r0, #2
 800fc32:	f002 fb39 	bl	80122a8 <uart_send_string>
 800fc36:	e7d3      	b.n	800fbe0 <thread_SPThread2+0xc>
 800fc38:	08013014 	.word	0x08013014
 800fc3c:	20007324 	.word	0x20007324
 800fc40:	0801305c 	.word	0x0801305c
 800fc44:	08013078 	.word	0x08013078
 800fc48:	08013028 	.word	0x08013028
 800fc4c:	08013034 	.word	0x08013034
 800fc50:	08013044 	.word	0x08013044

0800fc54 <rt_object_get_information>:
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
 800fc54:	2300      	movs	r3, #0
 800fc56:	2b06      	cmp	r3, #6
 800fc58:	dc09      	bgt.n	800fc6e <rt_object_get_information+0x1a>
        if (rt_object_container[index].type == type) return &rt_object_container[index];
 800fc5a:	011a      	lsls	r2, r3, #4
 800fc5c:	4905      	ldr	r1, [pc, #20]	; (800fc74 <rt_object_get_information+0x20>)
 800fc5e:	5c8a      	ldrb	r2, [r1, r2]
 800fc60:	4282      	cmp	r2, r0
 800fc62:	d001      	beq.n	800fc68 <rt_object_get_information+0x14>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
 800fc64:	3301      	adds	r3, #1
 800fc66:	e7f6      	b.n	800fc56 <rt_object_get_information+0x2>
        if (rt_object_container[index].type == type) return &rt_object_container[index];
 800fc68:	eb01 1003 	add.w	r0, r1, r3, lsl #4
 800fc6c:	4770      	bx	lr

    return RT_NULL;
 800fc6e:	2000      	movs	r0, #0
}
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	20004010 	.word	0x20004010

0800fc78 <rt_object_init>:
 * @param name the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	460e      	mov	r6, r1
 800fc7e:	4617      	mov	r7, r2
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif

    /* get object information */
    information = rt_object_get_information(type);
 800fc80:	4608      	mov	r0, r1
 800fc82:	f7ff ffe7 	bl	800fc54 <rt_object_get_information>
 800fc86:	4605      	mov	r5, r0
    RT_ASSERT(information != RT_NULL);

    /* check object type to avoid re-initialization */

    /* enter critical */
    rt_enter_critical();
 800fc88:	f002 f8d2 	bl	8011e30 <rt_enter_critical>
//
//        obj = rt_list_entry(node, struct rt_object, list);
//        RT_ASSERT(obj != object);
//    }
    /* leave critical */
    rt_exit_critical();
 800fc8c:	f002 f8dc 	bl	8011e48 <rt_exit_critical>

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
 800fc90:	f066 067f 	orn	r6, r6, #127	; 0x7f
 800fc94:	7226      	strb	r6, [r4, #8]
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
 800fc96:	2208      	movs	r2, #8
 800fc98:	4639      	mov	r1, r7
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f001 fad4 	bl	8011248 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800fca0:	f7fd fdce 	bl	800d840 <rt_hw_interrupt_disable>
    }
    else
#endif
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
 800fca4:	1d2a      	adds	r2, r5, #4
 800fca6:	f104 030c 	add.w	r3, r4, #12
    l->next->prev = n;
 800fcaa:	6869      	ldr	r1, [r5, #4]
 800fcac:	604b      	str	r3, [r1, #4]
    n->next = l->next;
 800fcae:	6869      	ldr	r1, [r5, #4]
 800fcb0:	60e1      	str	r1, [r4, #12]
    l->next = n;
 800fcb2:	606b      	str	r3, [r5, #4]
    n->prev = l;
 800fcb4:	6122      	str	r2, [r4, #16]
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800fcb6:	f7fd fdc7 	bl	800d848 <rt_hw_interrupt_enable>
}
 800fcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fcbc <rt_object_detach>:
 * and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
 800fcbc:	b510      	push	{r4, lr}
 800fcbe:	4604      	mov	r4, r0
    RT_ASSERT(object != RT_NULL);

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	7203      	strb	r3, [r0, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800fcc4:	f7fd fdbc 	bl	800d840 <rt_hw_interrupt_disable>

    /* remove from old list */
    rt_list_remove(&(object->list));
 800fcc8:	f104 030c 	add.w	r3, r4, #12
    n->next->prev = n->prev;
 800fccc:	68e2      	ldr	r2, [r4, #12]
 800fcce:	6921      	ldr	r1, [r4, #16]
 800fcd0:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800fcd2:	6922      	ldr	r2, [r4, #16]
 800fcd4:	68e1      	ldr	r1, [r4, #12]
 800fcd6:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800fcd8:	6123      	str	r3, [r4, #16]
 800fcda:	60e3      	str	r3, [r4, #12]

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800fcdc:	f7fd fdb4 	bl	800d848 <rt_hw_interrupt_enable>
}
 800fce0:	bd10      	pop	{r4, pc}

0800fce2 <rt_object_allocate>:
 * @param name the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
 800fce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce4:	4607      	mov	r7, r0
 800fce6:	460e      	mov	r6, r1
#endif

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get object information */
    information = rt_object_get_information(type);
 800fce8:	f7ff ffb4 	bl	800fc54 <rt_object_get_information>
 800fcec:	4605      	mov	r5, r0
    RT_ASSERT(information != RT_NULL);

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
 800fcee:	68c0      	ldr	r0, [r0, #12]
 800fcf0:	f002 feae 	bl	8012a50 <rt_malloc>
    if (object == RT_NULL)
 800fcf4:	b1d8      	cbz	r0, 800fd2e <rt_object_allocate+0x4c>
 800fcf6:	4604      	mov	r4, r0
        /* no memory can be allocated */
        return RT_NULL;
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
 800fcf8:	68ea      	ldr	r2, [r5, #12]
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	f001 fa4c 	bl	8011198 <rt_memset>

    /* initialize object's parameters */

    /* set object type */
    object->type = type;
 800fd00:	7227      	strb	r7, [r4, #8]

    /* set object flag */
    object->flag = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	7263      	strb	r3, [r4, #9]

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
 800fd06:	2208      	movs	r2, #8
 800fd08:	4631      	mov	r1, r6
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f001 fa9c 	bl	8011248 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800fd10:	f7fd fd96 	bl	800d840 <rt_hw_interrupt_disable>
    }
    else
#endif
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
 800fd14:	1d2a      	adds	r2, r5, #4
 800fd16:	f104 030c 	add.w	r3, r4, #12
    l->next->prev = n;
 800fd1a:	6869      	ldr	r1, [r5, #4]
 800fd1c:	604b      	str	r3, [r1, #4]
    n->next = l->next;
 800fd1e:	6869      	ldr	r1, [r5, #4]
 800fd20:	60e1      	str	r1, [r4, #12]
    l->next = n;
 800fd22:	606b      	str	r3, [r5, #4]
    n->prev = l;
 800fd24:	6122      	str	r2, [r4, #16]
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800fd26:	f7fd fd8f 	bl	800d848 <rt_hw_interrupt_enable>

    /* return object */
    return object;
}
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return RT_NULL;
 800fd2e:	2400      	movs	r4, #0
 800fd30:	e7fb      	b.n	800fd2a <rt_object_allocate+0x48>

0800fd32 <rt_object_delete>:
 * This function will delete an object and release object memory.
 *
 * @param object the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
 800fd32:	b510      	push	{r4, lr}
 800fd34:	4604      	mov	r4, r0
    RT_ASSERT(!(object->type & RT_Object_Class_Static));

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));

    /* reset object type */
    object->type = 0;
 800fd36:	2300      	movs	r3, #0
 800fd38:	7203      	strb	r3, [r0, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
 800fd3a:	f7fd fd81 	bl	800d840 <rt_hw_interrupt_disable>

    /* remove from old list */
    rt_list_remove(&(object->list));
 800fd3e:	f104 030c 	add.w	r3, r4, #12
    n->next->prev = n->prev;
 800fd42:	68e2      	ldr	r2, [r4, #12]
 800fd44:	6921      	ldr	r1, [r4, #16]
 800fd46:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 800fd48:	6922      	ldr	r2, [r4, #16]
 800fd4a:	68e1      	ldr	r1, [r4, #12]
 800fd4c:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 800fd4e:	6123      	str	r3, [r4, #16]
 800fd50:	60e3      	str	r3, [r4, #12]

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
 800fd52:	f7fd fd79 	bl	800d848 <rt_hw_interrupt_enable>

    /* free the memory of object */
    RT_KERNEL_FREE(object);
 800fd56:	4620      	mov	r0, r4
 800fd58:	f002 ff08 	bl	8012b6c <rt_free>
}
 800fd5c:	bd10      	pop	{r4, pc}

0800fd5e <rt_object_is_systemobject>:
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
    /* object check */
    RT_ASSERT(object != RT_NULL);

    if (object->type & RT_Object_Class_Static)
 800fd5e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	db01      	blt.n	800fd6a <rt_object_is_systemobject+0xc>
        return RT_TRUE;

    return RT_FALSE;
 800fd66:	2000      	movs	r0, #0
}
 800fd68:	4770      	bx	lr
        return RT_TRUE;
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	4770      	bx	lr
	...

0800fd70 <main>:
//声明使用到的内部函数
//main.c使用的内部函数声明处
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程，参见书稿）
int main(void)
{
 800fd70:	b508      	push	{r3, lr}
	OS_start(app_init);  //启动RTOS并执行主线程
 800fd72:	4802      	ldr	r0, [pc, #8]	; (800fd7c <main+0xc>)
 800fd74:	f000 f82b 	bl	800fdce <OS_start>
}
 800fd78:	2000      	movs	r0, #0
 800fd7a:	bd08      	pop	{r3, pc}
 800fd7c:	08012469 	.word	0x08012469

0800fd80 <rt_application_init>:
//函数返回：无
//参数说明：无
//功能概要：创建主线程，并将其加入线程就绪列表，等待调度器启动后调度主线程运行
//=========================================================================
void rt_application_init(void (*func)(void))
{
 800fd80:	b500      	push	{lr}
 800fd82:	b083      	sub	sp, #12
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    //（1）创建主线程，并为其分配运行所需资源
    tid = rt_thread_create("main", (void *)func, RT_NULL,
 800fd84:	2314      	movs	r3, #20
 800fd86:	9301      	str	r3, [sp, #4]
 800fd88:	230a      	movs	r3, #10
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd90:	2200      	movs	r2, #0
 800fd92:	4601      	mov	r1, r0
 800fd94:	4803      	ldr	r0, [pc, #12]	; (800fda4 <rt_application_init+0x24>)
 800fd96:	f7ff fa29 	bl	800f1ec <rt_thread_create>

    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif
    //（2）将主线程加入线程就绪列表，等待调度器启动后运行
    rt_thread_startup(tid);
 800fd9a:	f7ff fb15 	bl	800f3c8 <rt_thread_startup>
}
 800fd9e:	b003      	add	sp, #12
 800fda0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fda4:	0801308c 	.word	0x0801308c

0800fda8 <rtthread_startup>:
{
 800fda8:	b510      	push	{r4, lr}
 800fdaa:	4604      	mov	r4, r0
    rt_hw_interrupt_disable(); //关中断
 800fdac:	f7fd fd48 	bl	800d840 <rt_hw_interrupt_disable>
    rt_hw_board_init();
 800fdb0:	f002 f8ae 	bl	8011f10 <rt_hw_board_init>
    rt_system_timer_init();
 800fdb4:	f7ff fe1e 	bl	800f9f4 <rt_system_timer_init>
    rt_system_scheduler_init();
 800fdb8:	f001 ff74 	bl	8011ca4 <rt_system_scheduler_init>
    rt_application_init((void *)func);
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f7ff ffdf 	bl	800fd80 <rt_application_init>
    rt_thread_idle_init();
 800fdc2:	f002 fb31 	bl	8012428 <rt_thread_idle_init>
    rt_system_scheduler_start();
 800fdc6:	f001 ff93 	bl	8011cf0 <rt_system_scheduler_start>
}
 800fdca:	2000      	movs	r0, #0
 800fdcc:	bd10      	pop	{r4, pc}

0800fdce <OS_start>:
{
 800fdce:	b508      	push	{r3, lr}
	rtthread_startup((void *)func);  //启动RTOS并执行主线程app_init
 800fdd0:	f7ff ffea 	bl	800fda8 <rtthread_startup>
}
 800fdd4:	bd08      	pop	{r3, pc}
	...

0800fdd8 <thread_SPThread3>:
//参数说明：无
//功能概要：抢夺信号量
//内部调用：无
//======================================================================
void thread_SPThread3()
{
 800fdd8:	b510      	push	{r4, lr}
    //（1）======申明局部变量===========================================
    int SPcount;      //记录信号量的个数
    uart_send_string(UART_User,(void *)"第一次进入线程3！\n");
 800fdda:	4922      	ldr	r1, [pc, #136]	; (800fe64 <thread_SPThread3+0x8c>)
 800fddc:	2002      	movs	r0, #2
 800fdde:	f002 fa63 	bl	80122a8 <uart_send_string>
	gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 800fde2:	2201      	movs	r2, #1
 800fde4:	4611      	mov	r1, r2
 800fde6:	f240 1007 	movw	r0, #263	; 0x107
 800fdea:	f000 f983 	bl	80100f4 <gpio_init>
 800fdee:	e01d      	b.n	800fe2c <thread_SPThread3+0x54>
		if(SPcount==0)
		{
			uart_send_string(UART_User,(void *)"SP个数为0，线程3等待\n");

		}
		rt_sem_take(SP,RT_WAITING_FOREVER); //获取一个信号量
 800fdf0:	4c1d      	ldr	r4, [pc, #116]	; (800fe68 <thread_SPThread3+0x90>)
 800fdf2:	f04f 31ff 	mov.w	r1, #4294967295
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	f000 fa2d 	bl	8010256 <rt_sem_take>
		SPcount=SP->value;                 //获取信号量的值
 800fdfc:	6823      	ldr	r3, [r4, #0]
		//uart_send_string(UART_User,(void *)"线程3获取1个SP，SP还剩%d\n",SPcount);
		userprintf("线程3获取1个SP，SP还剩%d\n",SPcount);
 800fdfe:	8b99      	ldrh	r1, [r3, #28]
 800fe00:	481a      	ldr	r0, [pc, #104]	; (800fe6c <thread_SPThread3+0x94>)
 800fe02:	f7ff f915 	bl	800f030 <userprintf>
		delay_ms(3000);
 800fe06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800fe0a:	f7ff fab5 	bl	800f378 <rt_thread_delay>
	    uart_send_string(UART_User,(void *)"转换红灯状态\n");
 800fe0e:	4918      	ldr	r1, [pc, #96]	; (800fe70 <thread_SPThread3+0x98>)
 800fe10:	2002      	movs	r0, #2
 800fe12:	f002 fa49 	bl	80122a8 <uart_send_string>
		gpio_reverse(LIGHT_RED);
 800fe16:	f240 1007 	movw	r0, #263	; 0x107
 800fe1a:	f000 f9d7 	bl	80101cc <gpio_reverse>
		rt_sem_release(SP);   //释放一个信号量
 800fe1e:	6820      	ldr	r0, [r4, #0]
 800fe20:	f000 fa7f 	bl	8010322 <rt_sem_release>
		uart_send_string(UART_User,(void *)"线程3成功释放1个SP\n");
 800fe24:	4913      	ldr	r1, [pc, #76]	; (800fe74 <thread_SPThread3+0x9c>)
 800fe26:	2002      	movs	r0, #2
 800fe28:	f002 fa3e 	bl	80122a8 <uart_send_string>
		gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	4611      	mov	r1, r2
 800fe30:	f240 1009 	movw	r0, #265	; 0x109
 800fe34:	f000 f95e 	bl	80100f4 <gpio_init>
    	delay_ms(1000);    //延时1秒
 800fe38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fe3c:	f7ff fa9c 	bl	800f378 <rt_thread_delay>
    	SPcount=SP->value; //获取信号量的值
 800fe40:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <thread_SPThread3+0x90>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	8b9c      	ldrh	r4, [r3, #28]
		userprintf("当前SP个数为%d\n",SPcount);
 800fe46:	4621      	mov	r1, r4
 800fe48:	480b      	ldr	r0, [pc, #44]	; (800fe78 <thread_SPThread3+0xa0>)
 800fe4a:	f7ff f8f1 	bl	800f030 <userprintf>
    	uart_send_string(UART_User,(void *)"线程3请求1个SP\n");
 800fe4e:	490b      	ldr	r1, [pc, #44]	; (800fe7c <thread_SPThread3+0xa4>)
 800fe50:	2002      	movs	r0, #2
 800fe52:	f002 fa29 	bl	80122a8 <uart_send_string>
		if(SPcount==0)
 800fe56:	2c00      	cmp	r4, #0
 800fe58:	d1ca      	bne.n	800fdf0 <thread_SPThread3+0x18>
			uart_send_string(UART_User,(void *)"SP个数为0，线程3等待\n");
 800fe5a:	4909      	ldr	r1, [pc, #36]	; (800fe80 <thread_SPThread3+0xa8>)
 800fe5c:	2002      	movs	r0, #2
 800fe5e:	f002 fa23 	bl	80122a8 <uart_send_string>
 800fe62:	e7c5      	b.n	800fdf0 <thread_SPThread3+0x18>
 800fe64:	08013094 	.word	0x08013094
 800fe68:	20007324 	.word	0x20007324
 800fe6c:	080130e0 	.word	0x080130e0
 800fe70:	080130fc 	.word	0x080130fc
 800fe74:	0801310c 	.word	0x0801310c
 800fe78:	080130a8 	.word	0x080130a8
 800fe7c:	080130b8 	.word	0x080130b8
 800fe80:	080130c8 	.word	0x080130c8

0800fe84 <flash_erase>:
//======================================================================
uint8_t flash_erase(uint16_t sect)
{
	
    //等待之前最后一个flash操作完成
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fe84:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <flash_erase+0x54>)
 800fe86:	691b      	ldr	r3, [r3, #16]
 800fe88:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fe8c:	d1fa      	bne.n	800fe84 <flash_erase>
    //清除之前的编程导致的所有错误标志位
	FLASH->SR &= 0xFFFFFFUL;
 800fe8e:	4b12      	ldr	r3, [pc, #72]	; (800fed8 <flash_erase+0x54>)
 800fe90:	691a      	ldr	r2, [r3, #16]
 800fe92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800fe96:	611a      	str	r2, [r3, #16]
    //清闪存即时编程位
    FLASH->CR &= ~FLASH_CR_PG;
 800fe98:	695a      	ldr	r2, [r3, #20]
 800fe9a:	f022 0201 	bic.w	r2, r2, #1
 800fe9e:	615a      	str	r2, [r3, #20]
    
    //使能扇区擦除
    FLASH->CR |= FLASH_CR_PER;
 800fea0:	695a      	ldr	r2, [r3, #20]
 800fea2:	f042 0202 	orr.w	r2, r2, #2
 800fea6:	615a      	str	r2, [r3, #20]
    //设置擦除的扇区
    FLASH->CR &= ~FLASH_CR_PNB;
 800fea8:	695a      	ldr	r2, [r3, #20]
 800feaa:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 800feae:	615a      	str	r2, [r3, #20]
    FLASH->CR |= (uint32_t)(sect << 3u);
 800feb0:	695a      	ldr	r2, [r3, #20]
 800feb2:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800feb6:	6158      	str	r0, [r3, #20]
    //开始扇区擦除
    FLASH->CR |= FLASH_CR_STRT;
 800feb8:	695a      	ldr	r2, [r3, #20]
 800feba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800febe:	615a      	str	r2, [r3, #20]
    //等待擦除操作完成
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800fec0:	4b05      	ldr	r3, [pc, #20]	; (800fed8 <flash_erase+0x54>)
 800fec2:	691b      	ldr	r3, [r3, #16]
 800fec4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800fec8:	d1fa      	bne.n	800fec0 <flash_erase+0x3c>
    //禁止扇区擦除
    FLASH->CR &= ~FLASH_CR_PER;
 800feca:	4a03      	ldr	r2, [pc, #12]	; (800fed8 <flash_erase+0x54>)
 800fecc:	6953      	ldr	r3, [r2, #20]
 800fece:	f023 0302 	bic.w	r3, r3, #2
 800fed2:	6153      	str	r3, [r2, #20]
    
    return 0;  //成功返回
}
 800fed4:	2000      	movs	r0, #0
 800fed6:	4770      	bx	lr
 800fed8:	40022000 	.word	0x40022000

0800fedc <flash_read_logic>:
//       offset:扇区内部偏移地址（0~2024，要求为0,4,8,12，......）
//       N：读字节数目（4~2048,要求为4,8,12,......）//
//功能概要：读取flash存储器的sect扇区的 offset处开始的N字节，到RAM区dest处
//=======================================================================
void flash_read_logic(uint8_t *dest,uint16_t sect,uint16_t offset,uint16_t N)
{
 800fedc:	b508      	push	{r3, lr}
    uint8_t *src;
    src=(uint8_t *)(FLASH_BASE+sect*FLASH_PAGE_SIZE+offset);
 800fede:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800fee2:	eb02 21c1 	add.w	r1, r2, r1, lsl #11
    memcpy(dest,src,N);
 800fee6:	461a      	mov	r2, r3
 800fee8:	f002 ff5a 	bl	8012da0 <memcpy>
}
 800feec:	bd08      	pop	{r3, pc}

0800feee <flash_read_physical>:
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
 800feee:	b508      	push	{r3, lr}
    uint8_t *src;
    src=(uint8_t *)addr;
    memcpy(dest,src,N);
 800fef0:	f002 ff56 	bl	8012da0 <memcpy>
}
 800fef4:	bd08      	pop	{r3, pc}

0800fef6 <flash_isempty>:
//参数说明：所要探测的flash区域初始地址
//功能概要：flash判空操作
//======================================================================

uint8_t flash_isempty(uint16_t sect,uint16_t N)
{
 800fef6:	b5b0      	push	{r4, r5, r7, lr}
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	460c      	mov	r4, r1
    uint16_t i,flag;
    uint8_t dest[N];
 800fefc:	1dcb      	adds	r3, r1, #7
 800fefe:	08db      	lsrs	r3, r3, #3
 800ff00:	466a      	mov	r2, sp
 800ff02:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800ff06:	469d      	mov	sp, r3
 800ff08:	466d      	mov	r5, sp
    uint8_t *src;
    flag = 1;
    src=(uint8_t *)(FLASH_BASE+sect*FLASH_PAGE_SIZE);
 800ff0a:	f500 3180 	add.w	r1, r0, #65536	; 0x10000
    memcpy(dest,src,N);
 800ff0e:	4622      	mov	r2, r4
 800ff10:	02c9      	lsls	r1, r1, #11
 800ff12:	4668      	mov	r0, sp
 800ff14:	f002 ff44 	bl	8012da0 <memcpy>
    for(i = 0; i<N; i++)   //遍历区域内字节
 800ff18:	2300      	movs	r3, #0
 800ff1a:	42a3      	cmp	r3, r4
 800ff1c:	d205      	bcs.n	800ff2a <flash_isempty+0x34>
    {
        if(dest[i]!=0xff)   //非空
 800ff1e:	5cea      	ldrb	r2, [r5, r3]
 800ff20:	2aff      	cmp	r2, #255	; 0xff
 800ff22:	d105      	bne.n	800ff30 <flash_isempty+0x3a>
    for(i = 0; i<N; i++)   //遍历区域内字节
 800ff24:	3301      	adds	r3, #1
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	e7f7      	b.n	800ff1a <flash_isempty+0x24>
    flag = 1;
 800ff2a:	2001      	movs	r0, #1
            flag=0;
            break;
        }
    }
    return flag;
}
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bdb0      	pop	{r4, r5, r7, pc}
            flag=0;
 800ff30:	2000      	movs	r0, #0
 800ff32:	e7fb      	b.n	800ff2c <flash_isempty+0x36>

0800ff34 <flash_write_DoubleWord>:
//              （例如：0x08000004，Flash首地址为0x08000000）
//       data：写入的双字
//功能概要：Flash双字写入操作（STM32L433每次只能实现双字写入，先写低位字，再写高位字）
//======================================================================
uint8_t flash_write_DoubleWord(uint32_t addr,uint32_t data_l,uint32_t data_h)
{
 800ff34:	b410      	push	{r4}
    //清数据缓冲区
    if((FLASH->ACR & FLASH_ACR_DCEN) != 0U)
 800ff36:	4b0c      	ldr	r3, [pc, #48]	; (800ff68 <flash_write_DoubleWord+0x34>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ff3e:	d004      	beq.n	800ff4a <flash_write_DoubleWord+0x16>
    {
        FLASH->ACR &= ~FLASH_ACR_DCEN;
 800ff40:	4c09      	ldr	r4, [pc, #36]	; (800ff68 <flash_write_DoubleWord+0x34>)
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff48:	6023      	str	r3, [r4, #0]
    }
    
    //使能Flash即时编程
    FLASH->CR |= FLASH_CR_PG;
 800ff4a:	4b07      	ldr	r3, [pc, #28]	; (800ff68 <flash_write_DoubleWord+0x34>)
 800ff4c:	695c      	ldr	r4, [r3, #20]
 800ff4e:	f044 0401 	orr.w	r4, r4, #1
 800ff52:	615c      	str	r4, [r3, #20]
    
    //先写入低位字
    *(__IO uint32_t*)addr = data_l;
 800ff54:	6001      	str	r1, [r0, #0]
    
    //再写入高位字
    *(__IO uint32_t*)(addr+4U) = data_h;
 800ff56:	6042      	str	r2, [r0, #4]
    
    //禁止Flash即时编程
    FLASH->CR &= ~FLASH_CR_PG;
 800ff58:	695a      	ldr	r2, [r3, #20]
 800ff5a:	f022 0201 	bic.w	r2, r2, #1
 800ff5e:	615a      	str	r2, [r3, #20]
    
    return 0;    //返回成功
}
 800ff60:	2000      	movs	r0, #0
 800ff62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff66:	4770      	bx	lr
 800ff68:	40022000 	.word	0x40022000

0800ff6c <flash_Best>:
//			N：待写入数据字节数
//			buf:待写入数据的首地址
//功能概要：首位地址都对齐的情况下的数据写入
//======================================================================
uint8_t flash_Best(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf)
{
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	4617      	mov	r7, r2
 800ff70:	461d      	mov	r5, r3
    uint32_t temp_l,temp_h;
    uint32_t addr;
    uint16_t i;
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800ff72:	4b18      	ldr	r3, [pc, #96]	; (800ffd4 <flash_Best+0x68>)
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ff7a:	d1fa      	bne.n	800ff72 <flash_Best+0x6>
    //计算双字写入绝对地址
    addr = (uint32_t)(FLASH_BASE+sect*FLASH_PAGE_SIZE+offset);
 800ff7c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800ff80:	eb01 26c0 	add.w	r6, r1, r0, lsl #11
    //循环写入双字，每8个数写一次
    for(i = 0; i < N; i+=8)
 800ff84:	2400      	movs	r4, #0
 800ff86:	e01b      	b.n	800ffc0 <flash_Best+0x54>
    {
        //低位字赋值
        temp_l = (uint32_t)((buf[i])|(buf[i+1]<<8)|(buf[i+2]<<16)|(buf[i+3]<<24));
 800ff88:	5d28      	ldrb	r0, [r5, r4]
 800ff8a:	192b      	adds	r3, r5, r4
 800ff8c:	7859      	ldrb	r1, [r3, #1]
 800ff8e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800ff92:	7899      	ldrb	r1, [r3, #2]
 800ff94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800ff98:	78d9      	ldrb	r1, [r3, #3]
        //高位字赋值
        temp_h = (uint32_t)((buf[i+4])|(buf[i+5]<<8)|(buf[i+6]<<16)|(buf[i+7]<<24));
 800ff9a:	791a      	ldrb	r2, [r3, #4]
 800ff9c:	f893 c005 	ldrb.w	ip, [r3, #5]
 800ffa0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800ffa4:	f893 c006 	ldrb.w	ip, [r3, #6]
 800ffa8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800ffac:	79db      	ldrb	r3, [r3, #7]
        //在绝对地址(addr+i)，实现双字写入
        flash_write_DoubleWord((addr+i),temp_l,temp_h);
 800ffae:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800ffb2:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 800ffb6:	19a0      	adds	r0, r4, r6
 800ffb8:	f7ff ffbc 	bl	800ff34 <flash_write_DoubleWord>
    for(i = 0; i < N; i+=8)
 800ffbc:	3408      	adds	r4, #8
 800ffbe:	b2a4      	uxth	r4, r4
 800ffc0:	42bc      	cmp	r4, r7
 800ffc2:	d3e1      	bcc.n	800ff88 <flash_Best+0x1c>
    }
    while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 800ffc4:	4b03      	ldr	r3, [pc, #12]	; (800ffd4 <flash_Best+0x68>)
 800ffc6:	691b      	ldr	r3, [r3, #16]
 800ffc8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ffcc:	d1fa      	bne.n	800ffc4 <flash_Best+0x58>
    return 0;
}
 800ffce:	2000      	movs	r0, #0
 800ffd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	40022000 	.word	0x40022000

0800ffd8 <flash_write>:
{
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
 800ffe0:	4607      	mov	r7, r0
 800ffe2:	4614      	mov	r4, r2
 800ffe4:	461d      	mov	r5, r3
	FLASH->SR &= 0xFFFFFFUL;
 800ffe6:	4a22      	ldr	r2, [pc, #136]	; (8010070 <flash_write+0x98>)
 800ffe8:	6913      	ldr	r3, [r2, #16]
 800ffea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ffee:	6113      	str	r3, [r2, #16]
    if(offset+N>MCU_SECTORSIZE)
 800fff0:	1863      	adds	r3, r4, r1
 800fff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fff6:	dc09      	bgt.n	801000c <flash_write+0x34>
 800fff8:	460e      	mov	r6, r1
        flash_read_logic(data,sect,0,MCU_SECTORSIZE); //将当前扇区的全部值读入数组中
 800fffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fffe:	2200      	movs	r2, #0
 8010000:	4601      	mov	r1, r0
 8010002:	4668      	mov	r0, sp
 8010004:	f7ff ff6a 	bl	800fedc <flash_read_logic>
        for(i = 0;i<N;i++)
 8010008:	2300      	movs	r3, #0
 801000a:	e01b      	b.n	8010044 <flash_write+0x6c>
 801000c:	4688      	mov	r8, r1
        flash_write(sect,offset,MCU_SECTORSIZE-offset,buf);
 801000e:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
 8010012:	462b      	mov	r3, r5
 8010014:	b292      	uxth	r2, r2
 8010016:	f7ff ffdf 	bl	800ffd8 <flash_write>
        flash_write(sect+1,0,N-(MCU_SECTORSIZE-offset),buf+(MCU_SECTORSIZE-offset));
 801001a:	eb08 0204 	add.w	r2, r8, r4
 801001e:	b292      	uxth	r2, r2
 8010020:	f5c8 6300 	rsb	r3, r8, #2048	; 0x800
 8010024:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8010028:	1c78      	adds	r0, r7, #1
 801002a:	442b      	add	r3, r5
 801002c:	b292      	uxth	r2, r2
 801002e:	2100      	movs	r1, #0
 8010030:	b280      	uxth	r0, r0
 8010032:	f7ff ffd1 	bl	800ffd8 <flash_write>
 8010036:	e011      	b.n	801005c <flash_write+0x84>
            data[offset+i] = buf[i];
 8010038:	199a      	adds	r2, r3, r6
 801003a:	5ce9      	ldrb	r1, [r5, r3]
 801003c:	f80d 1002 	strb.w	r1, [sp, r2]
        for(i = 0;i<N;i++)
 8010040:	3301      	adds	r3, #1
 8010042:	b29b      	uxth	r3, r3
 8010044:	42a3      	cmp	r3, r4
 8010046:	d3f7      	bcc.n	8010038 <flash_write+0x60>
        flash_erase(sect);
 8010048:	4638      	mov	r0, r7
 801004a:	f7ff ff1b 	bl	800fe84 <flash_erase>
        flash_Best(sect,0,MCU_SECTORSIZE,data);
 801004e:	466b      	mov	r3, sp
 8010050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010054:	2100      	movs	r1, #0
 8010056:	4638      	mov	r0, r7
 8010058:	f7ff ff88 	bl	800ff6c <flash_Best>
	while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 801005c:	4b04      	ldr	r3, [pc, #16]	; (8010070 <flash_write+0x98>)
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010064:	d1fa      	bne.n	801005c <flash_write+0x84>
}
 8010066:	2000      	movs	r0, #0
 8010068:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 801006c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010070:	40022000 	.word	0x40022000

08010074 <flash_write_physical>:
{
 8010074:	b510      	push	{r4, lr}
 8010076:	4603      	mov	r3, r0
    sect = (addr-MCU_FLASH_ADDR_START)/MCU_SECTORSIZE;
 8010078:	f3c0 20cf 	ubfx	r0, r0, #11, #16
    offset = addr-(sect*MCU_SECTORSIZE)-MCU_FLASH_ADDR_START;
 801007c:	b29b      	uxth	r3, r3
 801007e:	02c4      	lsls	r4, r0, #11
 8010080:	b2a4      	uxth	r4, r4
 8010082:	1b1c      	subs	r4, r3, r4
    flash_write(sect,offset,N,buf);
 8010084:	4613      	mov	r3, r2
 8010086:	460a      	mov	r2, r1
 8010088:	b2a1      	uxth	r1, r4
 801008a:	f7ff ffa5 	bl	800ffd8 <flash_write>
	while( (FLASH->SR & FLASH_SR_BSY) != 0U);
 801008e:	4b03      	ldr	r3, [pc, #12]	; (801009c <flash_write_physical+0x28>)
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010096:	d1fa      	bne.n	801008e <flash_write_physical+0x1a>
}
 8010098:	2000      	movs	r0, #0
 801009a:	bd10      	pop	{r4, pc}
 801009c:	40022000 	.word	0x40022000

080100a0 <gpio_get_port_pin>:
//功能概要：将传进参数port_pin进行解析，得出具体端口号与引脚号，分别赋值给port与pin,返回。
//       （例：(PTB_NUM)|(9)解析为PORTB与9，并将其分别赋值给port与pin）。
//=====================================================================
void gpio_get_port_pin(uint16_t port_pin,uint8_t* port,uint8_t* pin)
{
	*port = (port_pin>>8);
 80100a0:	0a03      	lsrs	r3, r0, #8
 80100a2:	700b      	strb	r3, [r1, #0]
	*pin = port_pin;
 80100a4:	7010      	strb	r0, [r2, #0]
}
 80100a6:	4770      	bx	lr

080100a8 <gpio_set>:
{
 80100a8:	b510      	push	{r4, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	460c      	mov	r4, r1
	gpio_get_port_pin(port_pin,&port,&pin);
 80100ae:	f10d 0206 	add.w	r2, sp, #6
 80100b2:	f10d 0107 	add.w	r1, sp, #7
 80100b6:	f7ff fff3 	bl	80100a0 <gpio_get_port_pin>
	if(7 == port) //GPIOH
 80100ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80100be:	2b07      	cmp	r3, #7
 80100c0:	d00b      	beq.n	80100da <gpio_set+0x32>
		gpio_ptr = GPIO_ARR[port];
 80100c2:	4a0b      	ldr	r2, [pc, #44]	; (80100f0 <gpio_set+0x48>)
 80100c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	if(1 == state)    //高电平(该引脚对应置位寄存器置1)
 80100c8:	2c01      	cmp	r4, #1
 80100ca:	d00b      	beq.n	80100e4 <gpio_set+0x3c>
		gpio_ptr->BRR = (uint32_t)(1u<<pin);
 80100cc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80100d0:	2301      	movs	r3, #1
 80100d2:	408b      	lsls	r3, r1
 80100d4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80100d6:	b002      	add	sp, #8
 80100d8:	bd10      	pop	{r4, pc}
		gpio_ptr = GPIO_ARR[port-2];
 80100da:	3b02      	subs	r3, #2
 80100dc:	4a04      	ldr	r2, [pc, #16]	; (80100f0 <gpio_set+0x48>)
 80100de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80100e2:	e7f1      	b.n	80100c8 <gpio_set+0x20>
		gpio_ptr->BSRR = (uint32_t)(1u<<pin);
 80100e4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80100e8:	2301      	movs	r3, #1
 80100ea:	408b      	lsls	r3, r1
 80100ec:	6193      	str	r3, [r2, #24]
 80100ee:	e7f2      	b.n	80100d6 <gpio_set+0x2e>
 80100f0:	20004080 	.word	0x20004080

080100f4 <gpio_init>:
{
 80100f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100f6:	b083      	sub	sp, #12
 80100f8:	4605      	mov	r5, r0
 80100fa:	460c      	mov	r4, r1
 80100fc:	4616      	mov	r6, r2
	gpio_get_port_pin(port_pin,&port,&pin);
 80100fe:	f10d 0206 	add.w	r2, sp, #6
 8010102:	f10d 0107 	add.w	r1, sp, #7
 8010106:	f7ff ffcb 	bl	80100a0 <gpio_get_port_pin>
	if(7 == port) //GPIOH
 801010a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801010e:	2907      	cmp	r1, #7
 8010110:	d015      	beq.n	801013e <gpio_init+0x4a>
		gpio_ptr = GPIO_ARR[port];
 8010112:	4b12      	ldr	r3, [pc, #72]	; (801015c <gpio_init+0x68>)
 8010114:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN<<(port * 1u));
 8010118:	4f11      	ldr	r7, [pc, #68]	; (8010160 <gpio_init+0x6c>)
 801011a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801011c:	2201      	movs	r2, #1
 801011e:	408a      	lsls	r2, r1
 8010120:	4313      	orrs	r3, r2
 8010122:	64fb      	str	r3, [r7, #76]	; 0x4c
	temp = gpio_ptr->MODER;
 8010124:	6801      	ldr	r1, [r0, #0]
	temp &= ~(GPIO_MODER_MODE0 << (pin * 2u));
 8010126:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801012a:	005b      	lsls	r3, r3, #1
 801012c:	2203      	movs	r2, #3
 801012e:	409a      	lsls	r2, r3
 8010130:	ea21 0202 	bic.w	r2, r1, r2
	if(dir == 1)  //定义为输出引脚
 8010134:	2c01      	cmp	r4, #1
 8010136:	d007      	beq.n	8010148 <gpio_init+0x54>
		gpio_ptr->MODER = temp;
 8010138:	6002      	str	r2, [r0, #0]
}
 801013a:	b003      	add	sp, #12
 801013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_ptr = GPIO_ARR[port-2];
 801013e:	1e8b      	subs	r3, r1, #2
 8010140:	4a06      	ldr	r2, [pc, #24]	; (801015c <gpio_init+0x68>)
 8010142:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010146:	e7e7      	b.n	8010118 <gpio_init+0x24>
		temp |= (GPIO_OUTPUT << (pin * 2u));
 8010148:	2101      	movs	r1, #1
 801014a:	fa01 f303 	lsl.w	r3, r1, r3
 801014e:	431a      	orrs	r2, r3
		gpio_ptr->MODER = temp;
 8010150:	6002      	str	r2, [r0, #0]
		gpio_set(port_pin,state);    //调用gpio_set函数，设定引脚初始状态
 8010152:	4631      	mov	r1, r6
 8010154:	4628      	mov	r0, r5
 8010156:	f7ff ffa7 	bl	80100a8 <gpio_set>
 801015a:	e7ee      	b.n	801013a <gpio_init+0x46>
 801015c:	20004080 	.word	0x20004080
 8010160:	40021000 	.word	0x40021000

08010164 <gpio_get>:
{
 8010164:	b510      	push	{r4, lr}
 8010166:	b082      	sub	sp, #8
	gpio_get_port_pin(port_pin,&port,&pin);
 8010168:	f10d 0206 	add.w	r2, sp, #6
 801016c:	f10d 0107 	add.w	r1, sp, #7
 8010170:	f7ff ff96 	bl	80100a0 <gpio_get_port_pin>
	if(7 == port) //GPIOH
 8010174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010178:	2b07      	cmp	r3, #7
 801017a:	d015      	beq.n	80101a8 <gpio_get+0x44>
		gpio_ptr = GPIO_ARR[port];
 801017c:	4a12      	ldr	r2, [pc, #72]	; (80101c8 <gpio_get+0x64>)
 801017e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	temp = gpio_ptr->MODER;
 8010182:	680c      	ldr	r4, [r1, #0]
	if( (temp & (2u<<(pin*2)))>>(pin*2) == 1u )//GPIO输出
 8010184:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010188:	0050      	lsls	r0, r2, #1
 801018a:	2302      	movs	r3, #2
 801018c:	4083      	lsls	r3, r0
 801018e:	4023      	ands	r3, r4
 8010190:	40c3      	lsrs	r3, r0
 8010192:	2b01      	cmp	r3, #1
 8010194:	d00d      	beq.n	80101b2 <gpio_get+0x4e>
		temp = gpio_ptr->IDR;
 8010196:	6909      	ldr	r1, [r1, #16]
		if((temp & (1u<<pin)) != 0x00u)
 8010198:	2301      	movs	r3, #1
 801019a:	fa03 f202 	lsl.w	r2, r3, r2
 801019e:	420a      	tst	r2, r1
 80101a0:	d10e      	bne.n	80101c0 <gpio_get+0x5c>
			value = 0;
 80101a2:	2000      	movs	r0, #0
}
 80101a4:	b002      	add	sp, #8
 80101a6:	bd10      	pop	{r4, pc}
		gpio_ptr = GPIO_ARR[port-2];
 80101a8:	3b02      	subs	r3, #2
 80101aa:	4a07      	ldr	r2, [pc, #28]	; (80101c8 <gpio_get+0x64>)
 80101ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80101b0:	e7e7      	b.n	8010182 <gpio_get+0x1e>
		temp = gpio_ptr->ODR;
 80101b2:	6949      	ldr	r1, [r1, #20]
		if((temp & (1u<<pin)) != 0x00u)
 80101b4:	fa03 f202 	lsl.w	r2, r3, r2
 80101b8:	420a      	tst	r2, r1
 80101ba:	d003      	beq.n	80101c4 <gpio_get+0x60>
			value = 1;
 80101bc:	4618      	mov	r0, r3
 80101be:	e7f1      	b.n	80101a4 <gpio_get+0x40>
			value = 1;
 80101c0:	4618      	mov	r0, r3
 80101c2:	e7ef      	b.n	80101a4 <gpio_get+0x40>
			value = 0;
 80101c4:	2000      	movs	r0, #0
 80101c6:	e7ed      	b.n	80101a4 <gpio_get+0x40>
 80101c8:	20004080 	.word	0x20004080

080101cc <gpio_reverse>:
{
 80101cc:	b500      	push	{lr}
 80101ce:	b083      	sub	sp, #12
	gpio_get_port_pin(port_pin,&port,&pin);
 80101d0:	f10d 0206 	add.w	r2, sp, #6
 80101d4:	f10d 0107 	add.w	r1, sp, #7
 80101d8:	f7ff ff62 	bl	80100a0 <gpio_get_port_pin>
	if(7 == port) //GPIOH
 80101dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101e0:	2b07      	cmp	r3, #7
 80101e2:	d00d      	beq.n	8010200 <gpio_reverse+0x34>
		gpio_ptr = GPIO_ARR[port];
 80101e4:	4a0a      	ldr	r2, [pc, #40]	; (8010210 <gpio_reverse+0x44>)
 80101e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	if ((gpio_ptr->ODR & (1u<<pin)) != 0x00u)
 80101ea:	6951      	ldr	r1, [r2, #20]
 80101ec:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80101f0:	2301      	movs	r3, #1
 80101f2:	4083      	lsls	r3, r0
 80101f4:	4219      	tst	r1, r3
 80101f6:	d108      	bne.n	801020a <gpio_reverse+0x3e>
		gpio_ptr->BSRR = (uint32_t)(1u<<pin);
 80101f8:	6193      	str	r3, [r2, #24]
}
 80101fa:	b003      	add	sp, #12
 80101fc:	f85d fb04 	ldr.w	pc, [sp], #4
		gpio_ptr = GPIO_ARR[port-2];
 8010200:	3b02      	subs	r3, #2
 8010202:	4a03      	ldr	r2, [pc, #12]	; (8010210 <gpio_reverse+0x44>)
 8010204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010208:	e7ef      	b.n	80101ea <gpio_reverse+0x1e>
		gpio_ptr->BRR = (uint32_t)(1u<<pin);
 801020a:	6293      	str	r3, [r2, #40]	; 0x28
 801020c:	e7f5      	b.n	80101fa <gpio_reverse+0x2e>
 801020e:	bf00      	nop
 8010210:	20004080 	.word	0x20004080

08010214 <rt_sem_init>:
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
 8010214:	b570      	push	{r4, r5, r6, lr}
 8010216:	4604      	mov	r4, r0
 8010218:	4616      	mov	r6, r2
 801021a:	461d      	mov	r5, r3
    RT_ASSERT(sem != RT_NULL);
    RT_ASSERT(value < 0x10000U);

    /* init object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
 801021c:	460a      	mov	r2, r1
 801021e:	2102      	movs	r1, #2
 8010220:	f7ff fd2a 	bl	800fc78 <rt_object_init>
    rt_list_init(&(ipc->suspend_thread));
 8010224:	f104 0314 	add.w	r3, r4, #20
    l->next = l->prev = l;
 8010228:	61a3      	str	r3, [r4, #24]
 801022a:	6163      	str	r3, [r4, #20]

    /* init ipc object */
    rt_ipc_object_init(&(sem->parent));

    /* set init value */
    sem->value = (rt_uint16_t)value;
 801022c:	83a6      	strh	r6, [r4, #28]

    /* set parent */
    sem->parent.parent.flag = flag;
 801022e:	7265      	strb	r5, [r4, #9]

    return RT_EOK;
}
 8010230:	2000      	movs	r0, #0
 8010232:	bd70      	pop	{r4, r5, r6, pc}

08010234 <rt_sem_create>:
 * @return the created semaphore, RT_NULL on error happen
 *
 * @see rt_sem_init
 */
rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	460d      	mov	r5, r1
 8010238:	4614      	mov	r4, r2

    RT_DEBUG_NOT_IN_INTERRUPT;
    RT_ASSERT(value < 0x10000U);

    /* allocate object */
    sem = (rt_sem_t)rt_object_allocate(RT_Object_Class_Semaphore, name);
 801023a:	4601      	mov	r1, r0
 801023c:	2002      	movs	r0, #2
 801023e:	f7ff fd50 	bl	800fce2 <rt_object_allocate>
    if (sem == RT_NULL)
 8010242:	4603      	mov	r3, r0
 8010244:	b128      	cbz	r0, 8010252 <rt_sem_create+0x1e>
    rt_list_init(&(ipc->suspend_thread));
 8010246:	f100 0214 	add.w	r2, r0, #20
 801024a:	6182      	str	r2, [r0, #24]
 801024c:	6142      	str	r2, [r0, #20]

    /* init ipc object */
    rt_ipc_object_init(&(sem->parent));

    /* set init value */
    sem->value = value;
 801024e:	8385      	strh	r5, [r0, #28]

    /* set parent */
    sem->parent.parent.flag = flag;
 8010250:	7244      	strb	r4, [r0, #9]

    return sem;
}
 8010252:	4618      	mov	r0, r3
 8010254:	bd38      	pop	{r3, r4, r5, pc}

08010256 <rt_sem_take>:
 * @param time the waiting time
 *
 * @return the error code
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
 8010256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	4605      	mov	r5, r0
 801025e:	9101      	str	r1, [sp, #4]
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010260:	f7fd faee 	bl	800d840 <rt_hw_interrupt_disable>
 8010264:	4607      	mov	r7, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
 8010266:	8bab      	ldrh	r3, [r5, #28]
 8010268:	b9f3      	cbnz	r3, 80102a8 <rt_sem_take+0x52>
        rt_hw_interrupt_enable(temp);
    }
    else
    {
        /* no waiting, return with timeout */
        if (time == 0)
 801026a:	9b01      	ldr	r3, [sp, #4]
 801026c:	b313      	cbz	r3, 80102b4 <rt_sem_take+0x5e>
            /* current context checking */
            RT_DEBUG_IN_THREAD_CONTEXT;

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
 801026e:	f7fe ff8b 	bl	800f188 <rt_thread_self>
 8010272:	4604      	mov	r4, r0

            /* reset thread error number */
            thread->error = RT_EOK;
 8010274:	2300      	movs	r3, #0
 8010276:	6303      	str	r3, [r0, #48]	; 0x30

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            rt_ipc_list_suspend(&(sem->parent.suspend_thread),
 8010278:	f105 0614 	add.w	r6, r5, #20
 801027c:	f895 8009 	ldrb.w	r8, [r5, #9]
    rt_thread_suspend(thread);
 8010280:	f7ff f830 	bl	800f2e4 <rt_thread_suspend>
    switch (flag)
 8010284:	f1b8 0f00 	cmp.w	r8, #0
 8010288:	d019      	beq.n	80102be <rt_sem_take+0x68>
 801028a:	f1b8 0f01 	cmp.w	r8, #1
 801028e:	d01f      	beq.n	80102d0 <rt_sem_take+0x7a>
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (time > 0)
 8010290:	9b01      	ldr	r3, [sp, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	dc3a      	bgt.n	801030c <rt_sem_take+0xb6>
                                 &time);
                rt_timer_start(&(thread->thread_timer));
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
 8010296:	4638      	mov	r0, r7
 8010298:	f7fd fad6 	bl	800d848 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
 801029c:	f001 fd40 	bl	8011d20 <rt_schedule>

            if (thread->error != RT_EOK)
 80102a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));

    return RT_EOK;
}
 80102a2:	b002      	add	sp, #8
 80102a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sem->value --;
 80102a8:	3b01      	subs	r3, #1
 80102aa:	83ab      	strh	r3, [r5, #28]
        rt_hw_interrupt_enable(temp);
 80102ac:	f7fd facc 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 80102b0:	2000      	movs	r0, #0
 80102b2:	e7f6      	b.n	80102a2 <rt_sem_take+0x4c>
            rt_hw_interrupt_enable(temp);
 80102b4:	f7fd fac8 	bl	800d848 <rt_hw_interrupt_enable>
            return -RT_ETIMEOUT;
 80102b8:	f06f 0001 	mvn.w	r0, #1
 80102bc:	e7f1      	b.n	80102a2 <rt_sem_take+0x4c>
        rt_list_insert_before(list, &(thread->tlist));
 80102be:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 80102c2:	6872      	ldr	r2, [r6, #4]
 80102c4:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 80102c6:	6872      	ldr	r2, [r6, #4]
 80102c8:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 80102ca:	6073      	str	r3, [r6, #4]
    n->next = l;
 80102cc:	6166      	str	r6, [r4, #20]
 80102ce:	e7df      	b.n	8010290 <rt_sem_take+0x3a>
            for (n = list->next; n != list; n = n->next)
 80102d0:	696b      	ldr	r3, [r5, #20]
 80102d2:	429e      	cmp	r6, r3
 80102d4:	d00f      	beq.n	80102f6 <rt_sem_take+0xa0>
                if (thread->current_priority < sthread->current_priority)
 80102d6:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80102da:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80102de:	4291      	cmp	r1, r2
 80102e0:	d301      	bcc.n	80102e6 <rt_sem_take+0x90>
            for (n = list->next; n != list; n = n->next)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	e7f5      	b.n	80102d2 <rt_sem_take+0x7c>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 80102e6:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 80102ea:	6859      	ldr	r1, [r3, #4]
 80102ec:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 80102ee:	6859      	ldr	r1, [r3, #4]
 80102f0:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 80102f2:	605a      	str	r2, [r3, #4]
    n->next = l;
 80102f4:	6163      	str	r3, [r4, #20]
            if (n == list)
 80102f6:	429e      	cmp	r6, r3
 80102f8:	d1ca      	bne.n	8010290 <rt_sem_take+0x3a>
                rt_list_insert_before(list, &(thread->tlist));
 80102fa:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 80102fe:	6872      	ldr	r2, [r6, #4]
 8010300:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 8010302:	6872      	ldr	r2, [r6, #4]
 8010304:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 8010306:	6073      	str	r3, [r6, #4]
    n->next = l;
 8010308:	6166      	str	r6, [r4, #20]
 801030a:	e7c1      	b.n	8010290 <rt_sem_take+0x3a>
                rt_timer_control(&(thread->thread_timer),
 801030c:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 8010310:	aa01      	add	r2, sp, #4
 8010312:	2100      	movs	r1, #0
 8010314:	4628      	mov	r0, r5
 8010316:	f7ff fb07 	bl	800f928 <rt_timer_control>
                rt_timer_start(&(thread->thread_timer));
 801031a:	4628      	mov	r0, r5
 801031c:	f7ff fa80 	bl	800f820 <rt_timer_start>
 8010320:	e7b9      	b.n	8010296 <rt_sem_take+0x40>

08010322 <rt_sem_release>:
 * @param sem the semaphore object
 *
 * @return the error code
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
 8010322:	b538      	push	{r3, r4, r5, lr}
 8010324:	4604      	mov	r4, r0
    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));

    need_schedule = RT_FALSE;

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010326:	f7fd fa8b 	bl	800d840 <rt_hw_interrupt_disable>
 801032a:	4605      	mov	r5, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
 801032c:	f104 0314 	add.w	r3, r4, #20
    return l->next == l;
 8010330:	6960      	ldr	r0, [r4, #20]
 8010332:	4283      	cmp	r3, r0
 8010334:	d009      	beq.n	801034a <rt_sem_release+0x28>
    rt_thread_resume(thread);
 8010336:	3814      	subs	r0, #20
 8010338:	f7ff f822 	bl	800f380 <rt_thread_resume>
    {
        /* resume the suspended thread */
        rt_ipc_list_resume(&(sem->parent.suspend_thread));
        need_schedule = RT_TRUE;
 801033c:	2401      	movs	r4, #1
    }
    else
        sem->value ++; /* increase value */

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 801033e:	4628      	mov	r0, r5
 8010340:	f7fd fa82 	bl	800d848 <rt_hw_interrupt_enable>

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
 8010344:	b934      	cbnz	r4, 8010354 <rt_sem_release+0x32>
        rt_schedule();

    return RT_EOK;
}
 8010346:	2000      	movs	r0, #0
 8010348:	bd38      	pop	{r3, r4, r5, pc}
        sem->value ++; /* increase value */
 801034a:	8ba3      	ldrh	r3, [r4, #28]
 801034c:	3301      	adds	r3, #1
 801034e:	83a3      	strh	r3, [r4, #28]
    need_schedule = RT_FALSE;
 8010350:	2400      	movs	r4, #0
 8010352:	e7f4      	b.n	801033e <rt_sem_release+0x1c>
        rt_schedule();
 8010354:	f001 fce4 	bl	8011d20 <rt_schedule>
 8010358:	e7f5      	b.n	8010346 <rt_sem_release+0x24>

0801035a <rt_mutex_create>:
 * @return the created mutex, RT_NULL on error happen
 *
 * @see rt_mutex_init
 */
rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
 801035a:	b510      	push	{r4, lr}
 801035c:	460c      	mov	r4, r1
    struct rt_mutex *mutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* allocate object */
    mutex = (rt_mutex_t)rt_object_allocate(RT_Object_Class_Mutex, name);
 801035e:	4601      	mov	r1, r0
 8010360:	2003      	movs	r0, #3
 8010362:	f7ff fcbe 	bl	800fce2 <rt_object_allocate>
    if (mutex == RT_NULL)
 8010366:	4603      	mov	r3, r0
 8010368:	b158      	cbz	r0, 8010382 <rt_mutex_create+0x28>
    rt_list_init(&(ipc->suspend_thread));
 801036a:	f100 0214 	add.w	r2, r0, #20
    l->next = l->prev = l;
 801036e:	6182      	str	r2, [r0, #24]
 8010370:	6142      	str	r2, [r0, #20]
        return mutex;

    /* init ipc object */
    rt_ipc_object_init(&(mutex->parent));

    mutex->value              = 1;
 8010372:	2201      	movs	r2, #1
 8010374:	8382      	strh	r2, [r0, #28]
    mutex->owner              = RT_NULL;
 8010376:	2200      	movs	r2, #0
 8010378:	6202      	str	r2, [r0, #32]
    mutex->original_priority  = 0xFF;
 801037a:	21ff      	movs	r1, #255	; 0xff
 801037c:	7781      	strb	r1, [r0, #30]
    mutex->hold               = 0;
 801037e:	77c2      	strb	r2, [r0, #31]

    /* set flag */
    mutex->parent.parent.flag = flag;
 8010380:	7244      	strb	r4, [r0, #9]

    return mutex;
}
 8010382:	4618      	mov	r0, r3
 8010384:	bd10      	pop	{r4, pc}

08010386 <rt_mutex_take>:
 * @param time the waiting time
 *
 * @return the error code
 */
rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
 8010386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	4606      	mov	r6, r0
 801038e:	9101      	str	r1, [sp, #4]
    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);

    /* get current thread */
    thread = rt_thread_self();
 8010390:	f7fe fefa 	bl	800f188 <rt_thread_self>
 8010394:	4604      	mov	r4, r0

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010396:	f7fd fa53 	bl	800d840 <rt_hw_interrupt_disable>
 801039a:	4680      	mov	r8, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    /* reset thread error */
    thread->error = RT_EOK;
 801039c:	2300      	movs	r3, #0
 801039e:	6323      	str	r3, [r4, #48]	; 0x30

    if (mutex->owner == thread)
 80103a0:	6a33      	ldr	r3, [r6, #32]
 80103a2:	42a3      	cmp	r3, r4
 80103a4:	d137      	bne.n	8010416 <rt_mutex_take+0x90>
    {
        /* it's the same thread */
        mutex->hold ++;
 80103a6:	7ff3      	ldrb	r3, [r6, #31]
 80103a8:	3301      	adds	r3, #1
 80103aa:	77f3      	strb	r3, [r6, #31]
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 80103ac:	4640      	mov	r0, r8
 80103ae:	f7fd fa4b 	bl	800d848 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));

    return RT_EOK;
 80103b2:	2000      	movs	r0, #0
}
 80103b4:	b002      	add	sp, #8
 80103b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mutex->value --;
 80103ba:	3b01      	subs	r3, #1
 80103bc:	83b3      	strh	r3, [r6, #28]
            mutex->owner             = thread;
 80103be:	6234      	str	r4, [r6, #32]
            mutex->original_priority = thread->current_priority;
 80103c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80103c4:	77b3      	strb	r3, [r6, #30]
            mutex->hold ++;
 80103c6:	7ff3      	ldrb	r3, [r6, #31]
 80103c8:	3301      	adds	r3, #1
 80103ca:	77f3      	strb	r3, [r6, #31]
 80103cc:	e7ee      	b.n	80103ac <rt_mutex_take+0x26>
                thread->error = -RT_ETIMEOUT;
 80103ce:	f06f 0501 	mvn.w	r5, #1
 80103d2:	6325      	str	r5, [r4, #48]	; 0x30
                rt_hw_interrupt_enable(temp);
 80103d4:	4640      	mov	r0, r8
 80103d6:	f7fd fa37 	bl	800d848 <rt_hw_interrupt_enable>
                return -RT_ETIMEOUT;
 80103da:	4628      	mov	r0, r5
 80103dc:	e7ea      	b.n	80103b4 <rt_mutex_take+0x2e>
                    rt_thread_control(mutex->owner,
 80103de:	f104 0235 	add.w	r2, r4, #53	; 0x35
 80103e2:	2102      	movs	r1, #2
 80103e4:	f7ff f804 	bl	800f3f0 <rt_thread_control>
 80103e8:	e022      	b.n	8010430 <rt_mutex_take+0xaa>
        rt_list_insert_before(list, &(thread->tlist));
 80103ea:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 80103ee:	686a      	ldr	r2, [r5, #4]
 80103f0:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 80103f2:	686a      	ldr	r2, [r5, #4]
 80103f4:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 80103f6:	606b      	str	r3, [r5, #4]
    n->next = l;
 80103f8:	6165      	str	r5, [r4, #20]
                if (time > 0)
 80103fa:	9b01      	ldr	r3, [sp, #4]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	dc3f      	bgt.n	8010480 <rt_mutex_take+0xfa>
                rt_hw_interrupt_enable(temp);
 8010400:	4640      	mov	r0, r8
 8010402:	f7fd fa21 	bl	800d848 <rt_hw_interrupt_enable>
                rt_schedule();
 8010406:	f001 fc8b 	bl	8011d20 <rt_schedule>
                if (thread->error != RT_EOK)
 801040a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801040c:	2800      	cmp	r0, #0
 801040e:	d042      	beq.n	8010496 <rt_mutex_take+0x110>
                    if (thread->error == -RT_EINTR) goto __again;
 8010410:	f110 0f09 	cmn.w	r0, #9
 8010414:	d1ce      	bne.n	80103b4 <rt_mutex_take+0x2e>
        if (mutex->value > 0)
 8010416:	8bb3      	ldrh	r3, [r6, #28]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1ce      	bne.n	80103ba <rt_mutex_take+0x34>
            if (time == 0)
 801041c:	9b01      	ldr	r3, [sp, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d0d5      	beq.n	80103ce <rt_mutex_take+0x48>
                if (thread->current_priority < mutex->owner->current_priority)
 8010422:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8010426:	6a30      	ldr	r0, [r6, #32]
 8010428:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801042c:	429a      	cmp	r2, r3
 801042e:	d3d6      	bcc.n	80103de <rt_mutex_take+0x58>
                rt_ipc_list_suspend(&(mutex->parent.suspend_thread),
 8010430:	f106 0514 	add.w	r5, r6, #20
 8010434:	7a77      	ldrb	r7, [r6, #9]
    rt_thread_suspend(thread);
 8010436:	4620      	mov	r0, r4
 8010438:	f7fe ff54 	bl	800f2e4 <rt_thread_suspend>
    switch (flag)
 801043c:	2f00      	cmp	r7, #0
 801043e:	d0d4      	beq.n	80103ea <rt_mutex_take+0x64>
 8010440:	2f01      	cmp	r7, #1
 8010442:	d1da      	bne.n	80103fa <rt_mutex_take+0x74>
            for (n = list->next; n != list; n = n->next)
 8010444:	6973      	ldr	r3, [r6, #20]
 8010446:	429d      	cmp	r5, r3
 8010448:	d00f      	beq.n	801046a <rt_mutex_take+0xe4>
                if (thread->current_priority < sthread->current_priority)
 801044a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 801044e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010452:	4291      	cmp	r1, r2
 8010454:	d301      	bcc.n	801045a <rt_mutex_take+0xd4>
            for (n = list->next; n != list; n = n->next)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	e7f5      	b.n	8010446 <rt_mutex_take+0xc0>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 801045a:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 801045e:	6859      	ldr	r1, [r3, #4]
 8010460:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 8010462:	6859      	ldr	r1, [r3, #4]
 8010464:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 8010466:	605a      	str	r2, [r3, #4]
    n->next = l;
 8010468:	6163      	str	r3, [r4, #20]
            if (n == list)
 801046a:	429d      	cmp	r5, r3
 801046c:	d1c5      	bne.n	80103fa <rt_mutex_take+0x74>
                rt_list_insert_before(list, &(thread->tlist));
 801046e:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 8010472:	686a      	ldr	r2, [r5, #4]
 8010474:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 8010476:	686a      	ldr	r2, [r5, #4]
 8010478:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 801047a:	606b      	str	r3, [r5, #4]
    n->next = l;
 801047c:	6165      	str	r5, [r4, #20]
 801047e:	e7bc      	b.n	80103fa <rt_mutex_take+0x74>
                    rt_timer_control(&(thread->thread_timer),
 8010480:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 8010484:	aa01      	add	r2, sp, #4
 8010486:	2100      	movs	r1, #0
 8010488:	4628      	mov	r0, r5
 801048a:	f7ff fa4d 	bl	800f928 <rt_timer_control>
                    rt_timer_start(&(thread->thread_timer));
 801048e:	4628      	mov	r0, r5
 8010490:	f7ff f9c6 	bl	800f820 <rt_timer_start>
 8010494:	e7b4      	b.n	8010400 <rt_mutex_take+0x7a>
                    temp = rt_hw_interrupt_disable();
 8010496:	f7fd f9d3 	bl	800d840 <rt_hw_interrupt_disable>
 801049a:	4680      	mov	r8, r0
 801049c:	e786      	b.n	80103ac <rt_mutex_take+0x26>

0801049e <rt_mutex_release>:
 * @param mutex the mutex object
 *
 * @return the error code
 */
rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
 801049e:	b570      	push	{r4, r5, r6, lr}
 80104a0:	4604      	mov	r4, r0

    /* only thread could release mutex because we need test the ownership */
    RT_DEBUG_IN_THREAD_CONTEXT;

    /* get current thread */
    thread = rt_thread_self();
 80104a2:	f7fe fe71 	bl	800f188 <rt_thread_self>
 80104a6:	4606      	mov	r6, r0

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 80104a8:	f7fd f9ca 	bl	800d840 <rt_hw_interrupt_disable>
 80104ac:	4605      	mov	r5, r0
                  thread->name, mutex->value, mutex->hold));

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));

    /* mutex only can be released by owner */
    if (thread != mutex->owner)
 80104ae:	6a20      	ldr	r0, [r4, #32]
 80104b0:	42b0      	cmp	r0, r6
 80104b2:	d11b      	bne.n	80104ec <rt_mutex_release+0x4e>

        return -RT_ERROR;
    }

    /* decrease hold */
    mutex->hold --;
 80104b4:	7fe3      	ldrb	r3, [r4, #31]
 80104b6:	3b01      	subs	r3, #1
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	77e3      	strb	r3, [r4, #31]
    /* if no hold */
    if (mutex->hold == 0)
 80104bc:	bb6b      	cbnz	r3, 801051a <rt_mutex_release+0x7c>
    {
        /* change the owner thread to original priority */
        if (mutex->original_priority != mutex->owner->current_priority)
 80104be:	7fa2      	ldrb	r2, [r4, #30]
 80104c0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d119      	bne.n	80104fc <rt_mutex_release+0x5e>
                              RT_THREAD_CTRL_CHANGE_PRIORITY,
                              &(mutex->original_priority));
        }

        /* wakeup suspended thread */
        if (!rt_list_isempty(&mutex->parent.suspend_thread))
 80104c8:	f104 0314 	add.w	r3, r4, #20
    return l->next == l;
 80104cc:	6962      	ldr	r2, [r4, #20]
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d01a      	beq.n	8010508 <rt_mutex_release+0x6a>
        {
            /* get suspended thread */
            thread = rt_list_entry(mutex->parent.suspend_thread.next,
 80104d2:	f1a2 0014 	sub.w	r0, r2, #20

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n",
                                        thread->name));

            /* set new owner and priority */
            mutex->owner             = thread;
 80104d6:	6220      	str	r0, [r4, #32]
            mutex->original_priority = thread->current_priority;
 80104d8:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80104dc:	77a3      	strb	r3, [r4, #30]
            mutex->hold ++;
 80104de:	7fe3      	ldrb	r3, [r4, #31]
 80104e0:	3301      	adds	r3, #1
 80104e2:	77e3      	strb	r3, [r4, #31]
    rt_thread_resume(thread);
 80104e4:	f7fe ff4c 	bl	800f380 <rt_thread_resume>

            /* resume thread */
            rt_ipc_list_resume(&(mutex->parent.suspend_thread));

            need_schedule = RT_TRUE;
 80104e8:	2401      	movs	r4, #1
 80104ea:	e017      	b.n	801051c <rt_mutex_release+0x7e>
        thread->error = -RT_ERROR;
 80104ec:	f04f 34ff 	mov.w	r4, #4294967295
 80104f0:	6334      	str	r4, [r6, #48]	; 0x30
        rt_hw_interrupt_enable(temp);
 80104f2:	4628      	mov	r0, r5
 80104f4:	f7fd f9a8 	bl	800d848 <rt_hw_interrupt_enable>
        return -RT_ERROR;
 80104f8:	4620      	mov	r0, r4
 80104fa:	e014      	b.n	8010526 <rt_mutex_release+0x88>
            rt_thread_control(mutex->owner,
 80104fc:	f104 021e 	add.w	r2, r4, #30
 8010500:	2102      	movs	r1, #2
 8010502:	f7fe ff75 	bl	800f3f0 <rt_thread_control>
 8010506:	e7df      	b.n	80104c8 <rt_mutex_release+0x2a>
        }
        else
        {
            /* increase value */
            mutex->value ++;
 8010508:	8ba3      	ldrh	r3, [r4, #28]
 801050a:	3301      	adds	r3, #1
 801050c:	83a3      	strh	r3, [r4, #28]

            /* clear owner */
            mutex->owner             = RT_NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	6223      	str	r3, [r4, #32]
            mutex->original_priority = 0xff;
 8010512:	22ff      	movs	r2, #255	; 0xff
 8010514:	77a2      	strb	r2, [r4, #30]
    need_schedule = RT_FALSE;
 8010516:	461c      	mov	r4, r3
 8010518:	e000      	b.n	801051c <rt_mutex_release+0x7e>
 801051a:	2400      	movs	r4, #0
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 801051c:	4628      	mov	r0, r5
 801051e:	f7fd f993 	bl	800d848 <rt_hw_interrupt_enable>

    /* perform a schedule */
    if (need_schedule == RT_TRUE)
 8010522:	b90c      	cbnz	r4, 8010528 <rt_mutex_release+0x8a>
        rt_schedule();

    return RT_EOK;
 8010524:	2000      	movs	r0, #0
}
 8010526:	bd70      	pop	{r4, r5, r6, pc}
        rt_schedule();
 8010528:	f001 fbfa 	bl	8011d20 <rt_schedule>
    return RT_EOK;
 801052c:	2000      	movs	r0, #0
 801052e:	e7fa      	b.n	8010526 <rt_mutex_release+0x88>

08010530 <rt_event_create>:
 *
 * @return the created event, RT_NULL on error happen
 */
//事件创建函数
rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
 8010530:	b510      	push	{r4, lr}
 8010532:	460c      	mov	r4, r1
    rt_event_t event;

    RT_DEBUG_NOT_IN_INTERRUPT;

    //分配对象
    event = (rt_event_t)rt_object_allocate(RT_Object_Class_Event, name);
 8010534:	4601      	mov	r1, r0
 8010536:	2004      	movs	r0, #4
 8010538:	f7ff fbd3 	bl	800fce2 <rt_object_allocate>
    if (event == RT_NULL)
 801053c:	4603      	mov	r3, r0
 801053e:	b130      	cbz	r0, 801054e <rt_event_create+0x1e>
        return event;

    //设置阻塞唤醒的模式
    event->parent.parent.flag = flag;
 8010540:	7244      	strb	r4, [r0, #9]
    rt_list_init(&(ipc->suspend_thread));
 8010542:	f100 0214 	add.w	r2, r0, #20
    l->next = l->prev = l;
 8010546:	6182      	str	r2, [r0, #24]
 8010548:	6142      	str	r2, [r0, #20]

    //初始化事件对象
    rt_ipc_object_init(&(event->parent));

    //事件集合清零
    event->set = 0;
 801054a:	2200      	movs	r2, #0
 801054c:	61c2      	str	r2, [r0, #28]

    return event;
}
 801054e:	4618      	mov	r0, r3
 8010550:	bd10      	pop	{r4, pc}

08010552 <rt_event_send>:
    //事件对象检查
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);

    if (set == 0)
 8010552:	2900      	cmp	r1, #0
 8010554:	d046      	beq.n	80105e4 <rt_event_send+0x92>
{
 8010556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010558:	f100 0514 	add.w	r5, r0, #20
 801055c:	460e      	mov	r6, r1
 801055e:	4604      	mov	r4, r0

    need_schedule = RT_FALSE;

    //关中断
    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8010560:	f7fd f96e 	bl	800d840 <rt_hw_interrupt_disable>
 8010564:	4607      	mov	r7, r0

    //设置事件
    /* set event */
    event->set |= set;
 8010566:	69e3      	ldr	r3, [r4, #28]
 8010568:	4333      	orrs	r3, r6
 801056a:	61e3      	str	r3, [r4, #28]
    return l->next == l;
 801056c:	6963      	ldr	r3, [r4, #20]
//			                                                           ((rt_uint32_t)(list2->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next->next)-0x14));

    if (!rt_list_isempty(&event->parent.suspend_thread))
 801056e:	429d      	cmp	r5, r3
 8010570:	d001      	beq.n	8010576 <rt_event_send+0x24>
    need_schedule = RT_FALSE;
 8010572:	2600      	movs	r6, #0
 8010574:	e015      	b.n	80105a2 <rt_event_send+0x50>
 8010576:	2600      	movs	r6, #0
        }
    }

    //开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 8010578:	4638      	mov	r0, r7
 801057a:	f7fd f965 	bl	800d848 <rt_hw_interrupt_enable>



    //线程调度
    /* do a schedule */
    if (need_schedule == RT_TRUE)
 801057e:	bb6e      	cbnz	r6, 80105dc <rt_event_send+0x8a>
//	printf("9-4.调用rt_list_remove后就绪列表中的线程：%x->%x->%x->%x->%x\r\n",((rt_uint32_t)(list2)-0x14),
//			                                                           ((rt_uint32_t)(list2->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next)-0x14),
//																	   ((rt_uint32_t)(list2->next->next->next->next)-0x14));
    return RT_EOK;
 8010580:	2000      	movs	r0, #0
}
 8010582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            n = n->next;
 8010584:	681e      	ldr	r6, [r3, #0]
                if (thread->event_info & RT_EVENT_FLAG_CLEAR)
 8010586:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801058a:	f012 0f04 	tst.w	r2, #4
 801058e:	d004      	beq.n	801059a <rt_event_send+0x48>
                    event->set &= ~thread->event_set;
 8010590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010592:	69e3      	ldr	r3, [r4, #28]
 8010594:	ea23 0302 	bic.w	r3, r3, r2
 8010598:	61e3      	str	r3, [r4, #28]
                rt_thread_resume(thread);
 801059a:	f7fe fef1 	bl	800f380 <rt_thread_resume>
 801059e:	4633      	mov	r3, r6
                need_schedule = RT_TRUE;
 80105a0:	2601      	movs	r6, #1
        while (n != &(event->parent.suspend_thread))
 80105a2:	42ab      	cmp	r3, r5
 80105a4:	d0e8      	beq.n	8010578 <rt_event_send+0x26>
            thread = rt_list_entry(n, struct rt_thread, tlist);
 80105a6:	f1a3 0014 	sub.w	r0, r3, #20
            if (thread->event_info & RT_EVENT_FLAG_AND)
 80105aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80105ae:	f012 0f01 	tst.w	r2, #1
 80105b2:	d005      	beq.n	80105c0 <rt_event_send+0x6e>
                if ((thread->event_set & event->set) == thread->event_set)
 80105b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105b6:	69e1      	ldr	r1, [r4, #28]
 80105b8:	438a      	bics	r2, r1
 80105ba:	d0e3      	beq.n	8010584 <rt_event_send+0x32>
            n = n->next;
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	e7f0      	b.n	80105a2 <rt_event_send+0x50>
            else if (thread->event_info & RT_EVENT_FLAG_OR)
 80105c0:	f012 0f02 	tst.w	r2, #2
 80105c4:	d008      	beq.n	80105d8 <rt_event_send+0x86>
                if (thread->event_set & event->set)
 80105c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105c8:	69e1      	ldr	r1, [r4, #28]
 80105ca:	400a      	ands	r2, r1
 80105cc:	d002      	beq.n	80105d4 <rt_event_send+0x82>
                    thread->event_set = thread->event_set & event->set;
 80105ce:	629a      	str	r2, [r3, #40]	; 0x28
            n = n->next;
 80105d0:	681e      	ldr	r6, [r3, #0]
 80105d2:	e7d8      	b.n	8010586 <rt_event_send+0x34>
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	e7e4      	b.n	80105a2 <rt_event_send+0x50>
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	e7e2      	b.n	80105a2 <rt_event_send+0x50>
        rt_schedule();
 80105dc:	f001 fba0 	bl	8011d20 <rt_schedule>
    return RT_EOK;
 80105e0:	2000      	movs	r0, #0
 80105e2:	e7ce      	b.n	8010582 <rt_event_send+0x30>
        return -RT_ERROR;
 80105e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80105e8:	4770      	bx	lr

080105ea <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   option,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
 80105ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	9301      	str	r3, [sp, #4]
    //检查参数
    /* parameter check */
    RT_ASSERT(event != RT_NULL);
    RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);

    if (set == 0)
 80105f2:	2900      	cmp	r1, #0
 80105f4:	f000 808a 	beq.w	801070c <rt_event_recv+0x122>
 80105f8:	4688      	mov	r8, r1
 80105fa:	4615      	mov	r5, r2
 80105fc:	4606      	mov	r6, r0
    //初始化状态
    /* init status */
    status = -RT_ERROR;
    //获得当前线程
    /* get current thread */
    thread = rt_thread_self();
 80105fe:	f7fe fdc3 	bl	800f188 <rt_thread_self>
 8010602:	4604      	mov	r4, r0
    //重置线程错误码
    /* reset thread error */
    thread->error = RT_EOK;
 8010604:	2300      	movs	r3, #0
 8010606:	6303      	str	r3, [r0, #48]	; 0x30

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(event->parent.parent)));

    //关中断
    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8010608:	f7fd f91a 	bl	800d840 <rt_hw_interrupt_disable>
 801060c:	4607      	mov	r7, r0

    //检查事件位
    /* check event set */
    if (option & RT_EVENT_FLAG_AND)
 801060e:	f015 0f01 	tst.w	r5, #1
 8010612:	d00e      	beq.n	8010632 <rt_event_recv+0x48>
    {
        if ((event->set & set) == set)
 8010614:	69f3      	ldr	r3, [r6, #28]
 8010616:	ea38 0303 	bics.w	r3, r8, r3
 801061a:	d011      	beq.n	8010640 <rt_event_recv+0x56>
        //接收事件清除
        /* received event */
        if (option & RT_EVENT_FLAG_CLEAR)
            event->set &= ~set;
    }
    else if (timeout == 0)
 801061c:	9b01      	ldr	r3, [sp, #4]
 801061e:	b9f3      	cbnz	r3, 801065e <rt_event_recv+0x74>
    {
        /* no waiting */
        thread->error = -RT_ETIMEOUT;
 8010620:	f06f 0301 	mvn.w	r3, #1
 8010624:	6323      	str	r3, [r4, #48]	; 0x30
        if (recved)
            *recved = thread->event_set;
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 8010626:	f7fd f90f 	bl	800d848 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(event->parent.parent)));

    return thread->error;
 801062a:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 801062c:	b002      	add	sp, #8
 801062e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (option & RT_EVENT_FLAG_OR)
 8010632:	f015 0f02 	tst.w	r5, #2
 8010636:	d0f1      	beq.n	801061c <rt_event_recv+0x32>
        if (event->set & set)
 8010638:	69f3      	ldr	r3, [r6, #28]
 801063a:	ea13 0f08 	tst.w	r3, r8
 801063e:	d0ed      	beq.n	801061c <rt_event_recv+0x32>
        if (recved)
 8010640:	9b08      	ldr	r3, [sp, #32]
 8010642:	b123      	cbz	r3, 801064e <rt_event_recv+0x64>
            *recved = (event->set & set);
 8010644:	69f3      	ldr	r3, [r6, #28]
 8010646:	ea03 0308 	and.w	r3, r3, r8
 801064a:	9a08      	ldr	r2, [sp, #32]
 801064c:	6013      	str	r3, [r2, #0]
        if (option & RT_EVENT_FLAG_CLEAR)
 801064e:	f015 0f04 	tst.w	r5, #4
 8010652:	d0e8      	beq.n	8010626 <rt_event_recv+0x3c>
            event->set &= ~set;
 8010654:	69f3      	ldr	r3, [r6, #28]
 8010656:	ea23 0308 	bic.w	r3, r3, r8
 801065a:	61f3      	str	r3, [r6, #28]
 801065c:	e7e3      	b.n	8010626 <rt_event_recv+0x3c>
        thread->event_set  = set;
 801065e:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
        thread->event_info = option;
 8010662:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        rt_ipc_list_suspend(&(event->parent.suspend_thread),
 8010666:	f106 0514 	add.w	r5, r6, #20
 801066a:	f896 8009 	ldrb.w	r8, [r6, #9]
    rt_thread_suspend(thread);
 801066e:	4620      	mov	r0, r4
 8010670:	f7fe fe38 	bl	800f2e4 <rt_thread_suspend>
    switch (flag)
 8010674:	f1b8 0f00 	cmp.w	r8, #0
 8010678:	d016      	beq.n	80106a8 <rt_event_recv+0xbe>
 801067a:	f1b8 0f01 	cmp.w	r8, #1
 801067e:	d01c      	beq.n	80106ba <rt_event_recv+0xd0>
        if (timeout > 0)
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	dc37      	bgt.n	80106f6 <rt_event_recv+0x10c>
        rt_hw_interrupt_enable(level);
 8010686:	4638      	mov	r0, r7
 8010688:	f7fd f8de 	bl	800d848 <rt_hw_interrupt_enable>
        rt_schedule();
 801068c:	f001 fb48 	bl	8011d20 <rt_schedule>
        if (thread->error != RT_EOK)
 8010690:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010692:	2800      	cmp	r0, #0
 8010694:	d1ca      	bne.n	801062c <rt_event_recv+0x42>
        level = rt_hw_interrupt_disable();
 8010696:	f7fd f8d3 	bl	800d840 <rt_hw_interrupt_disable>
        if (recved)
 801069a:	9b08      	ldr	r3, [sp, #32]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d0c2      	beq.n	8010626 <rt_event_recv+0x3c>
            *recved = thread->event_set;
 80106a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80106a2:	9a08      	ldr	r2, [sp, #32]
 80106a4:	6013      	str	r3, [r2, #0]
 80106a6:	e7be      	b.n	8010626 <rt_event_recv+0x3c>
        rt_list_insert_before(list, &(thread->tlist));
 80106a8:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 80106ac:	686a      	ldr	r2, [r5, #4]
 80106ae:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 80106b0:	686a      	ldr	r2, [r5, #4]
 80106b2:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 80106b4:	606b      	str	r3, [r5, #4]
    n->next = l;
 80106b6:	6165      	str	r5, [r4, #20]
 80106b8:	e7e2      	b.n	8010680 <rt_event_recv+0x96>
            for (n = list->next; n != list; n = n->next)
 80106ba:	6973      	ldr	r3, [r6, #20]
 80106bc:	e000      	b.n	80106c0 <rt_event_recv+0xd6>
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	429d      	cmp	r5, r3
 80106c2:	d00d      	beq.n	80106e0 <rt_event_recv+0xf6>
                if (thread->current_priority < sthread->current_priority)
 80106c4:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80106c8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80106cc:	4291      	cmp	r1, r2
 80106ce:	d2f6      	bcs.n	80106be <rt_event_recv+0xd4>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 80106d0:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 80106d4:	6859      	ldr	r1, [r3, #4]
 80106d6:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 80106d8:	6859      	ldr	r1, [r3, #4]
 80106da:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 80106dc:	605a      	str	r2, [r3, #4]
    n->next = l;
 80106de:	6163      	str	r3, [r4, #20]
            if (n == list)
 80106e0:	429d      	cmp	r5, r3
 80106e2:	d1cd      	bne.n	8010680 <rt_event_recv+0x96>
                rt_list_insert_before(list, &(thread->tlist));
 80106e4:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 80106e8:	686a      	ldr	r2, [r5, #4]
 80106ea:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 80106ec:	686a      	ldr	r2, [r5, #4]
 80106ee:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 80106f0:	606b      	str	r3, [r5, #4]
    n->next = l;
 80106f2:	6165      	str	r5, [r4, #20]
 80106f4:	e7c4      	b.n	8010680 <rt_event_recv+0x96>
            rt_timer_control(&(thread->thread_timer),
 80106f6:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 80106fa:	aa01      	add	r2, sp, #4
 80106fc:	2100      	movs	r1, #0
 80106fe:	4628      	mov	r0, r5
 8010700:	f7ff f912 	bl	800f928 <rt_timer_control>
            rt_timer_start(&(thread->thread_timer));
 8010704:	4628      	mov	r0, r5
 8010706:	f7ff f88b 	bl	800f820 <rt_timer_start>
 801070a:	e7bc      	b.n	8010686 <rt_event_recv+0x9c>
        return -RT_ERROR;
 801070c:	f04f 30ff 	mov.w	r0, #4294967295
 8010710:	e78c      	b.n	801062c <rt_event_recv+0x42>

08010712 <rt_mq_delete>:
 * @param mq the message queue object
 *
 * @return the error code
 */
rt_err_t rt_mq_delete(rt_mq_t mq)
{
 8010712:	b570      	push	{r4, r5, r6, lr}
 8010714:	4606      	mov	r6, r0
    RT_ASSERT(mq != RT_NULL);
    RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
    RT_ASSERT(rt_object_is_systemobject(&mq->parent.parent) == RT_FALSE);

    /* resume all suspended thread */
    rt_ipc_list_resume_all(&(mq->parent.suspend_thread));
 8010716:	f100 0414 	add.w	r4, r0, #20
 801071a:	e00c      	b.n	8010736 <rt_mq_delete+0x24>
        temp = rt_hw_interrupt_disable();
 801071c:	f7fd f890 	bl	800d840 <rt_hw_interrupt_disable>
 8010720:	4605      	mov	r5, r0
        thread = rt_list_entry(list->next, struct rt_thread, tlist);
 8010722:	6820      	ldr	r0, [r4, #0]
        thread->error = -RT_ERROR;
 8010724:	f04f 33ff 	mov.w	r3, #4294967295
 8010728:	61c3      	str	r3, [r0, #28]
        rt_thread_resume(thread);
 801072a:	3814      	subs	r0, #20
 801072c:	f7fe fe28 	bl	800f380 <rt_thread_resume>
        rt_hw_interrupt_enable(temp);
 8010730:	4628      	mov	r0, r5
 8010732:	f7fd f889 	bl	800d848 <rt_hw_interrupt_enable>
    return l->next == l;
 8010736:	6823      	ldr	r3, [r4, #0]
    while (!rt_list_isempty(list))
 8010738:	429c      	cmp	r4, r3
 801073a:	d1ef      	bne.n	801071c <rt_mq_delete+0xa>

    /* free message queue pool */
    RT_KERNEL_FREE(mq->msg_pool);
 801073c:	69f0      	ldr	r0, [r6, #28]
 801073e:	f002 fa15 	bl	8012b6c <rt_free>

    /* delete message queue object */
    rt_object_delete(&(mq->parent.parent));
 8010742:	4630      	mov	r0, r6
 8010744:	f7ff faf5 	bl	800fd32 <rt_object_delete>

    return RT_EOK;
}
 8010748:	2000      	movs	r0, #0
 801074a:	bd70      	pop	{r4, r5, r6, pc}

0801074c <rt_mq_create>:
{
 801074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074e:	460d      	mov	r5, r1
 8010750:	4616      	mov	r6, r2
 8010752:	461f      	mov	r7, r3
    mq = (rt_mq_t)rt_object_allocate(RT_Object_Class_MessageQueue, name);
 8010754:	4601      	mov	r1, r0
 8010756:	2006      	movs	r0, #6
 8010758:	f7ff fac3 	bl	800fce2 <rt_object_allocate>
    if (mq == RT_NULL)
 801075c:	4604      	mov	r4, r0
 801075e:	b360      	cbz	r0, 80107ba <rt_mq_create+0x6e>
    mq->parent.parent.flag = flag;
 8010760:	7247      	strb	r7, [r0, #9]
    rt_list_init(&(ipc->suspend_thread));
 8010762:	f100 0314 	add.w	r3, r0, #20
    l->next = l->prev = l;
 8010766:	6183      	str	r3, [r0, #24]
 8010768:	6143      	str	r3, [r0, #20]
    mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
 801076a:	1ceb      	adds	r3, r5, #3
 801076c:	b29b      	uxth	r3, r3
 801076e:	f023 0303 	bic.w	r3, r3, #3
 8010772:	b29b      	uxth	r3, r3
 8010774:	8403      	strh	r3, [r0, #32]
    mq->max_msgs = max_msgs;
 8010776:	b2b0      	uxth	r0, r6
 8010778:	8460      	strh	r0, [r4, #34]	; 0x22
    mq->msg_pool = RT_KERNEL_MALLOC((mq->msg_size + sizeof(struct rt_mq_message)) * mq->max_msgs);
 801077a:	3304      	adds	r3, #4
 801077c:	fb00 f003 	mul.w	r0, r0, r3
 8010780:	f002 f966 	bl	8012a50 <rt_malloc>
 8010784:	61e0      	str	r0, [r4, #28]
    if (mq->msg_pool == RT_NULL)
 8010786:	b120      	cbz	r0, 8010792 <rt_mq_create+0x46>
    mq->msg_queue_head = RT_NULL;
 8010788:	2200      	movs	r2, #0
 801078a:	62a2      	str	r2, [r4, #40]	; 0x28
    mq->msg_queue_tail = RT_NULL;
 801078c:	62e2      	str	r2, [r4, #44]	; 0x2c
    mq->msg_queue_free = RT_NULL;
 801078e:	6322      	str	r2, [r4, #48]	; 0x30
    for (temp = 0; temp < mq->max_msgs; temp ++)
 8010790:	e00e      	b.n	80107b0 <rt_mq_create+0x64>
        rt_mq_delete(mq);
 8010792:	4620      	mov	r0, r4
 8010794:	f7ff ffbd 	bl	8010712 <rt_mq_delete>
        return RT_NULL;
 8010798:	2400      	movs	r4, #0
 801079a:	e00e      	b.n	80107ba <rt_mq_create+0x6e>
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 801079c:	69e1      	ldr	r1, [r4, #28]
                                        temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 801079e:	8c23      	ldrh	r3, [r4, #32]
 80107a0:	3304      	adds	r3, #4
 80107a2:	fb03 f302 	mul.w	r3, r3, r2
        head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 80107a6:	18c8      	adds	r0, r1, r3
        head->next = mq->msg_queue_free;
 80107a8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80107aa:	50cd      	str	r5, [r1, r3]
        mq->msg_queue_free = head;
 80107ac:	6320      	str	r0, [r4, #48]	; 0x30
    for (temp = 0; temp < mq->max_msgs; temp ++)
 80107ae:	3201      	adds	r2, #1
 80107b0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80107b2:	4293      	cmp	r3, r2
 80107b4:	dcf2      	bgt.n	801079c <rt_mq_create+0x50>
    mq->entry = 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	84a3      	strh	r3, [r4, #36]	; 0x24
}
 80107ba:	4620      	mov	r0, r4
 80107bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107be <rt_mq_send>:
//         buffer：需要发送的消息的缓冲区
//         size：需要发送的消息的大小
//功能概要： 将消息放到消息队列中
//=========================================================================
rt_err_t rt_mq_send(rt_mq_t mq, void *buffer, rt_size_t size)
{
 80107be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    RT_ASSERT(buffer != RT_NULL); //发送的消息是否为空
    RT_ASSERT(size != 0); //发送的消息大小是否为0

    //（3）判断需要发送的消息的大小
    /* greater than one message size */
    if (size > mq->msg_size)
 80107c0:	8c03      	ldrh	r3, [r0, #32]
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d339      	bcc.n	801083a <rt_mq_send+0x7c>
 80107c6:	4616      	mov	r6, r2
 80107c8:	460f      	mov	r7, r1
 80107ca:	4604      	mov	r4, r0

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));

    //关中断
    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 80107cc:	f7fd f838 	bl	800d840 <rt_hw_interrupt_disable>

    //（4）获取一个空闲链表，必须有一个空闲链表项
    /* get a free list, there must be an empty item */
    msg = (struct rt_mq_message *)mq->msg_queue_free;
 80107d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
    //（4.1）如果没有空闲链表
    /* message queue is full */
    if (msg == RT_NULL)
 80107d2:	b335      	cbz	r5, 8010822 <rt_mq_send+0x64>
    }


    //若空闲列表不为空，移动空闲链表指针
    /* move free list pointer */
    mq->msg_queue_free = msg->next;
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	6323      	str	r3, [r4, #48]	; 0x30

    //开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 80107d8:	f7fd f836 	bl	800d848 <rt_hw_interrupt_enable>


    /* the msg is the new tailer of list, the next shall be NULL */
    msg->next = RT_NULL;  //这个消息是新链表的尾部，其下一个指针为RT_NULL
 80107dc:	4628      	mov	r0, r5
 80107de:	2300      	movs	r3, #0
 80107e0:	f840 3b04 	str.w	r3, [r0], #4

    //（4.3）复制消息内容
    /* copy buffer */
    rt_memcpy(msg + 1, buffer, size); //拷贝消息至msg + 1地址处
 80107e4:	4632      	mov	r2, r6
 80107e6:	4639      	mov	r1, r7
 80107e8:	f000 fcff 	bl	80111ea <rt_memcpy>

	

    //关总中断
    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 80107ec:	f7fd f828 	bl	800d840 <rt_hw_interrupt_disable>
 80107f0:	4606      	mov	r6, r0
    //（4.4）将消息放入消息队列
    /* link msg to message queue */
    if (mq->msg_queue_tail != RT_NULL) //若已经存在消息队列尾部链表
 80107f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80107f4:	b103      	cbz	r3, 80107f8 <rt_mq_send+0x3a>
    {
        /* if the tail exists, */
    	//尾部的next指针指向该消息
        ((struct rt_mq_message *)mq->msg_queue_tail)->next = msg;
 80107f6:	601d      	str	r5, [r3, #0]
    }

    //设置新的消息队列尾部链表
    /* set new tail */
    mq->msg_queue_tail = msg;
 80107f8:	62e5      	str	r5, [r4, #44]	; 0x2c
    //如果头部链表是空的，则设置头部链表指针
    /* if the head is empty, set head */
    if (mq->msg_queue_head == RT_NULL)
 80107fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80107fc:	b1b3      	cbz	r3, 801082c <rt_mq_send+0x6e>
        mq->msg_queue_head = msg;

    //（4.5）消息个数加一
    /* increase message entry */
    mq->entry ++;
 80107fe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8010800:	3301      	adds	r3, #1
 8010802:	84a3      	strh	r3, [r4, #36]	; 0x24

    

    //（5）若有线程因等待消息而阻塞，则将该线性从阻塞队列中恢复
    /* resume suspended thread */
    if (!rt_list_isempty(&mq->parent.suspend_thread))
 8010804:	f104 0314 	add.w	r3, r4, #20
    return l->next == l;
 8010808:	6960      	ldr	r0, [r4, #20]
 801080a:	4283      	cmp	r3, r0
 801080c:	d010      	beq.n	8010830 <rt_mq_send+0x72>
    rt_thread_resume(thread);
 801080e:	3814      	subs	r0, #20
 8010810:	f7fe fdb6 	bl	800f380 <rt_thread_resume>
    {
        rt_ipc_list_resume(&(mq->parent.suspend_thread));

        /* enable interrupt */
        rt_hw_interrupt_enable(temp); //开中断
 8010814:	4630      	mov	r0, r6
 8010816:	f7fd f817 	bl	800d848 <rt_hw_interrupt_enable>

        rt_schedule();//发起一次线程调度
 801081a:	f001 fa81 	bl	8011d20 <rt_schedule>

        return RT_EOK;
 801081e:	2000      	movs	r0, #0
//    开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);

    return RT_EOK;
}
 8010820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rt_hw_interrupt_enable(temp);
 8010822:	f7fd f811 	bl	800d848 <rt_hw_interrupt_enable>
        return -RT_EFULL;
 8010826:	f06f 0002 	mvn.w	r0, #2
 801082a:	e7f9      	b.n	8010820 <rt_mq_send+0x62>
        mq->msg_queue_head = msg;
 801082c:	62a5      	str	r5, [r4, #40]	; 0x28
 801082e:	e7e6      	b.n	80107fe <rt_mq_send+0x40>
    rt_hw_interrupt_enable(temp);
 8010830:	4630      	mov	r0, r6
 8010832:	f7fd f809 	bl	800d848 <rt_hw_interrupt_enable>
    return RT_EOK;
 8010836:	2000      	movs	r0, #0
 8010838:	e7f2      	b.n	8010820 <rt_mq_send+0x62>
        return -RT_ERROR;
 801083a:	f04f 30ff 	mov.w	r0, #4294967295
 801083e:	e7ef      	b.n	8010820 <rt_mq_send+0x62>

08010840 <rt_mq_recv>:
//=========================================================================
rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
 8010840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010844:	b083      	sub	sp, #12
 8010846:	4606      	mov	r6, r0
 8010848:	4689      	mov	r9, r1
 801084a:	4692      	mov	sl, r2
 801084c:	9301      	str	r3, [sp, #4]
    //初始化延时滴答
    /* initialize delta tick */
    tick_delta = 0;
    //获取当前运行的线程
    /* get current thread */
    thread = rt_thread_self();
 801084e:	f7fe fc9b 	bl	800f188 <rt_thread_self>
 8010852:	4604      	mov	r4, r0
    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mq->parent.parent)));

    //关中断
    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8010854:	f7fc fff4 	bl	800d840 <rt_hw_interrupt_disable>
 8010858:	4607      	mov	r7, r0

    //消息数为0
    /* for non-blocking call */
    if (mq->entry == 0 && timeout == 0)
 801085a:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 801085c:	2b00      	cmp	r3, #0
 801085e:	d177      	bne.n	8010950 <rt_mq_recv+0x110>
 8010860:	9b01      	ldr	r3, [sp, #4]
 8010862:	b113      	cbz	r3, 801086a <rt_mq_recv+0x2a>
 8010864:	f04f 0800 	mov.w	r8, #0
 8010868:	e024      	b.n	80108b4 <rt_mq_recv+0x74>
    {
        rt_hw_interrupt_enable(temp);
 801086a:	f7fc ffed 	bl	800d848 <rt_hw_interrupt_enable>

        return -RT_ETIMEOUT;
 801086e:	f06f 0001 	mvn.w	r0, #1
 8010872:	e08b      	b.n	801098c <rt_mq_recv+0x14c>
        //不等待 返回超时
        /* no waiting, return timeout */
        if (timeout == 0)
        {
            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
 8010874:	4638      	mov	r0, r7
 8010876:	f7fc ffe7 	bl	800d848 <rt_hw_interrupt_enable>

            thread->error = -RT_ETIMEOUT;
 801087a:	f06f 0001 	mvn.w	r0, #1
 801087e:	6320      	str	r0, [r4, #48]	; 0x30

            return -RT_ETIMEOUT;
 8010880:	e084      	b.n	801098c <rt_mq_recv+0x14c>
        rt_list_insert_before(list, &(thread->tlist));
 8010882:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 8010886:	686a      	ldr	r2, [r5, #4]
 8010888:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 801088a:	686a      	ldr	r2, [r5, #4]
 801088c:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 801088e:	606b      	str	r3, [r5, #4]
    n->next = l;
 8010890:	6165      	str	r5, [r4, #20]
                            thread,
                            mq->parent.parent.flag);

        //有等待时间 启动线程计时器
        /* has waiting time, start thread timer */
        if (timeout > 0)
 8010892:	9b01      	ldr	r3, [sp, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	dc40      	bgt.n	801091a <rt_mq_recv+0xda>
            rt_timer_start(&(thread->thread_timer));
        }

        //开中断
        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
 8010898:	4638      	mov	r0, r7
 801089a:	f7fc ffd5 	bl	800d848 <rt_hw_interrupt_enable>

        //线程调度
        /* re-schedule */
        rt_schedule();
 801089e:	f001 fa3f 	bl	8011d20 <rt_schedule>

        /* recv message */
        if (thread->error != RT_EOK)
 80108a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d171      	bne.n	801098c <rt_mq_recv+0x14c>
            /* return error */
            return thread->error;
        }

        /* disable interrupt */
        temp = rt_hw_interrupt_disable();
 80108a8:	f7fc ffca 	bl	800d840 <rt_hw_interrupt_disable>
 80108ac:	4607      	mov	r7, r0

        /* if it's not waiting forever and then re-calculate timeout tick */
        if (timeout > 0)
 80108ae:	9b01      	ldr	r3, [sp, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	dc40      	bgt.n	8010936 <rt_mq_recv+0xf6>
    while (mq->entry == 0)
 80108b4:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d14d      	bne.n	8010956 <rt_mq_recv+0x116>
        thread->error = RT_EOK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	6323      	str	r3, [r4, #48]	; 0x30
        if (timeout == 0)
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d0d7      	beq.n	8010874 <rt_mq_recv+0x34>
        rt_ipc_list_suspend(&(mq->parent.suspend_thread),
 80108c4:	f106 0514 	add.w	r5, r6, #20
 80108c8:	f896 b009 	ldrb.w	fp, [r6, #9]
    rt_thread_suspend(thread);
 80108cc:	4620      	mov	r0, r4
 80108ce:	f7fe fd09 	bl	800f2e4 <rt_thread_suspend>
    switch (flag)
 80108d2:	f1bb 0f00 	cmp.w	fp, #0
 80108d6:	d0d4      	beq.n	8010882 <rt_mq_recv+0x42>
 80108d8:	f1bb 0f01 	cmp.w	fp, #1
 80108dc:	d1d9      	bne.n	8010892 <rt_mq_recv+0x52>
            for (n = list->next; n != list; n = n->next)
 80108de:	6973      	ldr	r3, [r6, #20]
 80108e0:	429d      	cmp	r5, r3
 80108e2:	d00f      	beq.n	8010904 <rt_mq_recv+0xc4>
                if (thread->current_priority < sthread->current_priority)
 80108e4:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80108e8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80108ec:	4291      	cmp	r1, r2
 80108ee:	d301      	bcc.n	80108f4 <rt_mq_recv+0xb4>
            for (n = list->next; n != list; n = n->next)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	e7f5      	b.n	80108e0 <rt_mq_recv+0xa0>
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 80108f4:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 80108f8:	6859      	ldr	r1, [r3, #4]
 80108fa:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 80108fc:	6859      	ldr	r1, [r3, #4]
 80108fe:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 8010900:	605a      	str	r2, [r3, #4]
    n->next = l;
 8010902:	6163      	str	r3, [r4, #20]
            if (n == list)
 8010904:	429d      	cmp	r5, r3
 8010906:	d1c4      	bne.n	8010892 <rt_mq_recv+0x52>
                rt_list_insert_before(list, &(thread->tlist));
 8010908:	f104 0314 	add.w	r3, r4, #20
    l->prev->next = n;
 801090c:	686a      	ldr	r2, [r5, #4]
 801090e:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
 8010910:	686a      	ldr	r2, [r5, #4]
 8010912:	61a2      	str	r2, [r4, #24]
    l->prev = n;
 8010914:	606b      	str	r3, [r5, #4]
    n->next = l;
 8010916:	6165      	str	r5, [r4, #20]
 8010918:	e7bb      	b.n	8010892 <rt_mq_recv+0x52>
            tick_delta = rt_tick_get();
 801091a:	f000 feb5 	bl	8011688 <rt_tick_get>
 801091e:	4680      	mov	r8, r0
            rt_timer_control(&(thread->thread_timer),
 8010920:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 8010924:	aa01      	add	r2, sp, #4
 8010926:	2100      	movs	r1, #0
 8010928:	4628      	mov	r0, r5
 801092a:	f7fe fffd 	bl	800f928 <rt_timer_control>
            rt_timer_start(&(thread->thread_timer));
 801092e:	4628      	mov	r0, r5
 8010930:	f7fe ff76 	bl	800f820 <rt_timer_start>
 8010934:	e7b0      	b.n	8010898 <rt_mq_recv+0x58>
        {
            tick_delta = rt_tick_get() - tick_delta;
 8010936:	f000 fea7 	bl	8011688 <rt_tick_get>
 801093a:	eba0 0808 	sub.w	r8, r0, r8
            timeout -= tick_delta;
 801093e:	9b01      	ldr	r3, [sp, #4]
 8010940:	eba3 0308 	sub.w	r3, r3, r8
 8010944:	9301      	str	r3, [sp, #4]
            if (timeout < 0)
 8010946:	2b00      	cmp	r3, #0
 8010948:	dab4      	bge.n	80108b4 <rt_mq_recv+0x74>
                timeout = 0;
 801094a:	2300      	movs	r3, #0
 801094c:	9301      	str	r3, [sp, #4]
 801094e:	e7b1      	b.n	80108b4 <rt_mq_recv+0x74>
 8010950:	f04f 0800 	mov.w	r8, #0
 8010954:	e7ae      	b.n	80108b4 <rt_mq_recv+0x74>

//    printf("2-3.从等待队列中移除接收线程\n");
//    printf("2-4.接收线程开始接收消息\n");
    //获取消息队列的头指针
    /* get message from queue */
    msg = (struct rt_mq_message *)mq->msg_queue_head;
 8010956:	6ab4      	ldr	r4, [r6, #40]	; 0x28

    //移动消息队列的头指针
    /* move message queue head */
    mq->msg_queue_head = msg->next;
 8010958:	6822      	ldr	r2, [r4, #0]
 801095a:	62b2      	str	r2, [r6, #40]	; 0x28
    /* reach queue tail, set to NULL */  //若到达消息队列尾部
    if (mq->msg_queue_tail == msg)
 801095c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801095e:	42a2      	cmp	r2, r4
 8010960:	d017      	beq.n	8010992 <rt_mq_recv+0x152>
        mq->msg_queue_tail = RT_NULL;

    //消息数减一
    /* decrease message entry */
    mq->entry --;
 8010962:	3b01      	subs	r3, #1
 8010964:	84b3      	strh	r3, [r6, #36]	; 0x24

    //开中断
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 8010966:	4638      	mov	r0, r7
 8010968:	f7fc ff6e 	bl	800d848 <rt_hw_interrupt_enable>

    //将消息内容放入指定的存储地址
    /* copy message */
    rt_memcpy(buffer, msg + 1, size > mq->msg_size ? mq->msg_size : size);
 801096c:	8c32      	ldrh	r2, [r6, #32]
 801096e:	4552      	cmp	r2, sl
 8010970:	bf28      	it	cs
 8010972:	4652      	movcs	r2, sl
 8010974:	1d21      	adds	r1, r4, #4
 8010976:	4648      	mov	r0, r9
 8010978:	f000 fc37 	bl	80111ea <rt_memcpy>


    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 801097c:	f7fc ff60 	bl	800d840 <rt_hw_interrupt_disable>

    //消息放入空闲列表
    /* put message to free list */
    msg->next = (struct rt_mq_message *)mq->msg_queue_free;
 8010980:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8010982:	6023      	str	r3, [r4, #0]
    mq->msg_queue_free = msg;
 8010984:	6334      	str	r4, [r6, #48]	; 0x30

   
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 8010986:	f7fc ff5f 	bl	800d848 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));

    return RT_EOK;
 801098a:	2000      	movs	r0, #0
}
 801098c:	b003      	add	sp, #12
 801098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mq->msg_queue_tail = RT_NULL;
 8010992:	2200      	movs	r2, #0
 8010994:	62f2      	str	r2, [r6, #44]	; 0x2c
 8010996:	e7e4      	b.n	8010962 <rt_mq_recv+0x122>

08010998 <thread_eventBlue>:
//参数说明：无
//功能概要：蓝灯线程中，每10秒设置绿灯事件
//内部调用：无
//======================================================================
void thread_eventBlue()
{
 8010998:	b500      	push	{lr}
 801099a:	b085      	sub	sp, #20
    //（1）======申明局部变量==========================================
    uint32_t recvedstate;

    printf("---第一次进入运行蓝灯线程!\r\n");
 801099c:	481d      	ldr	r0, [pc, #116]	; (8010a14 <thread_eventBlue+0x7c>)
 801099e:	f7fe fb33 	bl	800f008 <myprintf>
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_ON);
 80109a2:	2200      	movs	r2, #0
 80109a4:	2101      	movs	r1, #1
 80109a6:	f240 1009 	movw	r0, #265	; 0x109
 80109aa:	f7ff fba3 	bl	80100f4 <gpio_init>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 80109ae:	2201      	movs	r2, #1
 80109b0:	4611      	mov	r1, r2
 80109b2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80109b6:	f7ff fb9d 	bl	80100f4 <gpio_init>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 80109ba:	2201      	movs	r2, #1
 80109bc:	4611      	mov	r1, r2
 80109be:	f240 1007 	movw	r0, #263	; 0x107
 80109c2:	f7ff fb97 	bl	80100f4 <gpio_init>
    

    //（2）======主循环（开始）==========================================
    while (1)   //主循环
    {
      rt_event_recv(EventWord,BLUE_LIGHT_EVENT,RT_EVENT_FLAG_OR|RT_EVENT_FLAG_CLEAR,RT_WAITING_FOREVER,&recvedstate);//等待接收蓝灯事件信号
 80109c6:	4b14      	ldr	r3, [pc, #80]	; (8010a18 <thread_eventBlue+0x80>)
 80109c8:	6818      	ldr	r0, [r3, #0]
 80109ca:	ab03      	add	r3, sp, #12
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	f04f 33ff 	mov.w	r3, #4294967295
 80109d2:	2206      	movs	r2, #6
 80109d4:	2108      	movs	r1, #8
 80109d6:	f7ff fe08 	bl	80105ea <rt_event_recv>
      if(recvedstate==BLUE_LIGHT_EVENT)
 80109da:	9b03      	ldr	r3, [sp, #12]
 80109dc:	2b08      	cmp	r3, #8
 80109de:	d1f2      	bne.n	80109c6 <thread_eventBlue+0x2e>
     {  //如果接收完成且正确
    	uart_send_string(UART_User,(void *)"----进入蓝灯线程-----\r\n");
 80109e0:	490e      	ldr	r1, [pc, #56]	; (8010a1c <thread_eventBlue+0x84>)
 80109e2:	2002      	movs	r0, #2
 80109e4:	f001 fc60 	bl	80122a8 <uart_send_string>
    	uart_send_string(UART_User,(void *)"在蓝灯线程中，设置绿灯事件\r\n");
 80109e8:	490d      	ldr	r1, [pc, #52]	; (8010a20 <thread_eventBlue+0x88>)
 80109ea:	2002      	movs	r0, #2
 80109ec:	f001 fc5c 	bl	80122a8 <uart_send_string>
       // useruart_send_string(UART_User,(void *)"----在蓝灯线程中，设置绿灯事件-----\r\n");
    	//设置GREEN_LIGHT_EVENT事件位
        rt_event_send(EventWord,GREEN_LIGHT_EVENT);
 80109f0:	2104      	movs	r1, #4
 80109f2:	4b09      	ldr	r3, [pc, #36]	; (8010a18 <thread_eventBlue+0x80>)
 80109f4:	6818      	ldr	r0, [r3, #0]
 80109f6:	f7ff fdac 	bl	8010552 <rt_event_send>
        uart_send_string(UART_User,(void *)"------蓝灯闪烁------\r\n");
 80109fa:	490a      	ldr	r1, [pc, #40]	; (8010a24 <thread_eventBlue+0x8c>)
 80109fc:	2002      	movs	r0, #2
 80109fe:	f001 fc53 	bl	80122a8 <uart_send_string>
       // useruart_send_string(UART_User,(void *)"----蓝灯闪烁-----\r\n");
	  	gpio_reverse(LIGHT_BLUE);
 8010a02:	f240 1009 	movw	r0, #265	; 0x109
 8010a06:	f7ff fbe1 	bl	80101cc <gpio_reverse>
        delay_ms(10000);
 8010a0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8010a0e:	f7fe fcb3 	bl	800f378 <rt_thread_delay>
 8010a12:	e7d8      	b.n	80109c6 <thread_eventBlue+0x2e>
 8010a14:	08013120 	.word	0x08013120
 8010a18:	20007358 	.word	0x20007358
 8010a1c:	08013140 	.word	0x08013140
 8010a20:	08013158 	.word	0x08013158
 8010a24:	08013178 	.word	0x08013178

08010a28 <wdog_feed>:
// 函数返回：无
// 功能概要： 喂狗，重载计时器
// ===========================================================================
void wdog_feed(void)
{
	IWDG->KR = IWDG_KEY_RELOAD;    //重装载看门狗计数器
 8010a28:	4b02      	ldr	r3, [pc, #8]	; (8010a34 <wdog_feed+0xc>)
 8010a2a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010a2e:	601a      	str	r2, [r3, #0]
}
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop
 8010a34:	40003000 	.word	0x40003000

08010a38 <LCD_WR_DATA8>:
    result=1;
    while(n--) result*=m;
    return result;
}
void LCD_WR_DATA8(uint8_t da) //发送数据-8位参数
{
 8010a38:	b510      	push	{r4, lr}
 8010a3a:	4604      	mov	r4, r0
     wdog_feed();
 8010a3c:	f7ff fff4 	bl	8010a28 <wdog_feed>
    gpio_set(LCD_DC,1);
 8010a40:	2101      	movs	r1, #1
 8010a42:	f240 1005 	movw	r0, #261	; 0x105
 8010a46:	f7ff fb2f 	bl	80100a8 <gpio_set>
    gpio_set(LCD_CS,0);
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010a50:	f7ff fb2a 	bl	80100a8 <gpio_set>
    //	gpio_init(LCD_CS,1,0);
    spi_send1(LCD_SPI,da);
 8010a54:	4621      	mov	r1, r4
 8010a56:	2001      	movs	r0, #1
 8010a58:	f7fe fe54 	bl	800f704 <spi_send1>
    gpio_set(LCD_CS,1);
 8010a5c:	2101      	movs	r1, #1
 8010a5e:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010a62:	f7ff fb21 	bl	80100a8 <gpio_set>
    //	gpio_init(LCD_CS,1,1);
}
 8010a66:	bd10      	pop	{r4, pc}

08010a68 <LCD_WR_DATA>:
void LCD_WR_DATA(uint16_t da)
{
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	4604      	mov	r4, r0
     wdog_feed();
 8010a6c:	f7ff ffdc 	bl	8010a28 <wdog_feed>
    gpio_set(LCD_DC,1);
 8010a70:	2101      	movs	r1, #1
 8010a72:	f240 1005 	movw	r0, #261	; 0x105
 8010a76:	f7ff fb17 	bl	80100a8 <gpio_set>
    gpio_set(LCD_CS,0);
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010a80:	f7ff fb12 	bl	80100a8 <gpio_set>
    //	gpio_init(LCD_CS,1,0);
    spi_send1(LCD_SPI,da>>8);
 8010a84:	0a21      	lsrs	r1, r4, #8
 8010a86:	2001      	movs	r0, #1
 8010a88:	f7fe fe3c 	bl	800f704 <spi_send1>
    spi_send1(LCD_SPI,da);
 8010a8c:	b2e1      	uxtb	r1, r4
 8010a8e:	2001      	movs	r0, #1
 8010a90:	f7fe fe38 	bl	800f704 <spi_send1>
    gpio_set(LCD_CS,1);
 8010a94:	2101      	movs	r1, #1
 8010a96:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010a9a:	f7ff fb05 	bl	80100a8 <gpio_set>
    //    gpio_init(LCD_CS,1,1);
}
 8010a9e:	bd10      	pop	{r4, pc}

08010aa0 <LCD_WR_REG>:
void LCD_WR_REG(uint8_t da)
{
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	4604      	mov	r4, r0
     wdog_feed();
 8010aa4:	f7ff ffc0 	bl	8010a28 <wdog_feed>
    gpio_set(LCD_DC,0);
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	f240 1005 	movw	r0, #261	; 0x105
 8010aae:	f7ff fafb 	bl	80100a8 <gpio_set>
    gpio_set(LCD_CS,0);
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010ab8:	f7ff faf6 	bl	80100a8 <gpio_set>
    //	gpio_init(LCD_CS,1,0);
    spi_send1(LCD_SPI,da);
 8010abc:	4621      	mov	r1, r4
 8010abe:	2001      	movs	r0, #1
 8010ac0:	f7fe fe20 	bl	800f704 <spi_send1>
    //	gpio_init(LCD_CS,1,1);
    gpio_set(LCD_CS,1);
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010aca:	f7ff faed 	bl	80100a8 <gpio_set>
}
 8010ace:	bd10      	pop	{r4, pc}

08010ad0 <LCD_WR_REG_DATA>:
//void LCD_WR_REG_DATA(uint16_t reg,uint16_t da)
void LCD_WR_REG_DATA(uint8_t reg,uint16_t da)
{
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	460c      	mov	r4, r1
    LCD_WR_REG(reg);
 8010ad4:	f7ff ffe4 	bl	8010aa0 <LCD_WR_REG>
    LCD_WR_DATA(da);
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f7ff ffc5 	bl	8010a68 <LCD_WR_DATA>
}
 8010ade:	bd10      	pop	{r4, pc}

08010ae0 <Address_set>:
void Address_set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8010ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ae2:	4607      	mov	r7, r0
 8010ae4:	460d      	mov	r5, r1
 8010ae6:	4616      	mov	r6, r2
 8010ae8:	461c      	mov	r4, r3
    LCD_WR_REG(0x2a);      //写行地址命令
 8010aea:	202a      	movs	r0, #42	; 0x2a
 8010aec:	f7ff ffd8 	bl	8010aa0 <LCD_WR_REG>
    LCD_WR_DATA8(x1>>8);   //写起始行地址
 8010af0:	0a38      	lsrs	r0, r7, #8
 8010af2:	f7ff ffa1 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(x1);
 8010af6:	b2f8      	uxtb	r0, r7
 8010af8:	f7ff ff9e 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(x2>>8);   //写结束行地址
 8010afc:	0a30      	lsrs	r0, r6, #8
 8010afe:	f7ff ff9b 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(x2);
 8010b02:	b2f0      	uxtb	r0, r6
 8010b04:	f7ff ff98 	bl	8010a38 <LCD_WR_DATA8>
    
    LCD_WR_REG(0x2b);     //写列地址命令
 8010b08:	202b      	movs	r0, #43	; 0x2b
 8010b0a:	f7ff ffc9 	bl	8010aa0 <LCD_WR_REG>
    LCD_WR_DATA8(y1>>8);  //写列起始地址
 8010b0e:	0a28      	lsrs	r0, r5, #8
 8010b10:	f7ff ff92 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(y1);
 8010b14:	b2e8      	uxtb	r0, r5
 8010b16:	f7ff ff8f 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(y2>>8);  //写结束列地址
 8010b1a:	0a20      	lsrs	r0, r4, #8
 8010b1c:	f7ff ff8c 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(y2);
 8010b20:	b2e0      	uxtb	r0, r4
 8010b22:	f7ff ff89 	bl	8010a38 <LCD_WR_DATA8>
    
    LCD_WR_REG(0x2C);     //写存储器命令
 8010b26:	202c      	movs	r0, #44	; 0x2c
 8010b28:	f7ff ffba 	bl	8010aa0 <LCD_WR_REG>
}
 8010b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b2e <LCD_Clear>:
{
 8010b2e:	b570      	push	{r4, r5, r6, lr}
 8010b30:	4605      	mov	r5, r0
    Address_set(0,0,LCD_W-1,LCD_H-1);
 8010b32:	f240 133f 	movw	r3, #319	; 0x13f
 8010b36:	22ef      	movs	r2, #239	; 0xef
 8010b38:	2100      	movs	r1, #0
 8010b3a:	4608      	mov	r0, r1
 8010b3c:	f7ff ffd0 	bl	8010ae0 <Address_set>
    for(i=0;i<LCD_W;i++)
 8010b40:	2600      	movs	r6, #0
 8010b42:	e009      	b.n	8010b58 <LCD_Clear+0x2a>
        for (j=0;j<LCD_H;j++) LCD_WR_DATA(background);
 8010b44:	4628      	mov	r0, r5
 8010b46:	f7ff ff8f 	bl	8010a68 <LCD_WR_DATA>
 8010b4a:	3401      	adds	r4, #1
 8010b4c:	b2a4      	uxth	r4, r4
 8010b4e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8010b52:	d3f7      	bcc.n	8010b44 <LCD_Clear+0x16>
    for(i=0;i<LCD_W;i++)
 8010b54:	3601      	adds	r6, #1
 8010b56:	b2b6      	uxth	r6, r6
 8010b58:	2eef      	cmp	r6, #239	; 0xef
 8010b5a:	d801      	bhi.n	8010b60 <LCD_Clear+0x32>
        for (j=0;j<LCD_H;j++) LCD_WR_DATA(background);
 8010b5c:	2400      	movs	r4, #0
 8010b5e:	e7f6      	b.n	8010b4e <LCD_Clear+0x20>
}
 8010b60:	bd70      	pop	{r4, r5, r6, pc}

08010b62 <LCD_DrawPoint>:
{
 8010b62:	b510      	push	{r4, lr}
 8010b64:	4614      	mov	r4, r2
    Address_set(x,y,x,y);//设置光标位置
 8010b66:	460b      	mov	r3, r1
 8010b68:	4602      	mov	r2, r0
 8010b6a:	f7ff ffb9 	bl	8010ae0 <Address_set>
    LCD_WR_DATA(color);
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7ff ff7a 	bl	8010a68 <LCD_WR_DATA>
}
 8010b74:	bd10      	pop	{r4, pc}

08010b76 <LCD_DrawCircle>:
{
 8010b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	4607      	mov	r7, r0
 8010b7e:	468b      	mov	fp, r1
 8010b80:	9301      	str	r3, [sp, #4]
	b=r;
 8010b82:	4692      	mov	sl, r2
	di=3-(r<<1);                      //判断下个点位置的标志
 8010b84:	0052      	lsls	r2, r2, #1
 8010b86:	f1c2 0903 	rsb	r9, r2, #3
	a=0;
 8010b8a:	2600      	movs	r6, #0
	while(a<=b)
 8010b8c:	e00a      	b.n	8010ba4 <LCD_DrawCircle+0x2e>
			di +=4*a+6;
 8010b8e:	00b3      	lsls	r3, r6, #2
 8010b90:	3306      	adds	r3, #6
 8010b92:	4499      	add	r9, r3
		LCD_DrawPoint(x+a,y+b,color);
 8010b94:	eb0b 010a 	add.w	r1, fp, sl
 8010b98:	19b8      	adds	r0, r7, r6
 8010b9a:	9a01      	ldr	r2, [sp, #4]
 8010b9c:	b289      	uxth	r1, r1
 8010b9e:	b280      	uxth	r0, r0
 8010ba0:	f7ff ffdf 	bl	8010b62 <LCD_DrawPoint>
	while(a<=b)
 8010ba4:	4556      	cmp	r6, sl
 8010ba6:	dc54      	bgt.n	8010c52 <LCD_DrawCircle+0xdc>
		LCD_DrawPoint(x-b,y-a,color);             //3
 8010ba8:	fa1f f58a 	uxth.w	r5, sl
 8010bac:	1b7b      	subs	r3, r7, r5
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	b2b4      	uxth	r4, r6
 8010bb2:	ebab 0804 	sub.w	r8, fp, r4
 8010bb6:	fa1f f888 	uxth.w	r8, r8
 8010bba:	9a01      	ldr	r2, [sp, #4]
 8010bbc:	4641      	mov	r1, r8
 8010bbe:	9302      	str	r3, [sp, #8]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7ff ffce 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x+b,y-a,color);             //0
 8010bc6:	19eb      	adds	r3, r5, r7
 8010bc8:	b298      	uxth	r0, r3
 8010bca:	9a01      	ldr	r2, [sp, #4]
 8010bcc:	4641      	mov	r1, r8
 8010bce:	9003      	str	r0, [sp, #12]
 8010bd0:	f7ff ffc7 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x-a,y+b,color);             //1
 8010bd4:	1b3b      	subs	r3, r7, r4
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	4610      	mov	r0, r2
 8010bda:	eb05 030b 	add.w	r3, r5, fp
 8010bde:	b299      	uxth	r1, r3
 8010be0:	9a01      	ldr	r2, [sp, #4]
 8010be2:	9105      	str	r1, [sp, #20]
 8010be4:	9004      	str	r0, [sp, #16]
 8010be6:	f7ff ffbc 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x-b,y-a,color);             //7
 8010bea:	9a01      	ldr	r2, [sp, #4]
 8010bec:	4641      	mov	r1, r8
 8010bee:	9802      	ldr	r0, [sp, #8]
 8010bf0:	f7ff ffb7 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x-a,y-b,color);             //2
 8010bf4:	ebab 0505 	sub.w	r5, fp, r5
 8010bf8:	b2ad      	uxth	r5, r5
 8010bfa:	9a01      	ldr	r2, [sp, #4]
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	9804      	ldr	r0, [sp, #16]
 8010c00:	f7ff ffaf 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x+b,y+a,color);             //4
 8010c04:	eb04 080b 	add.w	r8, r4, fp
 8010c08:	fa1f f888 	uxth.w	r8, r8
 8010c0c:	9a01      	ldr	r2, [sp, #4]
 8010c0e:	4641      	mov	r1, r8
 8010c10:	9803      	ldr	r0, [sp, #12]
 8010c12:	f7ff ffa6 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x+a,y-b,color);             //5
 8010c16:	443c      	add	r4, r7
 8010c18:	b2a4      	uxth	r4, r4
 8010c1a:	9a01      	ldr	r2, [sp, #4]
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f7ff ff9f 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x+a,y+b,color);             //6
 8010c24:	9d01      	ldr	r5, [sp, #4]
 8010c26:	462a      	mov	r2, r5
 8010c28:	9905      	ldr	r1, [sp, #20]
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f7ff ff99 	bl	8010b62 <LCD_DrawPoint>
		LCD_DrawPoint(x-b,y+a,color);
 8010c30:	462a      	mov	r2, r5
 8010c32:	4641      	mov	r1, r8
 8010c34:	9802      	ldr	r0, [sp, #8]
 8010c36:	f7ff ff94 	bl	8010b62 <LCD_DrawPoint>
		a++;
 8010c3a:	3601      	adds	r6, #1
		if(di<0)
 8010c3c:	f1b9 0f00 	cmp.w	r9, #0
 8010c40:	dba5      	blt.n	8010b8e <LCD_DrawCircle+0x18>
			di+=10+4*(a-b);
 8010c42:	eba6 030a 	sub.w	r3, r6, sl
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	330a      	adds	r3, #10
 8010c4a:	4499      	add	r9, r3
			b--;
 8010c4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c50:	e7a0      	b.n	8010b94 <LCD_DrawCircle+0x1e>
}
 8010c52:	b007      	add	sp, #28
 8010c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c58 <LCD_DrawLine>:
{
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	b085      	sub	sp, #20
 8010c5e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8010c62:	9401      	str	r4, [sp, #4]
    delta_x=x2-x1; //计算坐标增量
 8010c64:	4682      	mov	sl, r0
 8010c66:	eba2 0800 	sub.w	r8, r2, r0
    delta_y=y2-y1;
 8010c6a:	468b      	mov	fp, r1
 8010c6c:	eba3 0901 	sub.w	r9, r3, r1
    if(delta_x>0)incx=1; //设置单步方向
 8010c70:	f1b8 0f00 	cmp.w	r8, #0
 8010c74:	dd0d      	ble.n	8010c92 <LCD_DrawLine+0x3a>
 8010c76:	2301      	movs	r3, #1
 8010c78:	9302      	str	r3, [sp, #8]
    if(delta_y>0)incy=1;
 8010c7a:	f1b9 0f00 	cmp.w	r9, #0
 8010c7e:	dd14      	ble.n	8010caa <LCD_DrawLine+0x52>
 8010c80:	2301      	movs	r3, #1
 8010c82:	9303      	str	r3, [sp, #12]
    if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 8010c84:	45c8      	cmp	r8, r9
 8010c86:	dd1c      	ble.n	8010cc2 <LCD_DrawLine+0x6a>
 8010c88:	4646      	mov	r6, r8
    int xerr=0,yerr=0,delta_x,delta_y,distance;
 8010c8a:	2500      	movs	r5, #0
 8010c8c:	462f      	mov	r7, r5
    for(t=0;t<=distance+1;t++ )//画线输出
 8010c8e:	462c      	mov	r4, r5
 8010c90:	e01b      	b.n	8010cca <LCD_DrawLine+0x72>
    else if(delta_x==0)incx=0;//垂直线
 8010c92:	f1b8 0f00 	cmp.w	r8, #0
 8010c96:	d005      	beq.n	8010ca4 <LCD_DrawLine+0x4c>
    else {incx=-1;delta_x=-delta_x;}
 8010c98:	f1c8 0800 	rsb	r8, r8, #0
 8010c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca0:	9302      	str	r3, [sp, #8]
 8010ca2:	e7ea      	b.n	8010c7a <LCD_DrawLine+0x22>
    else if(delta_x==0)incx=0;//垂直线
 8010ca4:	f8cd 8008 	str.w	r8, [sp, #8]
 8010ca8:	e7e7      	b.n	8010c7a <LCD_DrawLine+0x22>
    else if(delta_y==0)incy=0;//水平线
 8010caa:	f1b9 0f00 	cmp.w	r9, #0
 8010cae:	d005      	beq.n	8010cbc <LCD_DrawLine+0x64>
    else{incy=-1;delta_y=-delta_y;}
 8010cb0:	f1c9 0900 	rsb	r9, r9, #0
 8010cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cb8:	9303      	str	r3, [sp, #12]
 8010cba:	e7e3      	b.n	8010c84 <LCD_DrawLine+0x2c>
    else if(delta_y==0)incy=0;//水平线
 8010cbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8010cc0:	e7e0      	b.n	8010c84 <LCD_DrawLine+0x2c>
    else distance=delta_y;
 8010cc2:	464e      	mov	r6, r9
 8010cc4:	e7e1      	b.n	8010c8a <LCD_DrawLine+0x32>
    for(t=0;t<=distance+1;t++ )//画线输出
 8010cc6:	3401      	adds	r4, #1
 8010cc8:	b2a4      	uxth	r4, r4
 8010cca:	1c73      	adds	r3, r6, #1
 8010ccc:	429c      	cmp	r4, r3
 8010cce:	dc13      	bgt.n	8010cf8 <LCD_DrawLine+0xa0>
        LCD_DrawPoint(uRow,uCol,color);//画点
 8010cd0:	9a01      	ldr	r2, [sp, #4]
 8010cd2:	fa1f f18b 	uxth.w	r1, fp
 8010cd6:	fa1f f08a 	uxth.w	r0, sl
 8010cda:	f7ff ff42 	bl	8010b62 <LCD_DrawPoint>
        xerr+=delta_x ;
 8010cde:	4447      	add	r7, r8
        yerr+=delta_y ;
 8010ce0:	444d      	add	r5, r9
        if(xerr>distance)
 8010ce2:	42be      	cmp	r6, r7
 8010ce4:	da02      	bge.n	8010cec <LCD_DrawLine+0x94>
            xerr-=distance;
 8010ce6:	1bbf      	subs	r7, r7, r6
            uRow+=incx;
 8010ce8:	9b02      	ldr	r3, [sp, #8]
 8010cea:	449a      	add	sl, r3
        if(yerr>distance)
 8010cec:	42ae      	cmp	r6, r5
 8010cee:	daea      	bge.n	8010cc6 <LCD_DrawLine+0x6e>
            yerr-=distance;
 8010cf0:	1bad      	subs	r5, r5, r6
            uCol+=incy;
 8010cf2:	9b03      	ldr	r3, [sp, #12]
 8010cf4:	449b      	add	fp, r3
 8010cf6:	e7e6      	b.n	8010cc6 <LCD_DrawLine+0x6e>
}
 8010cf8:	b005      	add	sp, #20
 8010cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cfe <LCD_ShowCharactor>:
{
 8010cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d02:	4690      	mov	r8, r2
 8010d04:	461f      	mov	r7, r3
 8010d06:	9d06      	ldr	r5, [sp, #24]
    Address_set(x,y,x+15,y+15); //设置区域
 8010d08:	f101 030f 	add.w	r3, r1, #15
 8010d0c:	f100 020f 	add.w	r2, r0, #15
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	b292      	uxth	r2, r2
 8010d14:	f7ff fee4 	bl	8010ae0 <Address_set>
    for(j=0;j<32;j++)
 8010d18:	2600      	movs	r6, #0
 8010d1a:	e012      	b.n	8010d42 <LCD_ShowCharactor+0x44>
            LCD_WR_DATA(groundbackcolor);
 8010d1c:	4638      	mov	r0, r7
 8010d1e:	f7ff fea3 	bl	8010a68 <LCD_WR_DATA>
        for(i=0;i<8;i++)
 8010d22:	3401      	adds	r4, #1
 8010d24:	b2e4      	uxtb	r4, r4
 8010d26:	2c07      	cmp	r4, #7
 8010d28:	d808      	bhi.n	8010d3c <LCD_ShowCharactor+0x3e>
            if((*temp&(1<<i))!=0)
 8010d2a:	782b      	ldrb	r3, [r5, #0]
 8010d2c:	4123      	asrs	r3, r4
 8010d2e:	f013 0f01 	tst.w	r3, #1
 8010d32:	d0f3      	beq.n	8010d1c <LCD_ShowCharactor+0x1e>
            LCD_WR_DATA(fontcolor);
 8010d34:	4640      	mov	r0, r8
 8010d36:	f7ff fe97 	bl	8010a68 <LCD_WR_DATA>
 8010d3a:	e7f2      	b.n	8010d22 <LCD_ShowCharactor+0x24>
        temp++;
 8010d3c:	3501      	adds	r5, #1
    for(j=0;j<32;j++)
 8010d3e:	3601      	adds	r6, #1
 8010d40:	b2f6      	uxtb	r6, r6
 8010d42:	2e1f      	cmp	r6, #31
 8010d44:	d801      	bhi.n	8010d4a <LCD_ShowCharactor+0x4c>
        for(i=0;i<8;i++)
 8010d46:	2400      	movs	r4, #0
 8010d48:	e7ed      	b.n	8010d26 <LCD_ShowCharactor+0x28>
}
 8010d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010d50 <LCD_ShowString>:
{
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	b085      	sub	sp, #20
 8010d56:	4683      	mov	fp, r0
 8010d58:	9103      	str	r1, [sp, #12]
 8010d5a:	4690      	mov	r8, r2
 8010d5c:	461f      	mov	r7, r3
 8010d5e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    k = 0;
 8010d62:	f04f 0a00 	mov.w	sl, #0
    while(*p != 0)
 8010d66:	e05a      	b.n	8010e1e <LCD_ShowString+0xce>
            Address_set(x+8*k,y,x+7+8*k,y+15); //设置区域
 8010d68:	eb0b 00ca 	add.w	r0, fp, sl, lsl #3
 8010d6c:	b280      	uxth	r0, r0
 8010d6e:	9903      	ldr	r1, [sp, #12]
 8010d70:	460b      	mov	r3, r1
 8010d72:	330f      	adds	r3, #15
 8010d74:	1dc2      	adds	r2, r0, #7
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	b292      	uxth	r2, r2
 8010d7a:	f7ff feb1 	bl	8010ae0 <Address_set>
            temp+=(*p-0x20)*16;
 8010d7e:	f899 3000 	ldrb.w	r3, [r9]
 8010d82:	3b20      	subs	r3, #32
 8010d84:	4d2f      	ldr	r5, [pc, #188]	; (8010e44 <LCD_ShowString+0xf4>)
 8010d86:	eb05 1503 	add.w	r5, r5, r3, lsl #4
            for(j=0;j<16;j++)
 8010d8a:	2600      	movs	r6, #0
 8010d8c:	e012      	b.n	8010db4 <LCD_ShowString+0x64>
                        LCD_WR_DATA(groundbackcolor);
 8010d8e:	4638      	mov	r0, r7
 8010d90:	f7ff fe6a 	bl	8010a68 <LCD_WR_DATA>
                for(i=0;i<8;i++)
 8010d94:	3401      	adds	r4, #1
 8010d96:	b2e4      	uxtb	r4, r4
 8010d98:	2c07      	cmp	r4, #7
 8010d9a:	d808      	bhi.n	8010dae <LCD_ShowString+0x5e>
                    if((*temp&(1<<i))!=0)
 8010d9c:	782b      	ldrb	r3, [r5, #0]
 8010d9e:	4123      	asrs	r3, r4
 8010da0:	f013 0f01 	tst.w	r3, #1
 8010da4:	d0f3      	beq.n	8010d8e <LCD_ShowString+0x3e>
                        LCD_WR_DATA(fontcolor);
 8010da6:	4640      	mov	r0, r8
 8010da8:	f7ff fe5e 	bl	8010a68 <LCD_WR_DATA>
 8010dac:	e7f2      	b.n	8010d94 <LCD_ShowString+0x44>
                temp++;
 8010dae:	3501      	adds	r5, #1
            for(j=0;j<16;j++)
 8010db0:	3601      	adds	r6, #1
 8010db2:	b2f6      	uxtb	r6, r6
 8010db4:	2e0f      	cmp	r6, #15
 8010db6:	d801      	bhi.n	8010dbc <LCD_ShowString+0x6c>
                for(i=0;i<8;i++)
 8010db8:	2400      	movs	r4, #0
 8010dba:	e7ed      	b.n	8010d98 <LCD_ShowString+0x48>
            k++;
 8010dbc:	f10a 0a01 	add.w	sl, sl, #1
 8010dc0:	fa5f fa8a 	uxtb.w	sl, sl
 8010dc4:	e025      	b.n	8010e12 <LCD_ShowString+0xc2>
            for(i=0;i<ChineseCharacterLength;i++)
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b2d      	cmp	r3, #45	; 0x2d
 8010dcc:	d81d      	bhi.n	8010e0a <LCD_ShowString+0xba>
                uint8_t b = *(p+1);
 8010dce:	f899 0001 	ldrb.w	r0, [r9, #1]
                uint8_t c = GB_16[i].Index[0];
 8010dd2:	4d1d      	ldr	r5, [pc, #116]	; (8010e48 <LCD_ShowString+0xf8>)
 8010dd4:	011a      	lsls	r2, r3, #4
 8010dd6:	441a      	add	r2, r3
 8010dd8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8010ddc:	eb05 060c 	add.w	r6, r5, ip
 8010de0:	f915 200c 	ldrsb.w	r2, [r5, ip]
 8010de4:	b2d2      	uxtb	r2, r2
                uint8_t d = GB_16[i].Index[1];
 8010de6:	f996 5001 	ldrsb.w	r5, [r6, #1]
 8010dea:	b2ed      	uxtb	r5, r5
                if( (a == c) && (b == d))
 8010dec:	4291      	cmp	r1, r2
 8010dee:	d1ea      	bne.n	8010dc6 <LCD_ShowString+0x76>
 8010df0:	42a8      	cmp	r0, r5
 8010df2:	d1e8      	bne.n	8010dc6 <LCD_ShowString+0x76>
                    LCD_ShowCharactor(x+8*k,y,fontcolor,groundbackcolor,GB_16[i].Msk);
 8010df4:	4633      	mov	r3, r6
 8010df6:	3302      	adds	r3, #2
 8010df8:	eb0b 00ca 	add.w	r0, fp, sl, lsl #3
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	463b      	mov	r3, r7
 8010e00:	4642      	mov	r2, r8
 8010e02:	9903      	ldr	r1, [sp, #12]
 8010e04:	b280      	uxth	r0, r0
 8010e06:	f7ff ff7a 	bl	8010cfe <LCD_ShowCharactor>
            k++;
 8010e0a:	f10a 0a01 	add.w	sl, sl, #1
 8010e0e:	fa5f fa8a 	uxtb.w	sl, sl
        p++;
 8010e12:	f109 0901 	add.w	r9, r9, #1
        if (k>=30) break;
 8010e16:	f1ba 0f1d 	cmp.w	sl, #29
 8010e1a:	d80f      	bhi.n	8010e3c <LCD_ShowString+0xec>
        ENABLE_INTERRUPTS;
 8010e1c:	b662      	cpsie	i
    while(*p != 0)
 8010e1e:	f899 3000 	ldrb.w	r3, [r9]
 8010e22:	b15b      	cbz	r3, 8010e3c <LCD_ShowString+0xec>
        DISABLE_INTERRUPTS;
 8010e24:	b672      	cpsid	i
        if(*p>=0x20 && *p<=0x7e)
 8010e26:	f899 1000 	ldrb.w	r1, [r9]
 8010e2a:	f1a1 0320 	sub.w	r3, r1, #32
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	2b5e      	cmp	r3, #94	; 0x5e
 8010e32:	d999      	bls.n	8010d68 <LCD_ShowString+0x18>
        else if(*p > 0x7e)
 8010e34:	297e      	cmp	r1, #126	; 0x7e
 8010e36:	d9ec      	bls.n	8010e12 <LCD_ShowString+0xc2>
            for(i=0;i<ChineseCharacterLength;i++)
 8010e38:	2300      	movs	r3, #0
 8010e3a:	e7c6      	b.n	8010dca <LCD_ShowString+0x7a>
}
 8010e3c:	b005      	add	sp, #20
 8010e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e42:	bf00      	nop
 8010e44:	080137ac 	.word	0x080137ac
 8010e48:	08013190 	.word	0x08013190

08010e4c <LCD_DrawSurface>:
{
 8010e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e50:	4681      	mov	r9, r0
 8010e52:	460f      	mov	r7, r1
 8010e54:	4615      	mov	r5, r2
 8010e56:	4698      	mov	r8, r3
 8010e58:	f8bd 6020 	ldrh.w	r6, [sp, #32]
    Address_set(x1,y1,x2,y2);      //设置光标位置
 8010e5c:	f7ff fe40 	bl	8010ae0 <Address_set>
    for(i=y1;i<=y2;i++)
 8010e60:	e008      	b.n	8010e74 <LCD_DrawSurface+0x28>
        for(j=x1;j<=x2;j++)LCD_WR_DATA(color);//画点
 8010e62:	4630      	mov	r0, r6
 8010e64:	f7ff fe00 	bl	8010a68 <LCD_WR_DATA>
 8010e68:	3401      	adds	r4, #1
 8010e6a:	b2a4      	uxth	r4, r4
 8010e6c:	42ac      	cmp	r4, r5
 8010e6e:	d9f8      	bls.n	8010e62 <LCD_DrawSurface+0x16>
    for(i=y1;i<=y2;i++)
 8010e70:	3701      	adds	r7, #1
 8010e72:	b2bf      	uxth	r7, r7
 8010e74:	4547      	cmp	r7, r8
 8010e76:	d801      	bhi.n	8010e7c <LCD_DrawSurface+0x30>
        for(j=x1;j<=x2;j++)LCD_WR_DATA(color);//画点
 8010e78:	464c      	mov	r4, r9
 8010e7a:	e7f7      	b.n	8010e6c <LCD_DrawSurface+0x20>
}
 8010e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010e80 <LCD_aotu>:
{
 8010e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e84:	b087      	sub	sp, #28
 8010e86:	4607      	mov	r7, r0
 8010e88:	9003      	str	r0, [sp, #12]
 8010e8a:	4689      	mov	r9, r1
 8010e8c:	4616      	mov	r6, r2
 8010e8e:	9204      	str	r2, [sp, #16]
 8010e90:	461d      	mov	r5, r3
 8010e92:	9305      	str	r3, [sp, #20]
 8010e94:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    LCD_DrawSurface(x,y,x1,y1,color);
 8010e98:	f248 4430 	movw	r4, #33840	; 0x8430
 8010e9c:	9400      	str	r4, [sp, #0]
 8010e9e:	f7ff ffd5 	bl	8010e4c <LCD_DrawSurface>
    LCD_DrawLine(x,y,x1,y,color);
 8010ea2:	2400      	movs	r4, #0
 8010ea4:	9400      	str	r4, [sp, #0]
 8010ea6:	464b      	mov	r3, r9
 8010ea8:	4632      	mov	r2, r6
 8010eaa:	4649      	mov	r1, r9
 8010eac:	4638      	mov	r0, r7
 8010eae:	f7ff fed3 	bl	8010c58 <LCD_DrawLine>
    LCD_DrawLine(x,y,x,y1,color);
 8010eb2:	9400      	str	r4, [sp, #0]
 8010eb4:	462b      	mov	r3, r5
 8010eb6:	463a      	mov	r2, r7
 8010eb8:	4649      	mov	r1, r9
 8010eba:	4638      	mov	r0, r7
 8010ebc:	f7ff fecc 	bl	8010c58 <LCD_DrawLine>
    LCD_DrawLine(x1,y,x1,y1,color);
 8010ec0:	9400      	str	r4, [sp, #0]
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	4632      	mov	r2, r6
 8010ec6:	4649      	mov	r1, r9
 8010ec8:	4630      	mov	r0, r6
 8010eca:	f7ff fec5 	bl	8010c58 <LCD_DrawLine>
    LCD_DrawLine(x,y1,x1,y1,color);
 8010ece:	9400      	str	r4, [sp, #0]
 8010ed0:	462b      	mov	r3, r5
 8010ed2:	4632      	mov	r2, r6
 8010ed4:	4629      	mov	r1, r5
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	f7ff febe 	bl	8010c58 <LCD_DrawLine>
    for(i=1;i<n;i++)
 8010edc:	2501      	movs	r5, #1
 8010ede:	2d01      	cmp	r5, #1
 8010ee0:	d902      	bls.n	8010ee8 <LCD_aotu+0x68>
};
 8010ee2:	b007      	add	sp, #28
 8010ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        color=(s==0?BLACK:WHITE);  //
 8010ee8:	f1ba 0f00 	cmp.w	sl, #0
 8010eec:	d137      	bne.n	8010f5e <LCD_aotu+0xde>
 8010eee:	f04f 0b00 	mov.w	fp, #0
        LCD_DrawLine(x+i,y+i,x1-i,y+i,color);
 8010ef2:	b2ac      	uxth	r4, r5
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	18e6      	adds	r6, r4, r3
 8010ef8:	b2b6      	uxth	r6, r6
 8010efa:	eb04 0809 	add.w	r8, r4, r9
 8010efe:	fa1f f888 	uxth.w	r8, r8
 8010f02:	9b04      	ldr	r3, [sp, #16]
 8010f04:	1b1f      	subs	r7, r3, r4
 8010f06:	b2bf      	uxth	r7, r7
 8010f08:	f8cd b000 	str.w	fp, [sp]
 8010f0c:	4643      	mov	r3, r8
 8010f0e:	463a      	mov	r2, r7
 8010f10:	4641      	mov	r1, r8
 8010f12:	4630      	mov	r0, r6
 8010f14:	f7ff fea0 	bl	8010c58 <LCD_DrawLine>
        LCD_DrawLine(x+i,y+i,x+i,y1-i,color);
 8010f18:	9b05      	ldr	r3, [sp, #20]
 8010f1a:	1b1c      	subs	r4, r3, r4
 8010f1c:	b2a4      	uxth	r4, r4
 8010f1e:	f8cd b000 	str.w	fp, [sp]
 8010f22:	4623      	mov	r3, r4
 8010f24:	4632      	mov	r2, r6
 8010f26:	4641      	mov	r1, r8
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7ff fe95 	bl	8010c58 <LCD_DrawLine>
        color=(s==0?WHITE:BLACK);
 8010f2e:	f1ba 0f00 	cmp.w	sl, #0
 8010f32:	d117      	bne.n	8010f64 <LCD_aotu+0xe4>
 8010f34:	f64f 7bff 	movw	fp, #65535	; 0xffff
        LCD_DrawLine(x1-i,y+i,x1-i,y1-i,color);
 8010f38:	f8cd b000 	str.w	fp, [sp]
 8010f3c:	4623      	mov	r3, r4
 8010f3e:	463a      	mov	r2, r7
 8010f40:	4641      	mov	r1, r8
 8010f42:	4638      	mov	r0, r7
 8010f44:	f7ff fe88 	bl	8010c58 <LCD_DrawLine>
        LCD_DrawLine(x+i,y1-i,x1-i,y1-i,color);
 8010f48:	f8cd b000 	str.w	fp, [sp]
 8010f4c:	4623      	mov	r3, r4
 8010f4e:	463a      	mov	r2, r7
 8010f50:	4621      	mov	r1, r4
 8010f52:	4630      	mov	r0, r6
 8010f54:	f7ff fe80 	bl	8010c58 <LCD_DrawLine>
    for(i=1;i<n;i++)
 8010f58:	3501      	adds	r5, #1
 8010f5a:	b2ed      	uxtb	r5, r5
 8010f5c:	e7bf      	b.n	8010ede <LCD_aotu+0x5e>
        color=(s==0?BLACK:WHITE);  //
 8010f5e:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8010f62:	e7c6      	b.n	8010ef2 <LCD_aotu+0x72>
        color=(s==0?WHITE:BLACK);
 8010f64:	f04f 0b00 	mov.w	fp, #0
 8010f68:	e7e6      	b.n	8010f38 <LCD_aotu+0xb8>

08010f6a <LCD_Dly_ms>:
//功能概要：延时 - 毫秒级
//======================================================================

void LCD_Dly_ms(uint32_t ms)
{
   for (uint32_t ys=0;ys<(6000*ms);ys++) __asm("nop");
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	e001      	b.n	8010f72 <LCD_Dly_ms+0x8>
 8010f6e:	bf00      	nop
 8010f70:	3201      	adds	r2, #1
 8010f72:	f241 7370 	movw	r3, #6000	; 0x1770
 8010f76:	fb03 f300 	mul.w	r3, r3, r0
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d8f7      	bhi.n	8010f6e <LCD_Dly_ms+0x4>
}
 8010f7e:	4770      	bx	lr

08010f80 <LCD_Init>:
{
 8010f80:	b510      	push	{r4, lr}
 8010f82:	b082      	sub	sp, #8
	spi_init(LCD_SPI,1,20000,0,0);
 8010f84:	2400      	movs	r4, #0
 8010f86:	9400      	str	r4, [sp, #0]
 8010f88:	4623      	mov	r3, r4
 8010f8a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8010f8e:	2101      	movs	r1, #1
 8010f90:	4608      	mov	r0, r1
 8010f92:	f7fe fb11 	bl	800f5b8 <spi_init>
    gpio_init(LCD_RS,1,0);
 8010f96:	4622      	mov	r2, r4
 8010f98:	2101      	movs	r1, #1
 8010f9a:	f44f 7082 	mov.w	r0, #260	; 0x104
 8010f9e:	f7ff f8a9 	bl	80100f4 <gpio_init>
    gpio_init(LCD_DC,1,0);
 8010fa2:	4622      	mov	r2, r4
 8010fa4:	2101      	movs	r1, #1
 8010fa6:	f240 1005 	movw	r0, #261	; 0x105
 8010faa:	f7ff f8a3 	bl	80100f4 <gpio_init>
    gpio_init(LCD_CS,1,1);
 8010fae:	2201      	movs	r2, #1
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	f44f 7083 	mov.w	r0, #262	; 0x106
 8010fb6:	f7ff f89d 	bl	80100f4 <gpio_init>
    LCD_WR_REG_DATA(0,0);
 8010fba:	4621      	mov	r1, r4
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7ff fd87 	bl	8010ad0 <LCD_WR_REG_DATA>
    gpio_set(LCD_RS,0);
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	f44f 7082 	mov.w	r0, #260	; 0x104
 8010fc8:	f7ff f86e 	bl	80100a8 <gpio_set>
	LCD_Dly_ms(100);
 8010fcc:	2064      	movs	r0, #100	; 0x64
 8010fce:	f7ff ffcc 	bl	8010f6a <LCD_Dly_ms>
    gpio_set(LCD_RS,1);
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	f44f 7082 	mov.w	r0, #260	; 0x104
 8010fd8:	f7ff f866 	bl	80100a8 <gpio_set>
	LCD_Dly_ms(100);
 8010fdc:	2064      	movs	r0, #100	; 0x64
 8010fde:	f7ff ffc4 	bl	8010f6a <LCD_Dly_ms>
    LCD_WR_REG(0x36);    //存储器访问控制，显示屏正向显示写0x00/0x08,显示器反向显示写0xD0/0xD8
 8010fe2:	2036      	movs	r0, #54	; 0x36
 8010fe4:	f7ff fd5c 	bl	8010aa0 <LCD_WR_REG>
    LCD_WR_DATA8(0x00);  //0x00：ST7789V（新LCD）正常，ILI9341V红蓝颠倒
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f7ff fd25 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_REG(0xB6);    //显示功能控制
 8010fee:	20b6      	movs	r0, #182	; 0xb6
 8010ff0:	f7ff fd56 	bl	8010aa0 <LCD_WR_REG>
    LCD_WR_DATA8(0x0A);
 8010ff4:	200a      	movs	r0, #10
 8010ff6:	f7ff fd1f 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_DATA8(0xA2);
 8010ffa:	20a2      	movs	r0, #162	; 0xa2
 8010ffc:	f7ff fd1c 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_REG(0x3a);  //定义RGB图像数据格式
 8011000:	203a      	movs	r0, #58	; 0x3a
 8011002:	f7ff fd4d 	bl	8010aa0 <LCD_WR_REG>
    LCD_WR_DATA8(0x05);//16位/像素
 8011006:	2005      	movs	r0, #5
 8011008:	f7ff fd16 	bl	8010a38 <LCD_WR_DATA8>
    LCD_WR_REG(0x11);     //退出睡眠模式
 801100c:	2011      	movs	r0, #17
 801100e:	f7ff fd47 	bl	8010aa0 <LCD_WR_REG>
	LCD_Dly_ms(800);     
 8011012:	f44f 7048 	mov.w	r0, #800	; 0x320
 8011016:	f7ff ffa8 	bl	8010f6a <LCD_Dly_ms>
    LCD_Clear(WHITE);
 801101a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801101e:	f7ff fd86 	bl	8010b2e <LCD_Clear>
    LCD_WR_REG(0x29);
 8011022:	2029      	movs	r0, #41	; 0x29
 8011024:	f7ff fd3c 	bl	8010aa0 <LCD_WR_REG>
}
 8011028:	b002      	add	sp, #8
 801102a:	bd10      	pop	{r4, pc}

0801102c <print_number>:
#endif
                          int   base,
                          int   s,
                          int   type)
#endif
{
 801102c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011030:	b084      	sub	sp, #16
 8011032:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011034:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    register int i;
    register int size;

    size = s;

    digits = (type & LARGE) ? large_digits : small_digits;
 8011036:	f017 0f40 	tst.w	r7, #64	; 0x40
 801103a:	d019      	beq.n	8011070 <print_number+0x44>
 801103c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8011190 <print_number+0x164>
    if (type & LEFT)
 8011040:	f017 0f10 	tst.w	r7, #16
 8011044:	d001      	beq.n	801104a <print_number+0x1e>
        type &= ~ZEROPAD;
 8011046:	f027 0701 	bic.w	r7, r7, #1

    c = (type & ZEROPAD) ? '0' : ' ';
 801104a:	f017 0f01 	tst.w	r7, #1
 801104e:	d012      	beq.n	8011076 <print_number+0x4a>
 8011050:	f04f 0c30 	mov.w	ip, #48	; 0x30

    /* get sign */
    sign = 0;
    if (type & SIGN)
 8011054:	f017 0f02 	tst.w	r7, #2
 8011058:	d014      	beq.n	8011084 <print_number+0x58>
    {
        if (num < 0)
 801105a:	2a00      	cmp	r2, #0
 801105c:	db0e      	blt.n	801107c <print_number+0x50>
        {
            sign = '-';
            num = -num;
        }
        else if (type & PLUS)
 801105e:	f017 0f04 	tst.w	r7, #4
 8011062:	d126      	bne.n	80110b2 <print_number+0x86>
            sign = '+';
        else if (type & SPACE)
 8011064:	f017 0f08 	tst.w	r7, #8
 8011068:	d126      	bne.n	80110b8 <print_number+0x8c>
    sign = 0;
 801106a:	f04f 0e00 	mov.w	lr, #0
 801106e:	e00b      	b.n	8011088 <print_number+0x5c>
    digits = (type & LARGE) ? large_digits : small_digits;
 8011070:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8011194 <print_number+0x168>
 8011074:	e7e4      	b.n	8011040 <print_number+0x14>
    c = (type & ZEROPAD) ? '0' : ' ';
 8011076:	f04f 0c20 	mov.w	ip, #32
 801107a:	e7eb      	b.n	8011054 <print_number+0x28>
            num = -num;
 801107c:	4252      	negs	r2, r2
            sign = '-';
 801107e:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8011082:	e001      	b.n	8011088 <print_number+0x5c>
    sign = 0;
 8011084:	f04f 0e00 	mov.w	lr, #0
            size--;
    }
#endif

    i = 0;
    if (num == 0)
 8011088:	bba2      	cbnz	r2, 80110f4 <print_number+0xc8>
        tmp[i++] = '0';
 801108a:	2330      	movs	r3, #48	; 0x30
 801108c:	f88d 3000 	strb.w	r3, [sp]
 8011090:	2401      	movs	r4, #1
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
 8011092:	42b4      	cmp	r4, r6
 8011094:	dc30      	bgt.n	80110f8 <print_number+0xcc>
 8011096:	4635      	mov	r5, r6
        precision = i;
    size -= precision;
 8011098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801109a:	1b52      	subs	r2, r2, r5
#else
    size -= i;
#endif

    if (!(type & (ZEROPAD | LEFT)))
 801109c:	f017 0f11 	tst.w	r7, #17
 80110a0:	d136      	bne.n	8011110 <print_number+0xe4>
    {
        if ((sign) && (size > 0))
 80110a2:	f1be 0f00 	cmp.w	lr, #0
 80110a6:	d002      	beq.n	80110ae <print_number+0x82>
 80110a8:	2a00      	cmp	r2, #0
 80110aa:	dd00      	ble.n	80110ae <print_number+0x82>
            size--;
 80110ac:	3a01      	subs	r2, #1
        precision = i;
 80110ae:	4613      	mov	r3, r2
 80110b0:	e026      	b.n	8011100 <print_number+0xd4>
            sign = '+';
 80110b2:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 80110b6:	e7e7      	b.n	8011088 <print_number+0x5c>
            sign = ' ';
 80110b8:	f04f 0e20 	mov.w	lr, #32
 80110bc:	e7e4      	b.n	8011088 <print_number+0x5c>
        res = (int)(((unsigned long)*n) % 10U);
 80110be:	4d33      	ldr	r5, [pc, #204]	; (801118c <print_number+0x160>)
 80110c0:	fba5 9502 	umull	r9, r5, r5, r2
 80110c4:	08ed      	lsrs	r5, r5, #3
 80110c6:	46aa      	mov	sl, r5
 80110c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80110cc:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80110d0:	eba2 0909 	sub.w	r9, r2, r9
        *n = (long)(((unsigned long)*n) / 10U);
 80110d4:	4652      	mov	r2, sl
            tmp[i++] = digits[divide(&num, base)];
 80110d6:	f818 9009 	ldrb.w	r9, [r8, r9]
 80110da:	ad04      	add	r5, sp, #16
 80110dc:	4425      	add	r5, r4
 80110de:	f805 9c10 	strb.w	r9, [r5, #-16]
 80110e2:	3401      	adds	r4, #1
        while (num != 0)
 80110e4:	2a00      	cmp	r2, #0
 80110e6:	d0d4      	beq.n	8011092 <print_number+0x66>
    if (base == 10)
 80110e8:	2b0a      	cmp	r3, #10
 80110ea:	d0e8      	beq.n	80110be <print_number+0x92>
        res = (int)(((unsigned long)*n) % 16U);
 80110ec:	f002 090f 	and.w	r9, r2, #15
        *n = (long)(((unsigned long)*n) / 16U);
 80110f0:	0912      	lsrs	r2, r2, #4
 80110f2:	e7f0      	b.n	80110d6 <print_number+0xaa>
    i = 0;
 80110f4:	2400      	movs	r4, #0
 80110f6:	e7f5      	b.n	80110e4 <print_number+0xb8>
        precision = i;
 80110f8:	4625      	mov	r5, r4
 80110fa:	e7cd      	b.n	8011098 <print_number+0x6c>

        while (size-- > 0)
        {
            if (buf < end)
                *buf = ' ';
            ++ buf;
 80110fc:	3001      	adds	r0, #1
        while (size-- > 0)
 80110fe:	4613      	mov	r3, r2
 8011100:	1e5a      	subs	r2, r3, #1
 8011102:	2b00      	cmp	r3, #0
 8011104:	dd04      	ble.n	8011110 <print_number+0xe4>
            if (buf < end)
 8011106:	4288      	cmp	r0, r1
 8011108:	d2f8      	bcs.n	80110fc <print_number+0xd0>
                *buf = ' ';
 801110a:	2320      	movs	r3, #32
 801110c:	7003      	strb	r3, [r0, #0]
 801110e:	e7f5      	b.n	80110fc <print_number+0xd0>
        }
    }

    if (sign)
 8011110:	f1be 0f00 	cmp.w	lr, #0
 8011114:	d005      	beq.n	8011122 <print_number+0xf6>
    {
        if (buf < end)
 8011116:	4288      	cmp	r0, r1
 8011118:	d201      	bcs.n	801111e <print_number+0xf2>
        {
            *buf = sign;
 801111a:	f880 e000 	strb.w	lr, [r0]
        }
        -- size;
 801111e:	3a01      	subs	r2, #1
        ++ buf;
 8011120:	3001      	adds	r0, #1
        }
    }
#endif

    /* no align to the left */
    if (!(type & LEFT))
 8011122:	f017 0f10 	tst.w	r7, #16
 8011126:	d003      	beq.n	8011130 <print_number+0x104>
 8011128:	4613      	mov	r3, r2
 801112a:	e00b      	b.n	8011144 <print_number+0x118>
    {
        while (size-- > 0)
        {
            if (buf < end)
                *buf = c;
            ++ buf;
 801112c:	3001      	adds	r0, #1
        while (size-- > 0)
 801112e:	461a      	mov	r2, r3
 8011130:	1e53      	subs	r3, r2, #1
 8011132:	2a00      	cmp	r2, #0
 8011134:	dd06      	ble.n	8011144 <print_number+0x118>
            if (buf < end)
 8011136:	4288      	cmp	r0, r1
 8011138:	d2f8      	bcs.n	801112c <print_number+0x100>
                *buf = c;
 801113a:	f880 c000 	strb.w	ip, [r0]
 801113e:	e7f5      	b.n	801112c <print_number+0x100>
#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
    {
        if (buf < end)
            *buf = '0';
        ++ buf;
 8011140:	3001      	adds	r0, #1
    while (i < precision--)
 8011142:	4615      	mov	r5, r2
 8011144:	1e6a      	subs	r2, r5, #1
 8011146:	42a5      	cmp	r5, r4
 8011148:	dd06      	ble.n	8011158 <print_number+0x12c>
        if (buf < end)
 801114a:	4288      	cmp	r0, r1
 801114c:	d2f8      	bcs.n	8011140 <print_number+0x114>
            *buf = '0';
 801114e:	2530      	movs	r5, #48	; 0x30
 8011150:	7005      	strb	r5, [r0, #0]
 8011152:	e7f5      	b.n	8011140 <print_number+0x114>
    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
    {
        if (buf < end)
            *buf = tmp[i];
        ++ buf;
 8011154:	3001      	adds	r0, #1
    while (i-- > 0 && (precision_bak != 0))
 8011156:	4614      	mov	r4, r2
 8011158:	1e62      	subs	r2, r4, #1
 801115a:	2c00      	cmp	r4, #0
 801115c:	dd0a      	ble.n	8011174 <print_number+0x148>
 801115e:	b14e      	cbz	r6, 8011174 <print_number+0x148>
        if (buf < end)
 8011160:	4288      	cmp	r0, r1
 8011162:	d2f7      	bcs.n	8011154 <print_number+0x128>
            *buf = tmp[i];
 8011164:	ac04      	add	r4, sp, #16
 8011166:	4414      	add	r4, r2
 8011168:	f814 4c10 	ldrb.w	r4, [r4, #-16]
 801116c:	7004      	strb	r4, [r0, #0]
 801116e:	e7f1      	b.n	8011154 <print_number+0x128>

    while (size-- > 0)
    {
        if (buf < end)
            *buf = ' ';
        ++ buf;
 8011170:	3001      	adds	r0, #1
    while (size-- > 0)
 8011172:	4613      	mov	r3, r2
 8011174:	1e5a      	subs	r2, r3, #1
 8011176:	2b00      	cmp	r3, #0
 8011178:	dd04      	ble.n	8011184 <print_number+0x158>
        if (buf < end)
 801117a:	4288      	cmp	r0, r1
 801117c:	d2f8      	bcs.n	8011170 <print_number+0x144>
            *buf = ' ';
 801117e:	2320      	movs	r3, #32
 8011180:	7003      	strb	r3, [r0, #0]
 8011182:	e7f5      	b.n	8011170 <print_number+0x144>
    }

    return buf;
}
 8011184:	b004      	add	sp, #16
 8011186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801118a:	bf00      	nop
 801118c:	cccccccd 	.word	0xcccccccd
 8011190:	08013eac 	.word	0x08013eac
 8011194:	08013ec8 	.word	0x08013ec8

08011198 <rt_memset>:
{
 8011198:	b410      	push	{r4}
    if (!TOO_SMALL(count) && !UNALIGNED(s))
 801119a:	2a03      	cmp	r2, #3
 801119c:	d921      	bls.n	80111e2 <rt_memset+0x4a>
 801119e:	b2cc      	uxtb	r4, r1
 80111a0:	f010 0f03 	tst.w	r0, #3
 80111a4:	d11f      	bne.n	80111e6 <rt_memset+0x4e>
            buffer = (d << 8) | d;
 80111a6:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
            buffer |= (buffer << 16);
 80111aa:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
        aligned_addr = (unsigned long *)s;
 80111ae:	4603      	mov	r3, r0
 80111b0:	e005      	b.n	80111be <rt_memset+0x26>
            *aligned_addr++ = buffer;
 80111b2:	601c      	str	r4, [r3, #0]
            *aligned_addr++ = buffer;
 80111b4:	605c      	str	r4, [r3, #4]
            *aligned_addr++ = buffer;
 80111b6:	609c      	str	r4, [r3, #8]
            *aligned_addr++ = buffer;
 80111b8:	60dc      	str	r4, [r3, #12]
            count -= 4 * LBLOCKSIZE;
 80111ba:	3a10      	subs	r2, #16
            *aligned_addr++ = buffer;
 80111bc:	3310      	adds	r3, #16
        while (count >= LBLOCKSIZE * 4)
 80111be:	2a0f      	cmp	r2, #15
 80111c0:	d8f7      	bhi.n	80111b2 <rt_memset+0x1a>
 80111c2:	e002      	b.n	80111ca <rt_memset+0x32>
            *aligned_addr++ = buffer;
 80111c4:	601c      	str	r4, [r3, #0]
            count -= LBLOCKSIZE;
 80111c6:	3a04      	subs	r2, #4
            *aligned_addr++ = buffer;
 80111c8:	3304      	adds	r3, #4
        while (count >= LBLOCKSIZE)
 80111ca:	2a03      	cmp	r2, #3
 80111cc:	d8fa      	bhi.n	80111c4 <rt_memset+0x2c>
 80111ce:	e002      	b.n	80111d6 <rt_memset+0x3e>
        *m++ = (char)d;
 80111d0:	7019      	strb	r1, [r3, #0]
 80111d2:	3301      	adds	r3, #1
    while (count--)
 80111d4:	4622      	mov	r2, r4
 80111d6:	1e54      	subs	r4, r2, #1
 80111d8:	2a00      	cmp	r2, #0
 80111da:	d1f9      	bne.n	80111d0 <rt_memset+0x38>
}
 80111dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111e0:	4770      	bx	lr
    char *m = (char *)s;
 80111e2:	4603      	mov	r3, r0
 80111e4:	e7f7      	b.n	80111d6 <rt_memset+0x3e>
 80111e6:	4603      	mov	r3, r0
 80111e8:	e7f5      	b.n	80111d6 <rt_memset+0x3e>

080111ea <rt_memcpy>:
{
 80111ea:	b410      	push	{r4}
    if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
 80111ec:	2a0f      	cmp	r2, #15
 80111ee:	d929      	bls.n	8011244 <rt_memcpy+0x5a>
 80111f0:	ea41 0300 	orr.w	r3, r1, r0
 80111f4:	f013 0f03 	tst.w	r3, #3
 80111f8:	d00f      	beq.n	801121a <rt_memcpy+0x30>
    char *dst_ptr = (char *)dst;
 80111fa:	4603      	mov	r3, r0
 80111fc:	e01c      	b.n	8011238 <rt_memcpy+0x4e>
            *aligned_dst++ = *aligned_src++;
 80111fe:	680c      	ldr	r4, [r1, #0]
 8011200:	601c      	str	r4, [r3, #0]
            *aligned_dst++ = *aligned_src++;
 8011202:	684c      	ldr	r4, [r1, #4]
 8011204:	605c      	str	r4, [r3, #4]
            *aligned_dst++ = *aligned_src++;
 8011206:	688c      	ldr	r4, [r1, #8]
 8011208:	609c      	str	r4, [r3, #8]
            *aligned_dst++ = *aligned_src++;
 801120a:	68cc      	ldr	r4, [r1, #12]
 801120c:	60dc      	str	r4, [r3, #12]
            len -= BIGBLOCKSIZE;
 801120e:	3a10      	subs	r2, #16
            *aligned_dst++ = *aligned_src++;
 8011210:	3110      	adds	r1, #16
 8011212:	3310      	adds	r3, #16
        while (len >= BIGBLOCKSIZE)
 8011214:	2a0f      	cmp	r2, #15
 8011216:	d8f2      	bhi.n	80111fe <rt_memcpy+0x14>
 8011218:	e006      	b.n	8011228 <rt_memcpy+0x3e>
        aligned_dst = (long *)dst_ptr;
 801121a:	4603      	mov	r3, r0
 801121c:	e7fa      	b.n	8011214 <rt_memcpy+0x2a>
            *aligned_dst++ = *aligned_src++;
 801121e:	680c      	ldr	r4, [r1, #0]
 8011220:	601c      	str	r4, [r3, #0]
            len -= LITTLEBLOCKSIZE;
 8011222:	3a04      	subs	r2, #4
            *aligned_dst++ = *aligned_src++;
 8011224:	3104      	adds	r1, #4
 8011226:	3304      	adds	r3, #4
        while (len >= LITTLEBLOCKSIZE)
 8011228:	2a03      	cmp	r2, #3
 801122a:	d8f8      	bhi.n	801121e <rt_memcpy+0x34>
 801122c:	e004      	b.n	8011238 <rt_memcpy+0x4e>
        *dst_ptr++ = *src_ptr++;
 801122e:	780a      	ldrb	r2, [r1, #0]
 8011230:	701a      	strb	r2, [r3, #0]
    while (len--)
 8011232:	4622      	mov	r2, r4
        *dst_ptr++ = *src_ptr++;
 8011234:	3101      	adds	r1, #1
 8011236:	3301      	adds	r3, #1
    while (len--)
 8011238:	1e54      	subs	r4, r2, #1
 801123a:	2a00      	cmp	r2, #0
 801123c:	d1f7      	bne.n	801122e <rt_memcpy+0x44>
}
 801123e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011242:	4770      	bx	lr
    char *dst_ptr = (char *)dst;
 8011244:	4603      	mov	r3, r0
 8011246:	e7f7      	b.n	8011238 <rt_memcpy+0x4e>

08011248 <rt_strncpy>:
    if (n != 0)
 8011248:	b19a      	cbz	r2, 8011272 <rt_strncpy+0x2a>
{
 801124a:	b430      	push	{r4, r5}
 801124c:	4613      	mov	r3, r2
        char *d = dst;
 801124e:	4604      	mov	r4, r0
            if ((*d++ = *s++) == 0)
 8011250:	1c4d      	adds	r5, r1, #1
 8011252:	1c62      	adds	r2, r4, #1
 8011254:	7809      	ldrb	r1, [r1, #0]
 8011256:	7021      	strb	r1, [r4, #0]
 8011258:	b139      	cbz	r1, 801126a <rt_strncpy+0x22>
 801125a:	4614      	mov	r4, r2
 801125c:	4629      	mov	r1, r5
        } while (--n != 0);
 801125e:	3b01      	subs	r3, #1
 8011260:	d1f6      	bne.n	8011250 <rt_strncpy+0x8>
 8011262:	e004      	b.n	801126e <rt_strncpy+0x26>
                    *d++ = 0;
 8011264:	2100      	movs	r1, #0
 8011266:	7011      	strb	r1, [r2, #0]
 8011268:	3201      	adds	r2, #1
                while (--n != 0)
 801126a:	3b01      	subs	r3, #1
 801126c:	d1fa      	bne.n	8011264 <rt_strncpy+0x1c>
}
 801126e:	bc30      	pop	{r4, r5}
 8011270:	4770      	bx	lr
 8011272:	4770      	bx	lr

08011274 <rt_strlen>:
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
 8011274:	4603      	mov	r3, r0
 8011276:	e000      	b.n	801127a <rt_strlen+0x6>
 8011278:	3301      	adds	r3, #1
 801127a:	781a      	ldrb	r2, [r3, #0]
 801127c:	2a00      	cmp	r2, #0
 801127e:	d1fb      	bne.n	8011278 <rt_strlen+0x4>
}
 8011280:	1a18      	subs	r0, r3, r0
 8011282:	4770      	bx	lr

08011284 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char       *buf,
                        rt_size_t   size,
                        const char *fmt,
                        va_list     args)
{
 8011284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011288:	b087      	sub	sp, #28
 801128a:	4682      	mov	sl, r0
 801128c:	9104      	str	r1, [sp, #16]
 801128e:	4614      	mov	r4, r2
 8011290:	9305      	str	r3, [sp, #20]

    str = buf;
    end = buf + size;

    /* Make sure end is always >= buf */
    if (end < buf)
 8011292:	eb10 0801 	adds.w	r8, r0, r1
 8011296:	d303      	bcc.n	80112a0 <rt_vsnprintf+0x1c>
    {
        end  = ((char *) - 1);
        size = end - buf;
 8011298:	43c3      	mvns	r3, r0
 801129a:	9304      	str	r3, [sp, #16]
        end  = ((char *) - 1);
 801129c:	f04f 38ff 	mov.w	r8, #4294967295
 80112a0:	4657      	mov	r7, sl
 80112a2:	e001      	b.n	80112a8 <rt_vsnprintf+0x24>
    {
        if (*fmt != '%')
        {
            if (str < end)
                *str = *fmt;
            ++ str;
 80112a4:	3701      	adds	r7, #1
    for (; *fmt ; ++fmt)
 80112a6:	3401      	adds	r4, #1
 80112a8:	7823      	ldrb	r3, [r4, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	f000 8162 	beq.w	8011574 <rt_vsnprintf+0x2f0>
        if (*fmt != '%')
 80112b0:	2b25      	cmp	r3, #37	; 0x25
 80112b2:	d003      	beq.n	80112bc <rt_vsnprintf+0x38>
            if (str < end)
 80112b4:	4547      	cmp	r7, r8
 80112b6:	d2f5      	bcs.n	80112a4 <rt_vsnprintf+0x20>
                *str = *fmt;
 80112b8:	703b      	strb	r3, [r7, #0]
 80112ba:	e7f3      	b.n	80112a4 <rt_vsnprintf+0x20>
            continue;
        }

        /* process flags */
        flags = 0;
 80112bc:	2500      	movs	r5, #0
 80112be:	e002      	b.n	80112c6 <rt_vsnprintf+0x42>

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
            if (*fmt == '-') flags |= LEFT;
 80112c0:	f045 0510 	orr.w	r5, r5, #16
{
 80112c4:	4614      	mov	r4, r2
            ++ fmt;
 80112c6:	1c62      	adds	r2, r4, #1
            if (*fmt == '-') flags |= LEFT;
 80112c8:	7863      	ldrb	r3, [r4, #1]
 80112ca:	2b2d      	cmp	r3, #45	; 0x2d
 80112cc:	d0f8      	beq.n	80112c0 <rt_vsnprintf+0x3c>
            else if (*fmt == '+') flags |= PLUS;
 80112ce:	2b2b      	cmp	r3, #43	; 0x2b
 80112d0:	d008      	beq.n	80112e4 <rt_vsnprintf+0x60>
            else if (*fmt == ' ') flags |= SPACE;
 80112d2:	2b20      	cmp	r3, #32
 80112d4:	d009      	beq.n	80112ea <rt_vsnprintf+0x66>
            else if (*fmt == '#') flags |= SPECIAL;
 80112d6:	2b23      	cmp	r3, #35	; 0x23
 80112d8:	d00a      	beq.n	80112f0 <rt_vsnprintf+0x6c>
            else if (*fmt == '0') flags |= ZEROPAD;
 80112da:	2b30      	cmp	r3, #48	; 0x30
 80112dc:	d10b      	bne.n	80112f6 <rt_vsnprintf+0x72>
 80112de:	f045 0501 	orr.w	r5, r5, #1
 80112e2:	e7ef      	b.n	80112c4 <rt_vsnprintf+0x40>
            else if (*fmt == '+') flags |= PLUS;
 80112e4:	f045 0504 	orr.w	r5, r5, #4
 80112e8:	e7ec      	b.n	80112c4 <rt_vsnprintf+0x40>
            else if (*fmt == ' ') flags |= SPACE;
 80112ea:	f045 0508 	orr.w	r5, r5, #8
 80112ee:	e7e9      	b.n	80112c4 <rt_vsnprintf+0x40>
            else if (*fmt == '#') flags |= SPECIAL;
 80112f0:	f045 0520 	orr.w	r5, r5, #32
 80112f4:	e7e6      	b.n	80112c4 <rt_vsnprintf+0x40>
            else break;
        }

        /* get field width */
        field_width = -1;
        if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 80112f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80112fa:	2909      	cmp	r1, #9
 80112fc:	d91c      	bls.n	8011338 <rt_vsnprintf+0xb4>
        else if (*fmt == '*')
 80112fe:	2b2a      	cmp	r3, #42	; 0x2a
 8011300:	d01c      	beq.n	801133c <rt_vsnprintf+0xb8>
        field_width = -1;
 8011302:	f04f 36ff 	mov.w	r6, #4294967295
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
        if (*fmt == '.')
 8011306:	7813      	ldrb	r3, [r2, #0]
 8011308:	2b2e      	cmp	r3, #46	; 0x2e
 801130a:	d022      	beq.n	8011352 <rt_vsnprintf+0xce>
        precision = -1;
 801130c:	f04f 39ff 	mov.w	r9, #4294967295
        /* get the conversion qualifier */
        qualifier = 0;
#ifdef RT_PRINTF_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
 8011310:	7811      	ldrb	r1, [r2, #0]
 8011312:	2968      	cmp	r1, #104	; 0x68
 8011314:	d048      	beq.n	80113a8 <rt_vsnprintf+0x124>
 8011316:	296c      	cmp	r1, #108	; 0x6c
 8011318:	d046      	beq.n	80113a8 <rt_vsnprintf+0x124>
 801131a:	4614      	mov	r4, r2
        qualifier = 0;
 801131c:	2100      	movs	r1, #0
 801131e:	e044      	b.n	80113aa <rt_vsnprintf+0x126>
        i = i * 10 + *((*s)++) - '0';
 8011320:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011324:	0073      	lsls	r3, r6, #1
 8011326:	3201      	adds	r2, #1
 8011328:	185e      	adds	r6, r3, r1
 801132a:	3e30      	subs	r6, #48	; 0x30
    while (isdigit(**s))
 801132c:	7811      	ldrb	r1, [r2, #0]
 801132e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011332:	2b09      	cmp	r3, #9
 8011334:	d9f4      	bls.n	8011320 <rt_vsnprintf+0x9c>
 8011336:	e7e6      	b.n	8011306 <rt_vsnprintf+0x82>
    register int i = 0;
 8011338:	2600      	movs	r6, #0
 801133a:	e7f7      	b.n	801132c <rt_vsnprintf+0xa8>
            ++ fmt;
 801133c:	1ca2      	adds	r2, r4, #2
            field_width = rt_va_arg(args, int);
 801133e:	9b05      	ldr	r3, [sp, #20]
 8011340:	1d19      	adds	r1, r3, #4
 8011342:	9105      	str	r1, [sp, #20]
 8011344:	681e      	ldr	r6, [r3, #0]
            if (field_width < 0)
 8011346:	2e00      	cmp	r6, #0
 8011348:	dadd      	bge.n	8011306 <rt_vsnprintf+0x82>
                field_width = -field_width;
 801134a:	4276      	negs	r6, r6
                flags |= LEFT;
 801134c:	f045 0510 	orr.w	r5, r5, #16
 8011350:	e7d9      	b.n	8011306 <rt_vsnprintf+0x82>
            ++ fmt;
 8011352:	1c51      	adds	r1, r2, #1
            if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 8011354:	7853      	ldrb	r3, [r2, #1]
 8011356:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801135a:	2809      	cmp	r0, #9
 801135c:	d91a      	bls.n	8011394 <rt_vsnprintf+0x110>
            else if (*fmt == '*')
 801135e:	2b2a      	cmp	r3, #42	; 0x2a
 8011360:	d01b      	beq.n	801139a <rt_vsnprintf+0x116>
            ++ fmt;
 8011362:	460a      	mov	r2, r1
            if (precision < 0) precision = 0;
 8011364:	f04f 0900 	mov.w	r9, #0
 8011368:	e7d2      	b.n	8011310 <rt_vsnprintf+0x8c>
        i = i * 10 + *((*s)++) - '0';
 801136a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 801136e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8011372:	3101      	adds	r1, #1
 8011374:	eb03 0902 	add.w	r9, r3, r2
 8011378:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    while (isdigit(**s))
 801137c:	780a      	ldrb	r2, [r1, #0]
 801137e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011382:	2b09      	cmp	r3, #9
 8011384:	d9f1      	bls.n	801136a <rt_vsnprintf+0xe6>
 8011386:	460a      	mov	r2, r1
            if (precision < 0) precision = 0;
 8011388:	f1b9 0f00 	cmp.w	r9, #0
 801138c:	dac0      	bge.n	8011310 <rt_vsnprintf+0x8c>
 801138e:	f04f 0900 	mov.w	r9, #0
 8011392:	e7bd      	b.n	8011310 <rt_vsnprintf+0x8c>
    register int i = 0;
 8011394:	f04f 0900 	mov.w	r9, #0
 8011398:	e7f0      	b.n	801137c <rt_vsnprintf+0xf8>
                ++ fmt;
 801139a:	3202      	adds	r2, #2
                precision = rt_va_arg(args, int);
 801139c:	9b05      	ldr	r3, [sp, #20]
 801139e:	1d19      	adds	r1, r3, #4
 80113a0:	9105      	str	r1, [sp, #20]
 80113a2:	f8d3 9000 	ldr.w	r9, [r3]
 80113a6:	e7ef      	b.n	8011388 <rt_vsnprintf+0x104>
#endif
        {
            qualifier = *fmt;
            ++ fmt;
 80113a8:	1c54      	adds	r4, r2, #1
        }

        /* the default base */
        base = 10;

        switch (*fmt)
 80113aa:	7823      	ldrb	r3, [r4, #0]
 80113ac:	3b25      	subs	r3, #37	; 0x25
 80113ae:	2b53      	cmp	r3, #83	; 0x53
 80113b0:	f200 80ad 	bhi.w	801150e <rt_vsnprintf+0x28a>
 80113b4:	e8df f003 	tbb	[pc, r3]
 80113b8:	ababab9b 	.word	0xababab9b
 80113bc:	abababab 	.word	0xabababab
 80113c0:	abababab 	.word	0xabababab
 80113c4:	abababab 	.word	0xabababab
 80113c8:	abababab 	.word	0xabababab
 80113cc:	abababab 	.word	0xabababab
 80113d0:	abababab 	.word	0xabababab
 80113d4:	abababab 	.word	0xabababab
 80113d8:	abababab 	.word	0xabababab
 80113dc:	abababab 	.word	0xabababab
 80113e0:	abababab 	.word	0xabababab
 80113e4:	abababab 	.word	0xabababab
 80113e8:	a3ababab 	.word	0xa3ababab
 80113ec:	abababab 	.word	0xabababab
 80113f0:	abababab 	.word	0xabababab
 80113f4:	a72aabab 	.word	0xa72aabab
 80113f8:	abababab 	.word	0xabababab
 80113fc:	abababa7 	.word	0xabababa7
 8011400:	85a1abab 	.word	0x85a1abab
 8011404:	ab49abab 	.word	0xab49abab
 8011408:	bcababba 	.word	0xbcababba
        {
        case 'c':
            if (!(flags & LEFT))
 801140c:	f015 0f10 	tst.w	r5, #16
 8011410:	d009      	beq.n	8011426 <rt_vsnprintf+0x1a2>
                    ++ str;
                }
            }

            /* get character */
            c = (rt_uint8_t)rt_va_arg(args, int);
 8011412:	9b05      	ldr	r3, [sp, #20]
 8011414:	1d1a      	adds	r2, r3, #4
 8011416:	9205      	str	r2, [sp, #20]
 8011418:	781b      	ldrb	r3, [r3, #0]
            if (str < end) *str = c;
 801141a:	4547      	cmp	r7, r8
 801141c:	d200      	bcs.n	8011420 <rt_vsnprintf+0x19c>
 801141e:	703b      	strb	r3, [r7, #0]
            ++ str;
 8011420:	3701      	adds	r7, #1

            /* put width */
            while (--field_width > 0)
 8011422:	e009      	b.n	8011438 <rt_vsnprintf+0x1b4>
                    ++ str;
 8011424:	3701      	adds	r7, #1
                while (--field_width > 0)
 8011426:	3e01      	subs	r6, #1
 8011428:	2e00      	cmp	r6, #0
 801142a:	ddf2      	ble.n	8011412 <rt_vsnprintf+0x18e>
                    if (str < end) *str = ' ';
 801142c:	4547      	cmp	r7, r8
 801142e:	d2f9      	bcs.n	8011424 <rt_vsnprintf+0x1a0>
 8011430:	2320      	movs	r3, #32
 8011432:	703b      	strb	r3, [r7, #0]
 8011434:	e7f6      	b.n	8011424 <rt_vsnprintf+0x1a0>
            {
                if (str < end) *str = ' ';
                ++ str;
 8011436:	3701      	adds	r7, #1
            while (--field_width > 0)
 8011438:	3e01      	subs	r6, #1
 801143a:	2e00      	cmp	r6, #0
 801143c:	f77f af33 	ble.w	80112a6 <rt_vsnprintf+0x22>
                if (str < end) *str = ' ';
 8011440:	4547      	cmp	r7, r8
 8011442:	d2f8      	bcs.n	8011436 <rt_vsnprintf+0x1b2>
 8011444:	2320      	movs	r3, #32
 8011446:	703b      	strb	r3, [r7, #0]
 8011448:	e7f5      	b.n	8011436 <rt_vsnprintf+0x1b2>
            }
            continue;

        case 's':
            s = rt_va_arg(args, char *);
 801144a:	9b05      	ldr	r3, [sp, #20]
 801144c:	1d1a      	adds	r2, r3, #4
 801144e:	9205      	str	r2, [sp, #20]
 8011450:	f8d3 b000 	ldr.w	fp, [r3]
            if (!s) s = "(NULL)";
 8011454:	f1bb 0f00 	cmp.w	fp, #0
 8011458:	d00d      	beq.n	8011476 <rt_vsnprintf+0x1f2>

            len = rt_strlen(s);
 801145a:	4658      	mov	r0, fp
 801145c:	f7ff ff0a 	bl	8011274 <rt_strlen>
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
 8011460:	f1b9 0f00 	cmp.w	r9, #0
 8011464:	dd02      	ble.n	801146c <rt_vsnprintf+0x1e8>
 8011466:	4581      	cmp	r9, r0
 8011468:	da00      	bge.n	801146c <rt_vsnprintf+0x1e8>
 801146a:	4648      	mov	r0, r9
#endif

            if (!(flags & LEFT))
 801146c:	f015 0f10 	tst.w	r5, #16
 8011470:	d006      	beq.n	8011480 <rt_vsnprintf+0x1fc>
                    if (str < end) *str = ' ';
                    ++ str;
                }
            }

            for (i = 0; i < len; ++i)
 8011472:	2300      	movs	r3, #0
 8011474:	e012      	b.n	801149c <rt_vsnprintf+0x218>
            if (!s) s = "(NULL)";
 8011476:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8011594 <rt_vsnprintf+0x310>
 801147a:	e7ee      	b.n	801145a <rt_vsnprintf+0x1d6>
                    ++ str;
 801147c:	3701      	adds	r7, #1
                while (len < field_width--)
 801147e:	461e      	mov	r6, r3
 8011480:	1e73      	subs	r3, r6, #1
 8011482:	42b0      	cmp	r0, r6
 8011484:	da04      	bge.n	8011490 <rt_vsnprintf+0x20c>
                    if (str < end) *str = ' ';
 8011486:	4547      	cmp	r7, r8
 8011488:	d2f8      	bcs.n	801147c <rt_vsnprintf+0x1f8>
 801148a:	2220      	movs	r2, #32
 801148c:	703a      	strb	r2, [r7, #0]
 801148e:	e7f5      	b.n	801147c <rt_vsnprintf+0x1f8>
                while (len < field_width--)
 8011490:	461e      	mov	r6, r3
 8011492:	e7ee      	b.n	8011472 <rt_vsnprintf+0x1ee>
            {
                if (str < end) *str = *s;
                ++ str;
 8011494:	3701      	adds	r7, #1
                ++ s;
 8011496:	f10b 0b01 	add.w	fp, fp, #1
            for (i = 0; i < len; ++i)
 801149a:	3301      	adds	r3, #1
 801149c:	4283      	cmp	r3, r0
 801149e:	da07      	bge.n	80114b0 <rt_vsnprintf+0x22c>
                if (str < end) *str = *s;
 80114a0:	4547      	cmp	r7, r8
 80114a2:	d2f7      	bcs.n	8011494 <rt_vsnprintf+0x210>
 80114a4:	f89b 2000 	ldrb.w	r2, [fp]
 80114a8:	703a      	strb	r2, [r7, #0]
 80114aa:	e7f3      	b.n	8011494 <rt_vsnprintf+0x210>
            }

            while (len < field_width--)
            {
                if (str < end) *str = ' ';
                ++ str;
 80114ac:	3701      	adds	r7, #1
            while (len < field_width--)
 80114ae:	461e      	mov	r6, r3
 80114b0:	1e73      	subs	r3, r6, #1
 80114b2:	42b0      	cmp	r0, r6
 80114b4:	f6bf aef7 	bge.w	80112a6 <rt_vsnprintf+0x22>
                if (str < end) *str = ' ';
 80114b8:	4547      	cmp	r7, r8
 80114ba:	d2f7      	bcs.n	80114ac <rt_vsnprintf+0x228>
 80114bc:	2220      	movs	r2, #32
 80114be:	703a      	strb	r2, [r7, #0]
 80114c0:	e7f4      	b.n	80114ac <rt_vsnprintf+0x228>
            }
            continue;

        case 'p':
            if (field_width == -1)
 80114c2:	f1b6 3fff 	cmp.w	r6, #4294967295
 80114c6:	d00e      	beq.n	80114e6 <rt_vsnprintf+0x262>
                field_width = sizeof(void *) << 1;
                flags |= ZEROPAD;
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)rt_va_arg(args, void *),
 80114c8:	9b05      	ldr	r3, [sp, #20]
 80114ca:	1d1a      	adds	r2, r3, #4
 80114cc:	9205      	str	r2, [sp, #20]
 80114ce:	681a      	ldr	r2, [r3, #0]
            str = print_number(str, end,
 80114d0:	9502      	str	r5, [sp, #8]
 80114d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80114d6:	9600      	str	r6, [sp, #0]
 80114d8:	2310      	movs	r3, #16
 80114da:	4641      	mov	r1, r8
 80114dc:	4638      	mov	r0, r7
 80114de:	f7ff fda5 	bl	801102c <print_number>
 80114e2:	4607      	mov	r7, r0
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif
            continue;
 80114e4:	e6df      	b.n	80112a6 <rt_vsnprintf+0x22>
                flags |= ZEROPAD;
 80114e6:	f045 0501 	orr.w	r5, r5, #1
                field_width = sizeof(void *) << 1;
 80114ea:	2608      	movs	r6, #8
 80114ec:	e7ec      	b.n	80114c8 <rt_vsnprintf+0x244>

        case '%':
            if (str < end) *str = '%';
 80114ee:	4547      	cmp	r7, r8
 80114f0:	d201      	bcs.n	80114f6 <rt_vsnprintf+0x272>
 80114f2:	2325      	movs	r3, #37	; 0x25
 80114f4:	703b      	strb	r3, [r7, #0]
            ++ str;
 80114f6:	3701      	adds	r7, #1
            continue;
 80114f8:	e6d5      	b.n	80112a6 <rt_vsnprintf+0x22>

        /* integer number formats - set up the flags and "break" */
        case 'o':
            base = 8;
 80114fa:	2308      	movs	r3, #8
            break;
 80114fc:	e019      	b.n	8011532 <rt_vsnprintf+0x2ae>

        case 'X':
            flags |= LARGE;
 80114fe:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        case 'x':
            base = 16;
 8011502:	2310      	movs	r3, #16
 8011504:	e015      	b.n	8011532 <rt_vsnprintf+0x2ae>
            break;

        case 'd':
        case 'i':
            flags |= SIGN;
 8011506:	f045 0502 	orr.w	r5, r5, #2
        base = 10;
 801150a:	230a      	movs	r3, #10
 801150c:	e011      	b.n	8011532 <rt_vsnprintf+0x2ae>
        case 'u':
            break;

        default:
            if (str < end) *str = '%';
 801150e:	4547      	cmp	r7, r8
 8011510:	d201      	bcs.n	8011516 <rt_vsnprintf+0x292>
 8011512:	2325      	movs	r3, #37	; 0x25
 8011514:	703b      	strb	r3, [r7, #0]
            ++ str;
 8011516:	1c7a      	adds	r2, r7, #1

            if (*fmt)
 8011518:	7823      	ldrb	r3, [r4, #0]
 801151a:	b123      	cbz	r3, 8011526 <rt_vsnprintf+0x2a2>
            {
                if (str < end) *str = *fmt;
 801151c:	4542      	cmp	r2, r8
 801151e:	d200      	bcs.n	8011522 <rt_vsnprintf+0x29e>
 8011520:	707b      	strb	r3, [r7, #1]
                ++ str;
 8011522:	3702      	adds	r7, #2
 8011524:	e6bf      	b.n	80112a6 <rt_vsnprintf+0x22>
            }
            else
            {
                -- fmt;
 8011526:	3c01      	subs	r4, #1
            ++ str;
 8011528:	4617      	mov	r7, r2
            }
            continue;
 801152a:	e6bc      	b.n	80112a6 <rt_vsnprintf+0x22>
        base = 10;
 801152c:	230a      	movs	r3, #10
 801152e:	e000      	b.n	8011532 <rt_vsnprintf+0x2ae>
            base = 16;
 8011530:	2310      	movs	r3, #16

#ifdef RT_PRINTF_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
        else if (qualifier == 'l')
#else
        if (qualifier == 'l')
 8011532:	296c      	cmp	r1, #108	; 0x6c
 8011534:	d00f      	beq.n	8011556 <rt_vsnprintf+0x2d2>
#endif
        {
            num = rt_va_arg(args, rt_uint32_t);
            if (flags & SIGN) num = (rt_int32_t)num;
        }
        else if (qualifier == 'h')
 8011536:	2968      	cmp	r1, #104	; 0x68
 8011538:	d012      	beq.n	8011560 <rt_vsnprintf+0x2dc>
            num = (rt_uint16_t)rt_va_arg(args, rt_int32_t);
            if (flags & SIGN) num = (rt_int16_t)num;
        }
        else
        {
            num = rt_va_arg(args, rt_uint32_t);
 801153a:	9a05      	ldr	r2, [sp, #20]
 801153c:	1d11      	adds	r1, r2, #4
 801153e:	9105      	str	r1, [sp, #20]
 8011540:	6812      	ldr	r2, [r2, #0]
            if (flags & SIGN) num = (rt_int32_t)num;
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
 8011542:	9502      	str	r5, [sp, #8]
 8011544:	f8cd 9004 	str.w	r9, [sp, #4]
 8011548:	9600      	str	r6, [sp, #0]
 801154a:	4641      	mov	r1, r8
 801154c:	4638      	mov	r0, r7
 801154e:	f7ff fd6d 	bl	801102c <print_number>
 8011552:	4607      	mov	r7, r0
 8011554:	e6a7      	b.n	80112a6 <rt_vsnprintf+0x22>
            num = rt_va_arg(args, rt_uint32_t);
 8011556:	9a05      	ldr	r2, [sp, #20]
 8011558:	1d11      	adds	r1, r2, #4
 801155a:	9105      	str	r1, [sp, #20]
 801155c:	6812      	ldr	r2, [r2, #0]
 801155e:	e7f0      	b.n	8011542 <rt_vsnprintf+0x2be>
            num = (rt_uint16_t)rt_va_arg(args, rt_int32_t);
 8011560:	9a05      	ldr	r2, [sp, #20]
 8011562:	1d11      	adds	r1, r2, #4
 8011564:	9105      	str	r1, [sp, #20]
 8011566:	6811      	ldr	r1, [r2, #0]
 8011568:	b28a      	uxth	r2, r1
            if (flags & SIGN) num = (rt_int16_t)num;
 801156a:	f015 0f02 	tst.w	r5, #2
 801156e:	d0e8      	beq.n	8011542 <rt_vsnprintf+0x2be>
 8011570:	b20a      	sxth	r2, r1
 8011572:	e7e6      	b.n	8011542 <rt_vsnprintf+0x2be>
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif
    }

    if (size > 0)
 8011574:	9b04      	ldr	r3, [sp, #16]
 8011576:	b123      	cbz	r3, 8011582 <rt_vsnprintf+0x2fe>
    {
        if (str < end) *str = '\0';
 8011578:	4547      	cmp	r7, r8
 801157a:	d307      	bcc.n	801158c <rt_vsnprintf+0x308>
        else
        {
            end[-1] = '\0';
 801157c:	2300      	movs	r3, #0
 801157e:	f808 3c01 	strb.w	r3, [r8, #-1]

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
}
 8011582:	eba7 000a 	sub.w	r0, r7, sl
 8011586:	b007      	add	sp, #28
 8011588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (str < end) *str = '\0';
 801158c:	2300      	movs	r3, #0
 801158e:	703b      	strb	r3, [r7, #0]
 8011590:	e7f7      	b.n	8011582 <rt_vsnprintf+0x2fe>
 8011592:	bf00      	nop
 8011594:	08013ec0 	.word	0x08013ec0

08011598 <rt_vsprintf>:
 * @param buf the buffer to save formatted string
 * @param arg_ptr the arg_ptr
 * @param format the format
 */
rt_int32_t rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
{
 8011598:	b508      	push	{r3, lr}
    return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
 801159a:	4613      	mov	r3, r2
 801159c:	460a      	mov	r2, r1
 801159e:	f04f 31ff 	mov.w	r1, #4294967295
 80115a2:	f7ff fe6f 	bl	8011284 <rt_vsnprintf>
}
 80115a6:	bd08      	pop	{r3, pc}

080115a8 <rt_sprintf>:
 *
 * @param buf the buffer to save formatted string
 * @param format the format
 */
rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
 80115a8:	b40e      	push	{r1, r2, r3}
 80115aa:	b500      	push	{lr}
 80115ac:	b082      	sub	sp, #8
 80115ae:	aa03      	add	r2, sp, #12
 80115b0:	f852 1b04 	ldr.w	r1, [r2], #4
    rt_int32_t n;
    va_list arg_ptr;

    rt_va_start(arg_ptr, format);
 80115b4:	9201      	str	r2, [sp, #4]
    n = rt_vsprintf(buf, format, arg_ptr);
 80115b6:	f7ff ffef 	bl	8011598 <rt_vsprintf>
    rt_va_end(arg_ptr);

    return n;
}
 80115ba:	b002      	add	sp, #8
 80115bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80115c0:	b003      	add	sp, #12
 80115c2:	4770      	bx	lr

080115c4 <rt_hw_console_output>:
#endif

RT_WEAK void rt_hw_console_output(const char *str)
{
    /* empty console output */
}
 80115c4:	4770      	bx	lr
	...

080115c8 <rt_kprintf>:
 * This function will print a formatted string on system console
 *
 * @param fmt the format
 */
void rt_kprintf(const char *fmt, ...)
{
 80115c8:	b40f      	push	{r0, r1, r2, r3}
 80115ca:	b510      	push	{r4, lr}
 80115cc:	b082      	sub	sp, #8
 80115ce:	ab04      	add	r3, sp, #16
 80115d0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    rt_va_start(args, fmt);
 80115d4:	9301      	str	r3, [sp, #4]
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 80115d6:	4c06      	ldr	r4, [pc, #24]	; (80115f0 <rt_kprintf+0x28>)
 80115d8:	217f      	movs	r1, #127	; 0x7f
 80115da:	4620      	mov	r0, r4
 80115dc:	f7ff fe52 	bl	8011284 <rt_vsnprintf>
        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
        rt_device_write(_console_device, 0, rt_log_buf, length);
        _console_device->open_flag = old_flag;
    }
#else
    rt_hw_console_output(rt_log_buf);
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7ff ffef 	bl	80115c4 <rt_hw_console_output>
#endif
    rt_va_end(args);
}
 80115e6:	b002      	add	sp, #8
 80115e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115ec:	b004      	add	sp, #16
 80115ee:	4770      	bx	lr
 80115f0:	200040d8 	.word	0x200040d8

080115f4 <__rt_ffs>:
 * @return return the index of the first bit set. If value is 0, then this function
 * shall return 0.
 */
int __rt_ffs(int value)
{
    if (value == 0) return 0;
 80115f4:	b1e8      	cbz	r0, 8011632 <__rt_ffs+0x3e>

    if (value & 0xff)
 80115f6:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80115fa:	d10a      	bne.n	8011612 <__rt_ffs+0x1e>
        return __lowest_bit_bitmap[value & 0xff] + 1;

    if (value & 0xff00)
 80115fc:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8011600:	d10b      	bne.n	801161a <__rt_ffs+0x26>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;

    if (value & 0xff0000)
 8011602:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
 8011606:	d10e      	bne.n	8011626 <__rt_ffs+0x32>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
 8011608:	0e03      	lsrs	r3, r0, #24
 801160a:	4a0a      	ldr	r2, [pc, #40]	; (8011634 <__rt_ffs+0x40>)
 801160c:	5cd0      	ldrb	r0, [r2, r3]
 801160e:	3019      	adds	r0, #25
 8011610:	4770      	bx	lr
        return __lowest_bit_bitmap[value & 0xff] + 1;
 8011612:	4b08      	ldr	r3, [pc, #32]	; (8011634 <__rt_ffs+0x40>)
 8011614:	5c98      	ldrb	r0, [r3, r2]
 8011616:	3001      	adds	r0, #1
 8011618:	4770      	bx	lr
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
 801161a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801161e:	4a05      	ldr	r2, [pc, #20]	; (8011634 <__rt_ffs+0x40>)
 8011620:	5cd0      	ldrb	r0, [r2, r3]
 8011622:	3009      	adds	r0, #9
 8011624:	4770      	bx	lr
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
 8011626:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801162a:	4a02      	ldr	r2, [pc, #8]	; (8011634 <__rt_ffs+0x40>)
 801162c:	5cd0      	ldrb	r0, [r2, r3]
 801162e:	3011      	adds	r0, #17
 8011630:	4770      	bx	lr
}
 8011632:	4770      	bx	lr
 8011634:	08013dac 	.word	0x08013dac

08011638 <thread_delayRed>:
//参数说明：无
//功能概要：每1秒红灯反转
//内部调用：无
//======================================================================
void thread_delayRed(void)
{   
 8011638:	b508      	push	{r3, lr}
    userprintf("------第一次进入红灯线程：%x，\r\n",thread_self());
 801163a:	f7fd fda5 	bl	800f188 <rt_thread_self>
 801163e:	4601      	mov	r1, r0
 8011640:	480e      	ldr	r0, [pc, #56]	; (801167c <thread_delayRed+0x44>)
 8011642:	f7fd fcf5 	bl	800f030 <userprintf>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011646:	2201      	movs	r2, #1
 8011648:	4611      	mov	r1, r2
 801164a:	f240 1007 	movw	r0, #263	; 0x107
 801164e:	f7fe fd51 	bl	80100f4 <gpio_init>
    while (1)
    {
    	userprintf("3-1.当前运行的线程=%x，红灯延时5秒（开始）；\r\n",thread_self());
 8011652:	f7fd fd99 	bl	800f188 <rt_thread_self>
 8011656:	4601      	mov	r1, r0
 8011658:	4809      	ldr	r0, [pc, #36]	; (8011680 <thread_delayRed+0x48>)
 801165a:	f7fd fce9 	bl	800f030 <userprintf>
		delay_ms(5000);  //延时5秒
 801165e:	f241 3088 	movw	r0, #5000	; 0x1388
 8011662:	f7fd fe89 	bl	800f378 <rt_thread_delay>
		userprintf("3-2.当前运行的线程=%x，红灯延时5秒（结束），红灯反转。\r\n",thread_self());
 8011666:	f7fd fd8f 	bl	800f188 <rt_thread_self>
 801166a:	4601      	mov	r1, r0
 801166c:	4805      	ldr	r0, [pc, #20]	; (8011684 <thread_delayRed+0x4c>)
 801166e:	f7fd fcdf 	bl	800f030 <userprintf>
		gpio_reverse(LIGHT_RED);    //灯的状态反转
 8011672:	f240 1007 	movw	r0, #263	; 0x107
 8011676:	f7fe fda9 	bl	80101cc <gpio_reverse>
 801167a:	e7ea      	b.n	8011652 <thread_delayRed+0x1a>
 801167c:	08013edc 	.word	0x08013edc
 8011680:	08013f00 	.word	0x08013f00
 8011684:	08013f30 	.word	0x08013f30

08011688 <rt_tick_get>:
 */
rt_tick_t rt_tick_get(void)
{
    /* return the global tick */
    return rt_tick;
}
 8011688:	4b01      	ldr	r3, [pc, #4]	; (8011690 <rt_tick_get+0x8>)
 801168a:	6818      	ldr	r0, [r3, #0]
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	20004158 	.word	0x20004158

08011694 <rt_tick_increase>:
/**
 * This function will notify kernel there is one tick passed. Normally,
 * this function is invoked by clock ISR.
 */
void rt_tick_increase(void)
{
 8011694:	b508      	push	{r3, lr}
    struct rt_thread *thread;

    /* increase the global tick */
    ++ rt_tick;
 8011696:	4a09      	ldr	r2, [pc, #36]	; (80116bc <rt_tick_increase+0x28>)
 8011698:	6813      	ldr	r3, [r2, #0]
 801169a:	3301      	adds	r3, #1
 801169c:	6013      	str	r3, [r2, #0]

    /* check time slice */
    thread = rt_thread_self();
 801169e:	f7fd fd73 	bl	800f188 <rt_thread_self>

    -- thread->remaining_tick;
 80116a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80116a4:	3b01      	subs	r3, #1
 80116a6:	6483      	str	r3, [r0, #72]	; 0x48
    if (thread->remaining_tick == 0)
 80116a8:	b113      	cbz	r3, 80116b0 <rt_tick_increase+0x1c>
        /* yield */
        rt_thread_yield();
    }

    /* check timer */
    rt_timer_check();
 80116aa:	f7fe f955 	bl	800f958 <rt_timer_check>
}
 80116ae:	bd08      	pop	{r3, pc}
        thread->remaining_tick = thread->init_tick;
 80116b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80116b2:	6483      	str	r3, [r0, #72]	; 0x48
        rt_thread_yield();
 80116b4:	f7fd fde6 	bl	800f284 <rt_thread_yield>
 80116b8:	e7f7      	b.n	80116aa <rt_tick_increase+0x16>
 80116ba:	bf00      	nop
 80116bc:	20004158 	.word	0x20004158

080116c0 <thread_cmdchoose>:
//功能概要：根据接收到的命令，启动/挂起对应的线程
//内部调用：无
//======================================================================

void thread_cmdchoose()
{
 80116c0:	b500      	push	{lr}
 80116c2:	b087      	sub	sp, #28
 80116c4:	e1db      	b.n	8011a7e <thread_cmdchoose+0x3be>
        uart_send_string(UART_User,(void *)"接收到事件信号\n");
        if(recvedstate==CMD_CHOOSE_EVENT)  //如果接收完成且正确
    	{
            if(gcRecvBuf[7]==CONNECT_CODE)//命令字为66，代表Pc端正和mcu取得连接
            {
                uart_send_string(UART_User,(void*) "I can see you");//回发连接确认
 80116c6:	4997      	ldr	r1, [pc, #604]	; (8011924 <thread_cmdchoose+0x264>)
 80116c8:	2002      	movs	r0, #2
 80116ca:	f000 fded 	bl	80122a8 <uart_send_string>
                LCD_ShowString(96,50,BLUE,GRAY,(char *)" 已连接");
 80116ce:	4b96      	ldr	r3, [pc, #600]	; (8011928 <thread_cmdchoose+0x268>)
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	f248 4330 	movw	r3, #33840	; 0x8430
 80116d6:	221f      	movs	r2, #31
 80116d8:	2132      	movs	r1, #50	; 0x32
 80116da:	2060      	movs	r0, #96	; 0x60
 80116dc:	f7ff fb38 	bl	8010d50 <LCD_ShowString>
 80116e0:	e1e8      	b.n	8011ab4 <thread_cmdchoose+0x3f4>
            }
            if(gcRecvBuf[7]==RESULT_CODE)
            {

                rt_thread_delete(thd_eventBlue);
 80116e2:	4b92      	ldr	r3, [pc, #584]	; (801192c <thread_cmdchoose+0x26c>)
 80116e4:	6818      	ldr	r0, [r3, #0]
 80116e6:	f7fd fdab 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_eventGreen);
 80116ea:	4b91      	ldr	r3, [pc, #580]	; (8011930 <thread_cmdchoose+0x270>)
 80116ec:	6818      	ldr	r0, [r3, #0]
 80116ee:	f7fd fda7 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_messagerecv);
 80116f2:	4b90      	ldr	r3, [pc, #576]	; (8011934 <thread_cmdchoose+0x274>)
 80116f4:	6818      	ldr	r0, [r3, #0]
 80116f6:	f7fd fda3 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_SPThread1);	
 80116fa:	4b8f      	ldr	r3, [pc, #572]	; (8011938 <thread_cmdchoose+0x278>)
 80116fc:	6818      	ldr	r0, [r3, #0]
 80116fe:	f7fd fd9f 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_SPThread2);
 8011702:	4b8e      	ldr	r3, [pc, #568]	; (801193c <thread_cmdchoose+0x27c>)
 8011704:	6818      	ldr	r0, [r3, #0]
 8011706:	f7fd fd9b 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_SPThread3);
 801170a:	4b8d      	ldr	r3, [pc, #564]	; (8011940 <thread_cmdchoose+0x280>)
 801170c:	6818      	ldr	r0, [r3, #0]
 801170e:	f7fd fd97 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_mutexRed);
 8011712:	4b8c      	ldr	r3, [pc, #560]	; (8011944 <thread_cmdchoose+0x284>)
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	f7fd fd93 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_mutexGreen);
 801171a:	4b8b      	ldr	r3, [pc, #556]	; (8011948 <thread_cmdchoose+0x288>)
 801171c:	6818      	ldr	r0, [r3, #0]
 801171e:	f7fd fd8f 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_mutexBlue);
 8011722:	4b8a      	ldr	r3, [pc, #552]	; (801194c <thread_cmdchoose+0x28c>)
 8011724:	6818      	ldr	r0, [r3, #0]
 8011726:	f7fd fd8b 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_delayBlue);
 801172a:	4b89      	ldr	r3, [pc, #548]	; (8011950 <thread_cmdchoose+0x290>)
 801172c:	6818      	ldr	r0, [r3, #0]
 801172e:	f7fd fd87 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_delayGreen);
 8011732:	4b88      	ldr	r3, [pc, #544]	; (8011954 <thread_cmdchoose+0x294>)
 8011734:	6818      	ldr	r0, [r3, #0]
 8011736:	f7fd fd83 	bl	800f240 <rt_thread_delete>
                rt_thread_delete(thd_delayRed);
 801173a:	4b87      	ldr	r3, [pc, #540]	; (8011958 <thread_cmdchoose+0x298>)
 801173c:	6818      	ldr	r0, [r3, #0]
 801173e:	f7fd fd7f 	bl	800f240 <rt_thread_delete>
 8011742:	e1bd      	b.n	8011ac0 <thread_cmdchoose+0x400>

            }

    		if(gcRecvBuf[7]==EVENT_CODE) //命令字为90，代表“事件功能”
            {
                if(gcRecvBuf[8]==0x01)//命令参数为01，代表启动该功能，传递事件信号把小灯线程从阻塞队列移到就绪队列
 8011744:	4b85      	ldr	r3, [pc, #532]	; (801195c <thread_cmdchoose+0x29c>)
 8011746:	7a1b      	ldrb	r3, [r3, #8]
 8011748:	b2db      	uxtb	r3, r3
 801174a:	2b01      	cmp	r3, #1
 801174c:	d02c      	beq.n	80117a8 <thread_cmdchoose+0xe8>
                    rt_thread_startup(thd_eventGreen);
                    rt_event_send(EventWord,BLUE_LIGHT_EVENT);
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行事件演示      ");

                }
                if(gcRecvBuf[8]==0x00)//命令参数为00，代表关闭该功能，重新启动小灯线程，把小灯线程移入阻塞队列
 801174e:	4b83      	ldr	r3, [pc, #524]	; (801195c <thread_cmdchoose+0x29c>)
 8011750:	7a1b      	ldrb	r3, [r3, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f040 81ba 	bne.w	8011acc <thread_cmdchoose+0x40c>
                {
                    uart_send_string(UART_User,(void *)"接收到事件功能结束命令，事件功能模块结束");
 8011758:	4981      	ldr	r1, [pc, #516]	; (8011960 <thread_cmdchoose+0x2a0>)
 801175a:	2002      	movs	r0, #2
 801175c:	f000 fda4 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_eventBlue);
 8011760:	4b72      	ldr	r3, [pc, #456]	; (801192c <thread_cmdchoose+0x26c>)
 8011762:	6818      	ldr	r0, [r3, #0]
 8011764:	f7fd fd16 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_eventGreen);
 8011768:	4b71      	ldr	r3, [pc, #452]	; (8011930 <thread_cmdchoose+0x270>)
 801176a:	6818      	ldr	r0, [r3, #0]
 801176c:	f7fd fd12 	bl	800f194 <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011770:	2201      	movs	r2, #1
 8011772:	4611      	mov	r1, r2
 8011774:	f240 1009 	movw	r0, #265	; 0x109
 8011778:	f7fe fcbc 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 801177c:	2201      	movs	r2, #1
 801177e:	4611      	mov	r1, r2
 8011780:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011784:	f7fe fcb6 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011788:	2201      	movs	r2, #1
 801178a:	4611      	mov	r1, r2
 801178c:	f240 1007 	movw	r0, #263	; 0x107
 8011790:	f7fe fcb0 	bl	80100f4 <gpio_init>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:等待命令      ");
 8011794:	4b73      	ldr	r3, [pc, #460]	; (8011964 <thread_cmdchoose+0x2a4>)
 8011796:	9300      	str	r3, [sp, #0]
 8011798:	f248 4330 	movw	r3, #33840	; 0x8430
 801179c:	2200      	movs	r2, #0
 801179e:	217d      	movs	r1, #125	; 0x7d
 80117a0:	2006      	movs	r0, #6
 80117a2:	f7ff fad5 	bl	8010d50 <LCD_ShowString>
 80117a6:	e191      	b.n	8011acc <thread_cmdchoose+0x40c>
                    uart_send_string(UART_User,(void *)"接收到事件功能开启命令，开启事件功能");
 80117a8:	496f      	ldr	r1, [pc, #444]	; (8011968 <thread_cmdchoose+0x2a8>)
 80117aa:	2002      	movs	r0, #2
 80117ac:	f000 fd7c 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_messagerecv);
 80117b0:	4b60      	ldr	r3, [pc, #384]	; (8011934 <thread_cmdchoose+0x274>)
 80117b2:	6818      	ldr	r0, [r3, #0]
 80117b4:	f7fd fcee 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread1);	
 80117b8:	4b5f      	ldr	r3, [pc, #380]	; (8011938 <thread_cmdchoose+0x278>)
 80117ba:	6818      	ldr	r0, [r3, #0]
 80117bc:	f7fd fcea 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 80117c0:	4b5e      	ldr	r3, [pc, #376]	; (801193c <thread_cmdchoose+0x27c>)
 80117c2:	6818      	ldr	r0, [r3, #0]
 80117c4:	f7fd fce6 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 80117c8:	4b5d      	ldr	r3, [pc, #372]	; (8011940 <thread_cmdchoose+0x280>)
 80117ca:	6818      	ldr	r0, [r3, #0]
 80117cc:	f7fd fce2 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexRed);
 80117d0:	4b5c      	ldr	r3, [pc, #368]	; (8011944 <thread_cmdchoose+0x284>)
 80117d2:	6818      	ldr	r0, [r3, #0]
 80117d4:	f7fd fcde 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexGreen);
 80117d8:	4b5b      	ldr	r3, [pc, #364]	; (8011948 <thread_cmdchoose+0x288>)
 80117da:	6818      	ldr	r0, [r3, #0]
 80117dc:	f7fd fcda 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexBlue);
 80117e0:	4b5a      	ldr	r3, [pc, #360]	; (801194c <thread_cmdchoose+0x28c>)
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	f7fd fcd6 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayBlue);
 80117e8:	4b59      	ldr	r3, [pc, #356]	; (8011950 <thread_cmdchoose+0x290>)
 80117ea:	6818      	ldr	r0, [r3, #0]
 80117ec:	f7fd fcd2 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayGreen);
 80117f0:	4b58      	ldr	r3, [pc, #352]	; (8011954 <thread_cmdchoose+0x294>)
 80117f2:	6818      	ldr	r0, [r3, #0]
 80117f4:	f7fd fcce 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayRed);
 80117f8:	4b57      	ldr	r3, [pc, #348]	; (8011958 <thread_cmdchoose+0x298>)
 80117fa:	6818      	ldr	r0, [r3, #0]
 80117fc:	f7fd fcca 	bl	800f194 <rt_thread_detach>
                    rt_thread_startup(thd_eventBlue);
 8011800:	4b4a      	ldr	r3, [pc, #296]	; (801192c <thread_cmdchoose+0x26c>)
 8011802:	6818      	ldr	r0, [r3, #0]
 8011804:	f7fd fde0 	bl	800f3c8 <rt_thread_startup>
                    rt_thread_startup(thd_eventGreen);
 8011808:	4b49      	ldr	r3, [pc, #292]	; (8011930 <thread_cmdchoose+0x270>)
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	f7fd fddc 	bl	800f3c8 <rt_thread_startup>
                    rt_event_send(EventWord,BLUE_LIGHT_EVENT);
 8011810:	2108      	movs	r1, #8
 8011812:	4b56      	ldr	r3, [pc, #344]	; (801196c <thread_cmdchoose+0x2ac>)
 8011814:	6818      	ldr	r0, [r3, #0]
 8011816:	f7fe fe9c 	bl	8010552 <rt_event_send>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行事件演示      ");
 801181a:	4b55      	ldr	r3, [pc, #340]	; (8011970 <thread_cmdchoose+0x2b0>)
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	f248 4330 	movw	r3, #33840	; 0x8430
 8011822:	2200      	movs	r2, #0
 8011824:	217d      	movs	r1, #125	; 0x7d
 8011826:	2006      	movs	r0, #6
 8011828:	f7ff fa92 	bl	8010d50 <LCD_ShowString>
 801182c:	e78f      	b.n	801174e <thread_cmdchoose+0x8e>

            }

            if(gcRecvBuf[7]==MESSAGE_CODE) //命令字为91，代表“消息队列功能”
            {
                rt_thread_detach(thd_eventBlue);
 801182e:	4b3f      	ldr	r3, [pc, #252]	; (801192c <thread_cmdchoose+0x26c>)
 8011830:	6818      	ldr	r0, [r3, #0]
 8011832:	f7fd fcaf 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_eventGreen);
 8011836:	4b3e      	ldr	r3, [pc, #248]	; (8011930 <thread_cmdchoose+0x270>)
 8011838:	6818      	ldr	r0, [r3, #0]
 801183a:	f7fd fcab 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_SPThread1);	
 801183e:	4b3e      	ldr	r3, [pc, #248]	; (8011938 <thread_cmdchoose+0x278>)
 8011840:	6818      	ldr	r0, [r3, #0]
 8011842:	f7fd fca7 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_SPThread2);
 8011846:	4b3d      	ldr	r3, [pc, #244]	; (801193c <thread_cmdchoose+0x27c>)
 8011848:	6818      	ldr	r0, [r3, #0]
 801184a:	f7fd fca3 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_SPThread3);
 801184e:	4b3c      	ldr	r3, [pc, #240]	; (8011940 <thread_cmdchoose+0x280>)
 8011850:	6818      	ldr	r0, [r3, #0]
 8011852:	f7fd fc9f 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_mutexRed);
 8011856:	4b3b      	ldr	r3, [pc, #236]	; (8011944 <thread_cmdchoose+0x284>)
 8011858:	6818      	ldr	r0, [r3, #0]
 801185a:	f7fd fc9b 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_mutexGreen);
 801185e:	4b3a      	ldr	r3, [pc, #232]	; (8011948 <thread_cmdchoose+0x288>)
 8011860:	6818      	ldr	r0, [r3, #0]
 8011862:	f7fd fc97 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_mutexBlue);
 8011866:	4b39      	ldr	r3, [pc, #228]	; (801194c <thread_cmdchoose+0x28c>)
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	f7fd fc93 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_delayBlue);
 801186e:	4b38      	ldr	r3, [pc, #224]	; (8011950 <thread_cmdchoose+0x290>)
 8011870:	6818      	ldr	r0, [r3, #0]
 8011872:	f7fd fc8f 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_delayGreen);
 8011876:	4b37      	ldr	r3, [pc, #220]	; (8011954 <thread_cmdchoose+0x294>)
 8011878:	6818      	ldr	r0, [r3, #0]
 801187a:	f7fd fc8b 	bl	800f194 <rt_thread_detach>
                rt_thread_detach(thd_delayRed);
 801187e:	4b36      	ldr	r3, [pc, #216]	; (8011958 <thread_cmdchoose+0x298>)
 8011880:	6818      	ldr	r0, [r3, #0]
 8011882:	f7fd fc87 	bl	800f194 <rt_thread_detach>


                rt_thread_startup(thd_messagerecv);//启动消息队列线程
 8011886:	4b2b      	ldr	r3, [pc, #172]	; (8011934 <thread_cmdchoose+0x274>)
 8011888:	6818      	ldr	r0, [r3, #0]
 801188a:	f7fd fd9d 	bl	800f3c8 <rt_thread_startup>
                //取出收到的数据作为一个消息
			    for(int i=0;i<8;i++)
 801188e:	2300      	movs	r3, #0
 8011890:	2b07      	cmp	r3, #7
 8011892:	dc09      	bgt.n	80118a8 <thread_cmdchoose+0x1e8>
                {
                    recvData[i] = gcRecvBuf[i+9];
 8011894:	f103 0209 	add.w	r2, r3, #9
 8011898:	4930      	ldr	r1, [pc, #192]	; (801195c <thread_cmdchoose+0x29c>)
 801189a:	5c89      	ldrb	r1, [r1, r2]
 801189c:	aa06      	add	r2, sp, #24
 801189e:	441a      	add	r2, r3
 80118a0:	f802 1c10 	strb.w	r1, [r2, #-16]
			    for(int i=0;i<8;i++)
 80118a4:	3301      	adds	r3, #1
 80118a6:	e7f3      	b.n	8011890 <thread_cmdchoose+0x1d0>

                }
				
		        //将该消息存放到消息队列
			    rt_mq_send(mq,recvData,sizeof(recvData));
 80118a8:	2209      	movs	r2, #9
 80118aa:	a902      	add	r1, sp, #8
 80118ac:	4b31      	ldr	r3, [pc, #196]	; (8011974 <thread_cmdchoose+0x2b4>)
 80118ae:	6818      	ldr	r0, [r3, #0]
 80118b0:	f7fe ff85 	bl	80107be <rt_mq_send>
 80118b4:	e110      	b.n	8011ad8 <thread_cmdchoose+0x418>

            

            if(gcRecvBuf[7]==SEM_CODE) //命令字为92，代表“信号量功能”
            {
                if(gcRecvBuf[8]==0x01)//命令参数为01，代表启动该功能
 80118b6:	4b29      	ldr	r3, [pc, #164]	; (801195c <thread_cmdchoose+0x29c>)
 80118b8:	7a1b      	ldrb	r3, [r3, #8]
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d05d      	beq.n	801197c <thread_cmdchoose+0x2bc>
	                rt_thread_startup(thd_SPThread3);//启动信号量线程
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行信号量演示      ");


                }
                if(gcRecvBuf[8]==0x00)//命令参数为00，代表关闭该功能
 80118c0:	4b26      	ldr	r3, [pc, #152]	; (801195c <thread_cmdchoose+0x29c>)
 80118c2:	7a1b      	ldrb	r3, [r3, #8]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f040 810d 	bne.w	8011ae4 <thread_cmdchoose+0x424>
                {
                    uart_send_string(UART_User,(void *)"接收到信号量功能结束命令，信号量功能模块结束");
 80118ca:	492b      	ldr	r1, [pc, #172]	; (8011978 <thread_cmdchoose+0x2b8>)
 80118cc:	2002      	movs	r0, #2
 80118ce:	f000 fceb 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_SPThread1);	
 80118d2:	4b19      	ldr	r3, [pc, #100]	; (8011938 <thread_cmdchoose+0x278>)
 80118d4:	6818      	ldr	r0, [r3, #0]
 80118d6:	f7fd fc5d 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 80118da:	4b18      	ldr	r3, [pc, #96]	; (801193c <thread_cmdchoose+0x27c>)
 80118dc:	6818      	ldr	r0, [r3, #0]
 80118de:	f7fd fc59 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 80118e2:	4b17      	ldr	r3, [pc, #92]	; (8011940 <thread_cmdchoose+0x280>)
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	f7fd fc55 	bl	800f194 <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 80118ea:	2201      	movs	r2, #1
 80118ec:	4611      	mov	r1, r2
 80118ee:	f240 1009 	movw	r0, #265	; 0x109
 80118f2:	f7fe fbff 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 80118f6:	2201      	movs	r2, #1
 80118f8:	4611      	mov	r1, r2
 80118fa:	f44f 7084 	mov.w	r0, #264	; 0x108
 80118fe:	f7fe fbf9 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011902:	2201      	movs	r2, #1
 8011904:	4611      	mov	r1, r2
 8011906:	f240 1007 	movw	r0, #263	; 0x107
 801190a:	f7fe fbf3 	bl	80100f4 <gpio_init>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:等待命令      ");
 801190e:	4b15      	ldr	r3, [pc, #84]	; (8011964 <thread_cmdchoose+0x2a4>)
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	f248 4330 	movw	r3, #33840	; 0x8430
 8011916:	2200      	movs	r2, #0
 8011918:	217d      	movs	r1, #125	; 0x7d
 801191a:	2006      	movs	r0, #6
 801191c:	f7ff fa18 	bl	8010d50 <LCD_ShowString>
 8011920:	e0e0      	b.n	8011ae4 <thread_cmdchoose+0x424>
 8011922:	bf00      	nop
 8011924:	08013f9c 	.word	0x08013f9c
 8011928:	08013fac 	.word	0x08013fac
 801192c:	20007360 	.word	0x20007360
 8011930:	2000733c 	.word	0x2000733c
 8011934:	20007348 	.word	0x20007348
 8011938:	20007334 	.word	0x20007334
 801193c:	20007350 	.word	0x20007350
 8011940:	20007364 	.word	0x20007364
 8011944:	20007340 	.word	0x20007340
 8011948:	2000732c 	.word	0x2000732c
 801194c:	20007b68 	.word	0x20007b68
 8011950:	20007330 	.word	0x20007330
 8011954:	20007354 	.word	0x20007354
 8011958:	20007338 	.word	0x20007338
 801195c:	20007368 	.word	0x20007368
 8011960:	08013ff8 	.word	0x08013ff8
 8011964:	08014024 	.word	0x08014024
 8011968:	08013fb4 	.word	0x08013fb4
 801196c:	20007358 	.word	0x20007358
 8011970:	08013fdc 	.word	0x08013fdc
 8011974:	2000734c 	.word	0x2000734c
 8011978:	0801408c 	.word	0x0801408c
                    uart_send_string(UART_User,(void *)"接收到信号量功能开启命令，信号量功能模块开启\n");
 801197c:	49b0      	ldr	r1, [pc, #704]	; (8011c40 <thread_cmdchoose+0x580>)
 801197e:	2002      	movs	r0, #2
 8011980:	f000 fc92 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_eventBlue);
 8011984:	4baf      	ldr	r3, [pc, #700]	; (8011c44 <thread_cmdchoose+0x584>)
 8011986:	6818      	ldr	r0, [r3, #0]
 8011988:	f7fd fc04 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_eventGreen);
 801198c:	4bae      	ldr	r3, [pc, #696]	; (8011c48 <thread_cmdchoose+0x588>)
 801198e:	6818      	ldr	r0, [r3, #0]
 8011990:	f7fd fc00 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_messagerecv);
 8011994:	4bad      	ldr	r3, [pc, #692]	; (8011c4c <thread_cmdchoose+0x58c>)
 8011996:	6818      	ldr	r0, [r3, #0]
 8011998:	f7fd fbfc 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexRed);
 801199c:	4bac      	ldr	r3, [pc, #688]	; (8011c50 <thread_cmdchoose+0x590>)
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	f7fd fbf8 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexGreen);
 80119a4:	4bab      	ldr	r3, [pc, #684]	; (8011c54 <thread_cmdchoose+0x594>)
 80119a6:	6818      	ldr	r0, [r3, #0]
 80119a8:	f7fd fbf4 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexBlue);
 80119ac:	4baa      	ldr	r3, [pc, #680]	; (8011c58 <thread_cmdchoose+0x598>)
 80119ae:	6818      	ldr	r0, [r3, #0]
 80119b0:	f7fd fbf0 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayBlue);
 80119b4:	4ba9      	ldr	r3, [pc, #676]	; (8011c5c <thread_cmdchoose+0x59c>)
 80119b6:	6818      	ldr	r0, [r3, #0]
 80119b8:	f7fd fbec 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayGreen);
 80119bc:	4ba8      	ldr	r3, [pc, #672]	; (8011c60 <thread_cmdchoose+0x5a0>)
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	f7fd fbe8 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayRed);
 80119c4:	4ba7      	ldr	r3, [pc, #668]	; (8011c64 <thread_cmdchoose+0x5a4>)
 80119c6:	6818      	ldr	r0, [r3, #0]
 80119c8:	f7fd fbe4 	bl	800f194 <rt_thread_detach>
	                rt_thread_startup(thd_SPThread1);//启动信号量线程1
 80119cc:	4ba6      	ldr	r3, [pc, #664]	; (8011c68 <thread_cmdchoose+0x5a8>)
 80119ce:	6818      	ldr	r0, [r3, #0]
 80119d0:	f7fd fcfa 	bl	800f3c8 <rt_thread_startup>
	                rt_thread_startup(thd_SPThread2);//启动信号量线程2
 80119d4:	4ba5      	ldr	r3, [pc, #660]	; (8011c6c <thread_cmdchoose+0x5ac>)
 80119d6:	6818      	ldr	r0, [r3, #0]
 80119d8:	f7fd fcf6 	bl	800f3c8 <rt_thread_startup>
	                rt_thread_startup(thd_SPThread3);//启动信号量线程
 80119dc:	4ba4      	ldr	r3, [pc, #656]	; (8011c70 <thread_cmdchoose+0x5b0>)
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	f7fd fcf2 	bl	800f3c8 <rt_thread_startup>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行信号量演示      ");
 80119e4:	4ba3      	ldr	r3, [pc, #652]	; (8011c74 <thread_cmdchoose+0x5b4>)
 80119e6:	9300      	str	r3, [sp, #0]
 80119e8:	f248 4330 	movw	r3, #33840	; 0x8430
 80119ec:	2200      	movs	r2, #0
 80119ee:	217d      	movs	r1, #125	; 0x7d
 80119f0:	2006      	movs	r0, #6
 80119f2:	f7ff f9ad 	bl	8010d50 <LCD_ShowString>
 80119f6:	e763      	b.n	80118c0 <thread_cmdchoose+0x200>

            if(gcRecvBuf[7]==MUTEX_CODE) //命令字为93，代表“功能”
            {
                if(gcRecvBuf[8]==0x01)
                {
                    uart_send_string(UART_User,(void *)"接收到互斥量功能开启命令，功能模块开启\n");
 80119f8:	499f      	ldr	r1, [pc, #636]	; (8011c78 <thread_cmdchoose+0x5b8>)
 80119fa:	2002      	movs	r0, #2
 80119fc:	f000 fc54 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_eventBlue);
 8011a00:	4b90      	ldr	r3, [pc, #576]	; (8011c44 <thread_cmdchoose+0x584>)
 8011a02:	6818      	ldr	r0, [r3, #0]
 8011a04:	f7fd fbc6 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_eventGreen);
 8011a08:	4b8f      	ldr	r3, [pc, #572]	; (8011c48 <thread_cmdchoose+0x588>)
 8011a0a:	6818      	ldr	r0, [r3, #0]
 8011a0c:	f7fd fbc2 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_messagerecv);
 8011a10:	4b8e      	ldr	r3, [pc, #568]	; (8011c4c <thread_cmdchoose+0x58c>)
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	f7fd fbbe 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread1);	
 8011a18:	4b93      	ldr	r3, [pc, #588]	; (8011c68 <thread_cmdchoose+0x5a8>)
 8011a1a:	6818      	ldr	r0, [r3, #0]
 8011a1c:	f7fd fbba 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 8011a20:	4b92      	ldr	r3, [pc, #584]	; (8011c6c <thread_cmdchoose+0x5ac>)
 8011a22:	6818      	ldr	r0, [r3, #0]
 8011a24:	f7fd fbb6 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 8011a28:	4b91      	ldr	r3, [pc, #580]	; (8011c70 <thread_cmdchoose+0x5b0>)
 8011a2a:	6818      	ldr	r0, [r3, #0]
 8011a2c:	f7fd fbb2 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayBlue);
 8011a30:	4b8a      	ldr	r3, [pc, #552]	; (8011c5c <thread_cmdchoose+0x59c>)
 8011a32:	6818      	ldr	r0, [r3, #0]
 8011a34:	f7fd fbae 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayGreen);
 8011a38:	4b89      	ldr	r3, [pc, #548]	; (8011c60 <thread_cmdchoose+0x5a0>)
 8011a3a:	6818      	ldr	r0, [r3, #0]
 8011a3c:	f7fd fbaa 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayRed);
 8011a40:	4b88      	ldr	r3, [pc, #544]	; (8011c64 <thread_cmdchoose+0x5a4>)
 8011a42:	6818      	ldr	r0, [r3, #0]
 8011a44:	f7fd fba6 	bl	800f194 <rt_thread_detach>

                    rt_thread_startup(thd_mutexRed);//启动互斥量线程
 8011a48:	4b81      	ldr	r3, [pc, #516]	; (8011c50 <thread_cmdchoose+0x590>)
 8011a4a:	6818      	ldr	r0, [r3, #0]
 8011a4c:	f7fd fcbc 	bl	800f3c8 <rt_thread_startup>
	                rt_thread_startup(thd_mutexGreen);//启动互斥量线程
 8011a50:	4b80      	ldr	r3, [pc, #512]	; (8011c54 <thread_cmdchoose+0x594>)
 8011a52:	6818      	ldr	r0, [r3, #0]
 8011a54:	f7fd fcb8 	bl	800f3c8 <rt_thread_startup>
	                rt_thread_startup(thd_mutexBlue);//启动互斥量线程
 8011a58:	4b7f      	ldr	r3, [pc, #508]	; (8011c58 <thread_cmdchoose+0x598>)
 8011a5a:	6818      	ldr	r0, [r3, #0]
 8011a5c:	f7fd fcb4 	bl	800f3c8 <rt_thread_startup>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行互斥量演示      ");
 8011a60:	4b86      	ldr	r3, [pc, #536]	; (8011c7c <thread_cmdchoose+0x5bc>)
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	f248 4330 	movw	r3, #33840	; 0x8430
 8011a68:	2200      	movs	r2, #0
 8011a6a:	217d      	movs	r1, #125	; 0x7d
 8011a6c:	2006      	movs	r0, #6
 8011a6e:	f7ff f96f 	bl	8010d50 <LCD_ShowString>
 8011a72:	e042      	b.n	8011afa <thread_cmdchoose+0x43a>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:等待命令      ");
                }

            }

                if(gcRecvBuf[7]==DELAY_CODE) //命令字为94，代表"延时功能”
 8011a74:	4b82      	ldr	r3, [pc, #520]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011a76:	79db      	ldrb	r3, [r3, #7]
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b94      	cmp	r3, #148	; 0x94
 8011a7c:	d06d      	beq.n	8011b5a <thread_cmdchoose+0x49a>
        uart_send_string(UART_User,(void *)"进入命令选择线程，等待事件信号\n");
 8011a7e:	4981      	ldr	r1, [pc, #516]	; (8011c84 <thread_cmdchoose+0x5c4>)
 8011a80:	2002      	movs	r0, #2
 8011a82:	f000 fc11 	bl	80122a8 <uart_send_string>
        rt_event_recv(EventWord,CMD_CHOOSE_EVENT,RT_EVENT_FLAG_OR|RT_EVENT_FLAG_CLEAR,RT_WAITING_FOREVER,&recvedstate);//等待命令选择线程的事件信号，串口接收完数据后会触发
 8011a86:	4b80      	ldr	r3, [pc, #512]	; (8011c88 <thread_cmdchoose+0x5c8>)
 8011a88:	6818      	ldr	r0, [r3, #0]
 8011a8a:	ab05      	add	r3, sp, #20
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a92:	2206      	movs	r2, #6
 8011a94:	2102      	movs	r1, #2
 8011a96:	f7fe fda8 	bl	80105ea <rt_event_recv>
        uart_send_string(UART_User,(void *)"接收到事件信号\n");
 8011a9a:	497c      	ldr	r1, [pc, #496]	; (8011c8c <thread_cmdchoose+0x5cc>)
 8011a9c:	2002      	movs	r0, #2
 8011a9e:	f000 fc03 	bl	80122a8 <uart_send_string>
        if(recvedstate==CMD_CHOOSE_EVENT)  //如果接收完成且正确
 8011aa2:	9b05      	ldr	r3, [sp, #20]
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	d1ea      	bne.n	8011a7e <thread_cmdchoose+0x3be>
            if(gcRecvBuf[7]==CONNECT_CODE)//命令字为66，代表Pc端正和mcu取得连接
 8011aa8:	4b75      	ldr	r3, [pc, #468]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011aaa:	79db      	ldrb	r3, [r3, #7]
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b66      	cmp	r3, #102	; 0x66
 8011ab0:	f43f ae09 	beq.w	80116c6 <thread_cmdchoose+0x6>
            if(gcRecvBuf[7]==RESULT_CODE)
 8011ab4:	4b72      	ldr	r3, [pc, #456]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011ab6:	79db      	ldrb	r3, [r3, #7]
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	2b77      	cmp	r3, #119	; 0x77
 8011abc:	f43f ae11 	beq.w	80116e2 <thread_cmdchoose+0x22>
    		if(gcRecvBuf[7]==EVENT_CODE) //命令字为90，代表“事件功能”
 8011ac0:	4b6f      	ldr	r3, [pc, #444]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011ac2:	79db      	ldrb	r3, [r3, #7]
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2b90      	cmp	r3, #144	; 0x90
 8011ac8:	f43f ae3c 	beq.w	8011744 <thread_cmdchoose+0x84>
            if(gcRecvBuf[7]==MESSAGE_CODE) //命令字为91，代表“消息队列功能”
 8011acc:	4b6c      	ldr	r3, [pc, #432]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011ace:	79db      	ldrb	r3, [r3, #7]
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b91      	cmp	r3, #145	; 0x91
 8011ad4:	f43f aeab 	beq.w	801182e <thread_cmdchoose+0x16e>
            if(gcRecvBuf[7]==SEM_CODE) //命令字为92，代表“信号量功能”
 8011ad8:	4b69      	ldr	r3, [pc, #420]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011ada:	79db      	ldrb	r3, [r3, #7]
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b92      	cmp	r3, #146	; 0x92
 8011ae0:	f43f aee9 	beq.w	80118b6 <thread_cmdchoose+0x1f6>
            if(gcRecvBuf[7]==MUTEX_CODE) //命令字为93，代表“功能”
 8011ae4:	4b66      	ldr	r3, [pc, #408]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011ae6:	79db      	ldrb	r3, [r3, #7]
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	2b93      	cmp	r3, #147	; 0x93
 8011aec:	d1c2      	bne.n	8011a74 <thread_cmdchoose+0x3b4>
                if(gcRecvBuf[8]==0x01)
 8011aee:	4b64      	ldr	r3, [pc, #400]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011af0:	7a1b      	ldrb	r3, [r3, #8]
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	f43f af7f 	beq.w	80119f8 <thread_cmdchoose+0x338>
                if(gcRecvBuf[8]==0x00)
 8011afa:	4b61      	ldr	r3, [pc, #388]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011afc:	7a1b      	ldrb	r3, [r3, #8]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1b8      	bne.n	8011a74 <thread_cmdchoose+0x3b4>
                    uart_send_string(UART_User,(void *)"接收到互斥量功能关闭命令，功能模块关闭\n");
 8011b02:	4963      	ldr	r1, [pc, #396]	; (8011c90 <thread_cmdchoose+0x5d0>)
 8011b04:	2002      	movs	r0, #2
 8011b06:	f000 fbcf 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_mutexRed);
 8011b0a:	4b51      	ldr	r3, [pc, #324]	; (8011c50 <thread_cmdchoose+0x590>)
 8011b0c:	6818      	ldr	r0, [r3, #0]
 8011b0e:	f7fd fb41 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexGreen);
 8011b12:	4b50      	ldr	r3, [pc, #320]	; (8011c54 <thread_cmdchoose+0x594>)
 8011b14:	6818      	ldr	r0, [r3, #0]
 8011b16:	f7fd fb3d 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexBlue);
 8011b1a:	4b4f      	ldr	r3, [pc, #316]	; (8011c58 <thread_cmdchoose+0x598>)
 8011b1c:	6818      	ldr	r0, [r3, #0]
 8011b1e:	f7fd fb39 	bl	800f194 <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011b22:	2201      	movs	r2, #1
 8011b24:	4611      	mov	r1, r2
 8011b26:	f240 1009 	movw	r0, #265	; 0x109
 8011b2a:	f7fe fae3 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8011b2e:	2201      	movs	r2, #1
 8011b30:	4611      	mov	r1, r2
 8011b32:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011b36:	f7fe fadd 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	4611      	mov	r1, r2
 8011b3e:	f240 1007 	movw	r0, #263	; 0x107
 8011b42:	f7fe fad7 	bl	80100f4 <gpio_init>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:等待命令      ");
 8011b46:	4b53      	ldr	r3, [pc, #332]	; (8011c94 <thread_cmdchoose+0x5d4>)
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	f248 4330 	movw	r3, #33840	; 0x8430
 8011b4e:	2200      	movs	r2, #0
 8011b50:	217d      	movs	r1, #125	; 0x7d
 8011b52:	2006      	movs	r0, #6
 8011b54:	f7ff f8fc 	bl	8010d50 <LCD_ShowString>
 8011b58:	e78c      	b.n	8011a74 <thread_cmdchoose+0x3b4>
            {
                if(gcRecvBuf[8]==0x01)
 8011b5a:	4b49      	ldr	r3, [pc, #292]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011b5c:	7a1b      	ldrb	r3, [r3, #8]
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d02f      	beq.n	8011bc4 <thread_cmdchoose+0x504>
                    rt_thread_startup(thd_delayBlue);
                    rt_thread_startup(thd_delayGreen);
                    rt_thread_startup(thd_delayRed);
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行延时演示      ");
                }
                if(gcRecvBuf[8]==0x00)
 8011b64:	4b46      	ldr	r3, [pc, #280]	; (8011c80 <thread_cmdchoose+0x5c0>)
 8011b66:	7a1b      	ldrb	r3, [r3, #8]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d188      	bne.n	8011a7e <thread_cmdchoose+0x3be>
                {
                    uart_send_string(UART_User,(void *)"接收到延时功能关闭命令，功能模块关闭\n");
 8011b6c:	494a      	ldr	r1, [pc, #296]	; (8011c98 <thread_cmdchoose+0x5d8>)
 8011b6e:	2002      	movs	r0, #2
 8011b70:	f000 fb9a 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_delayBlue);
 8011b74:	4b39      	ldr	r3, [pc, #228]	; (8011c5c <thread_cmdchoose+0x59c>)
 8011b76:	6818      	ldr	r0, [r3, #0]
 8011b78:	f7fd fb0c 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayGreen);
 8011b7c:	4b38      	ldr	r3, [pc, #224]	; (8011c60 <thread_cmdchoose+0x5a0>)
 8011b7e:	6818      	ldr	r0, [r3, #0]
 8011b80:	f7fd fb08 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_delayRed);
 8011b84:	4b37      	ldr	r3, [pc, #220]	; (8011c64 <thread_cmdchoose+0x5a4>)
 8011b86:	6818      	ldr	r0, [r3, #0]
 8011b88:	f7fd fb04 	bl	800f194 <rt_thread_detach>
                    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	4611      	mov	r1, r2
 8011b90:	f240 1009 	movw	r0, #265	; 0x109
 8011b94:	f7fe faae 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8011b98:	2201      	movs	r2, #1
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011ba0:	f7fe faa8 	bl	80100f4 <gpio_init>
                    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	f240 1007 	movw	r0, #263	; 0x107
 8011bac:	f7fe faa2 	bl	80100f4 <gpio_init>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:等待命令      ");
 8011bb0:	4b38      	ldr	r3, [pc, #224]	; (8011c94 <thread_cmdchoose+0x5d4>)
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	f248 4330 	movw	r3, #33840	; 0x8430
 8011bb8:	2200      	movs	r2, #0
 8011bba:	217d      	movs	r1, #125	; 0x7d
 8011bbc:	2006      	movs	r0, #6
 8011bbe:	f7ff f8c7 	bl	8010d50 <LCD_ShowString>
 8011bc2:	e75c      	b.n	8011a7e <thread_cmdchoose+0x3be>
                    uart_send_string(UART_User,(void *)"接收到延时功能开启命令，功能模块开启\n");
 8011bc4:	4935      	ldr	r1, [pc, #212]	; (8011c9c <thread_cmdchoose+0x5dc>)
 8011bc6:	2002      	movs	r0, #2
 8011bc8:	f000 fb6e 	bl	80122a8 <uart_send_string>
                    rt_thread_detach(thd_eventBlue);
 8011bcc:	4b1d      	ldr	r3, [pc, #116]	; (8011c44 <thread_cmdchoose+0x584>)
 8011bce:	6818      	ldr	r0, [r3, #0]
 8011bd0:	f7fd fae0 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_eventGreen);
 8011bd4:	4b1c      	ldr	r3, [pc, #112]	; (8011c48 <thread_cmdchoose+0x588>)
 8011bd6:	6818      	ldr	r0, [r3, #0]
 8011bd8:	f7fd fadc 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_messagerecv);
 8011bdc:	4b1b      	ldr	r3, [pc, #108]	; (8011c4c <thread_cmdchoose+0x58c>)
 8011bde:	6818      	ldr	r0, [r3, #0]
 8011be0:	f7fd fad8 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread1);	
 8011be4:	4b20      	ldr	r3, [pc, #128]	; (8011c68 <thread_cmdchoose+0x5a8>)
 8011be6:	6818      	ldr	r0, [r3, #0]
 8011be8:	f7fd fad4 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread2);
 8011bec:	4b1f      	ldr	r3, [pc, #124]	; (8011c6c <thread_cmdchoose+0x5ac>)
 8011bee:	6818      	ldr	r0, [r3, #0]
 8011bf0:	f7fd fad0 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_SPThread3);
 8011bf4:	4b1e      	ldr	r3, [pc, #120]	; (8011c70 <thread_cmdchoose+0x5b0>)
 8011bf6:	6818      	ldr	r0, [r3, #0]
 8011bf8:	f7fd facc 	bl	800f194 <rt_thread_detach>
                    rt_thread_detach(thd_mutexRed);
 8011bfc:	4b14      	ldr	r3, [pc, #80]	; (8011c50 <thread_cmdchoose+0x590>)
 8011bfe:	6818      	ldr	r0, [r3, #0]
 8011c00:	f7fd fac8 	bl	800f194 <rt_thread_detach>
	                rt_thread_detach(thd_mutexGreen);
 8011c04:	4b13      	ldr	r3, [pc, #76]	; (8011c54 <thread_cmdchoose+0x594>)
 8011c06:	6818      	ldr	r0, [r3, #0]
 8011c08:	f7fd fac4 	bl	800f194 <rt_thread_detach>
	                rt_thread_detach(thd_mutexBlue);
 8011c0c:	4b12      	ldr	r3, [pc, #72]	; (8011c58 <thread_cmdchoose+0x598>)
 8011c0e:	6818      	ldr	r0, [r3, #0]
 8011c10:	f7fd fac0 	bl	800f194 <rt_thread_detach>
                    rt_thread_startup(thd_delayBlue);
 8011c14:	4b11      	ldr	r3, [pc, #68]	; (8011c5c <thread_cmdchoose+0x59c>)
 8011c16:	6818      	ldr	r0, [r3, #0]
 8011c18:	f7fd fbd6 	bl	800f3c8 <rt_thread_startup>
                    rt_thread_startup(thd_delayGreen);
 8011c1c:	4b10      	ldr	r3, [pc, #64]	; (8011c60 <thread_cmdchoose+0x5a0>)
 8011c1e:	6818      	ldr	r0, [r3, #0]
 8011c20:	f7fd fbd2 	bl	800f3c8 <rt_thread_startup>
                    rt_thread_startup(thd_delayRed);
 8011c24:	4b0f      	ldr	r3, [pc, #60]	; (8011c64 <thread_cmdchoose+0x5a4>)
 8011c26:	6818      	ldr	r0, [r3, #0]
 8011c28:	f7fd fbce 	bl	800f3c8 <rt_thread_startup>
                    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:执行延时演示      ");
 8011c2c:	4b1c      	ldr	r3, [pc, #112]	; (8011ca0 <thread_cmdchoose+0x5e0>)
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	f248 4330 	movw	r3, #33840	; 0x8430
 8011c34:	2200      	movs	r2, #0
 8011c36:	217d      	movs	r1, #125	; 0x7d
 8011c38:	2006      	movs	r0, #6
 8011c3a:	f7ff f889 	bl	8010d50 <LCD_ShowString>
 8011c3e:	e791      	b.n	8011b64 <thread_cmdchoose+0x4a4>
 8011c40:	0801403c 	.word	0x0801403c
 8011c44:	20007360 	.word	0x20007360
 8011c48:	2000733c 	.word	0x2000733c
 8011c4c:	20007348 	.word	0x20007348
 8011c50:	20007340 	.word	0x20007340
 8011c54:	2000732c 	.word	0x2000732c
 8011c58:	20007b68 	.word	0x20007b68
 8011c5c:	20007330 	.word	0x20007330
 8011c60:	20007354 	.word	0x20007354
 8011c64:	20007338 	.word	0x20007338
 8011c68:	20007334 	.word	0x20007334
 8011c6c:	20007350 	.word	0x20007350
 8011c70:	20007364 	.word	0x20007364
 8011c74:	0801406c 	.word	0x0801406c
 8011c78:	080140bc 	.word	0x080140bc
 8011c7c:	080140e4 	.word	0x080140e4
 8011c80:	20007368 	.word	0x20007368
 8011c84:	08013f6c 	.word	0x08013f6c
 8011c88:	20007358 	.word	0x20007358
 8011c8c:	08013f8c 	.word	0x08013f8c
 8011c90:	08014104 	.word	0x08014104
 8011c94:	08014024 	.word	0x08014024
 8011c98:	08014170 	.word	0x08014170
 8011c9c:	0801412c 	.word	0x0801412c
 8011ca0:	08014154 	.word	0x08014154

08011ca4 <rt_system_scheduler_init>:
 */
void rt_system_scheduler_init(void)
{
    register rt_base_t offset;

    rt_scheduler_lock_nest = 0;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4a0c      	ldr	r2, [pc, #48]	; (8011cd8 <rt_system_scheduler_init+0x34>)
 8011ca8:	8013      	strh	r3, [r2, #0]

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
 8011caa:	e006      	b.n	8011cba <rt_system_scheduler_init+0x16>
    {
        rt_list_init(&rt_thread_priority_table[offset]);
 8011cac:	490b      	ldr	r1, [pc, #44]	; (8011cdc <rt_system_scheduler_init+0x38>)
 8011cae:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    l->next = l->prev = l;
 8011cb2:	6052      	str	r2, [r2, #4]
 8011cb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
 8011cb8:	3301      	adds	r3, #1
 8011cba:	2b1f      	cmp	r3, #31
 8011cbc:	ddf6      	ble.n	8011cac <rt_system_scheduler_init+0x8>
    }

    rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
 8011cbe:	4b08      	ldr	r3, [pc, #32]	; (8011ce0 <rt_system_scheduler_init+0x3c>)
 8011cc0:	221f      	movs	r2, #31
 8011cc2:	701a      	strb	r2, [r3, #0]
    rt_current_thread = RT_NULL;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	4a07      	ldr	r2, [pc, #28]	; (8011ce4 <rt_system_scheduler_init+0x40>)
 8011cc8:	6013      	str	r3, [r2, #0]

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
 8011cca:	4a07      	ldr	r2, [pc, #28]	; (8011ce8 <rt_system_scheduler_init+0x44>)
 8011ccc:	6013      	str	r3, [r2, #0]
 8011cce:	4b07      	ldr	r3, [pc, #28]	; (8011cec <rt_system_scheduler_init+0x48>)
 8011cd0:	605b      	str	r3, [r3, #4]
 8011cd2:	601b      	str	r3, [r3, #0]
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif

    /* initialize thread defunct */
    rt_list_init(&rt_thread_defunct);
}
 8011cd4:	4770      	bx	lr
 8011cd6:	bf00      	nop
 8011cd8:	2000415c 	.word	0x2000415c
 8011cdc:	20007b6c 	.word	0x20007b6c
 8011ce0:	20007c6c 	.word	0x20007c6c
 8011ce4:	20007c70 	.word	0x20007c70
 8011ce8:	20007c74 	.word	0x20007c74
 8011cec:	20007c78 	.word	0x20007c78

08011cf0 <rt_system_scheduler_start>:
 * @ingroup SystemInit
 * This function will startup scheduler. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
 8011cf0:	b508      	push	{r3, lr}
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
 8011cf2:	4b08      	ldr	r3, [pc, #32]	; (8011d14 <rt_system_scheduler_start+0x24>)
 8011cf4:	6818      	ldr	r0, [r3, #0]
 8011cf6:	f7ff fc7d 	bl	80115f4 <__rt_ffs>
 8011cfa:	3801      	subs	r0, #1
#endif

    /* get switch to thread */
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
 8011cfc:	4b06      	ldr	r3, [pc, #24]	; (8011d18 <rt_system_scheduler_start+0x28>)
 8011cfe:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8011d02:	f1a0 0214 	sub.w	r2, r0, #20
                              struct rt_thread,
                              tlist);

    rt_current_thread = to_thread;
 8011d06:	4b05      	ldr	r3, [pc, #20]	; (8011d1c <rt_system_scheduler_start+0x2c>)
 8011d08:	601a      	str	r2, [r3, #0]

    /* switch to new thread */
    rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
 8011d0a:	3008      	adds	r0, #8
 8011d0c:	f7fb fde5 	bl	800d8da <rt_hw_context_switch_to>

    /* never come back */
}
 8011d10:	bd08      	pop	{r3, pc}
 8011d12:	bf00      	nop
 8011d14:	20007c74 	.word	0x20007c74
 8011d18:	20007b6c 	.word	0x20007b6c
 8011d1c:	20007c70 	.word	0x20007c70

08011d20 <rt_schedule>:
/**
 * This function will perform one schedule. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_schedule(void)
{
 8011d20:	b538      	push	{r3, r4, r5, lr}
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8011d22:	f7fb fd8d 	bl	800d840 <rt_hw_interrupt_disable>
 8011d26:	4604      	mov	r4, r0

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
 8011d28:	4b15      	ldr	r3, [pc, #84]	; (8011d80 <rt_schedule+0x60>)
 8011d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d2e:	b9cb      	cbnz	r3, 8011d64 <rt_schedule+0x44>
    {
        register rt_ubase_t highest_ready_priority;

#if RT_THREAD_PRIORITY_MAX <= 32
        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
 8011d30:	4b14      	ldr	r3, [pc, #80]	; (8011d84 <rt_schedule+0x64>)
 8011d32:	6818      	ldr	r0, [r3, #0]
 8011d34:	f7ff fc5e 	bl	80115f4 <__rt_ffs>
 8011d38:	3801      	subs	r0, #1
        number = __rt_ffs(rt_thread_ready_priority_group) - 1;
        highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#endif

        /* get switch to thread */
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
 8011d3a:	4b13      	ldr	r3, [pc, #76]	; (8011d88 <rt_schedule+0x68>)
 8011d3c:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
 8011d40:	f1a1 0214 	sub.w	r2, r1, #20
                                  struct rt_thread,
                                  tlist);

        /* if the destination thread is not the same as current thread */
        if (to_thread != rt_current_thread)
 8011d44:	4b11      	ldr	r3, [pc, #68]	; (8011d8c <rt_schedule+0x6c>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d00b      	beq.n	8011d64 <rt_schedule+0x44>
        {
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
 8011d4c:	4d10      	ldr	r5, [pc, #64]	; (8011d90 <rt_schedule+0x70>)
 8011d4e:	7028      	strb	r0, [r5, #0]
            from_thread         = rt_current_thread;
            rt_current_thread   = to_thread;
 8011d50:	480e      	ldr	r0, [pc, #56]	; (8011d8c <rt_schedule+0x6c>)
 8011d52:	6002      	str	r2, [r0, #0]

#ifdef RT_USING_OVERFLOW_CHECK
            _rt_scheduler_stack_check(to_thread);
#endif

            if (rt_interrupt_nest == 0)
 8011d54:	4a0f      	ldr	r2, [pc, #60]	; (8011d94 <rt_schedule+0x74>)
 8011d56:	7812      	ldrb	r2, [r2, #0]
 8011d58:	b142      	cbz	r2, 8011d6c <rt_schedule+0x4c>
            }
            else
            {
                RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));

                rt_hw_context_switch_interrupt((rt_uint32_t)&from_thread->sp,
 8011d5a:	3108      	adds	r1, #8
 8011d5c:	f103 001c 	add.w	r0, r3, #28
 8011d60:	f7fb fd75 	bl	800d84e <rt_hw_context_switch>
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 8011d64:	4620      	mov	r0, r4
 8011d66:	f7fb fd6f 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011d6a:	bd38      	pop	{r3, r4, r5, pc}
                rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
 8011d6c:	3108      	adds	r1, #8
 8011d6e:	f103 001c 	add.w	r0, r3, #28
 8011d72:	f7fb fd6c 	bl	800d84e <rt_hw_context_switch>
                    rt_hw_interrupt_enable(level);
 8011d76:	4620      	mov	r0, r4
 8011d78:	f7fb fd66 	bl	800d848 <rt_hw_interrupt_enable>
                return ;
 8011d7c:	e7f5      	b.n	8011d6a <rt_schedule+0x4a>
 8011d7e:	bf00      	nop
 8011d80:	2000415c 	.word	0x2000415c
 8011d84:	20007c74 	.word	0x20007c74
 8011d88:	20007b6c 	.word	0x20007b6c
 8011d8c:	20007c70 	.word	0x20007c70
 8011d90:	20007c6c 	.word	0x20007c6c
 8011d94:	20007c84 	.word	0x20007c84

08011d98 <rt_schedule_insert_thread>:
 *
 * @param thread the thread to be inserted
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_insert_thread(struct rt_thread *thread)
{
 8011d98:	b510      	push	{r4, lr}
 8011d9a:	4604      	mov	r4, r0
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8011d9c:	f7fb fd50 	bl	800d840 <rt_hw_interrupt_disable>

    /* change stat */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
 8011da0:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 8011da4:	f023 030f 	bic.w	r3, r3, #15
 8011da8:	f043 0301 	orr.w	r3, r3, #1
 8011dac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 8011db0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8011db4:	4b09      	ldr	r3, [pc, #36]	; (8011ddc <rt_schedule_insert_thread+0x44>)
 8011db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011dba:	f104 0214 	add.w	r2, r4, #20
    l->prev->next = n;
 8011dbe:	6859      	ldr	r1, [r3, #4]
 8011dc0:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
 8011dc2:	6859      	ldr	r1, [r3, #4]
 8011dc4:	61a1      	str	r1, [r4, #24]
    l->prev = n;
 8011dc6:	605a      	str	r2, [r3, #4]
    n->next = l;
 8011dc8:	6163      	str	r3, [r4, #20]
#endif

#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif
    rt_thread_ready_priority_group |= thread->number_mask;
 8011dca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011dcc:	4a04      	ldr	r2, [pc, #16]	; (8011de0 <rt_schedule_insert_thread+0x48>)
 8011dce:	6813      	ldr	r3, [r2, #0]
 8011dd0:	430b      	orrs	r3, r1
 8011dd2:	6013      	str	r3, [r2, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 8011dd4:	f7fb fd38 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	bf00      	nop
 8011ddc:	20007b6c 	.word	0x20007b6c
 8011de0:	20007c74 	.word	0x20007c74

08011de4 <rt_schedule_remove_thread>:
 * @param thread the thread to be removed
 *
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_remove_thread(struct rt_thread *thread)
{
 8011de4:	b510      	push	{r4, lr}
 8011de6:	4604      	mov	r4, r0
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
 8011de8:	f7fb fd2a 	bl	800d840 <rt_hw_interrupt_disable>
                  thread->number_mask,
                  thread->high_mask));
#endif

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
 8011dec:	f104 0314 	add.w	r3, r4, #20
    n->next->prev = n->prev;
 8011df0:	6962      	ldr	r2, [r4, #20]
 8011df2:	69a1      	ldr	r1, [r4, #24]
 8011df4:	6051      	str	r1, [r2, #4]
    n->prev->next = n->next;
 8011df6:	69a2      	ldr	r2, [r4, #24]
 8011df8:	6961      	ldr	r1, [r4, #20]
 8011dfa:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
 8011dfc:	61a3      	str	r3, [r4, #24]
 8011dfe:	6163      	str	r3, [r4, #20]
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
 8011e00:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8011e04:	4b08      	ldr	r3, [pc, #32]	; (8011e28 <rt_schedule_remove_thread+0x44>)
 8011e06:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    return l->next == l;
 8011e0a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8011e0e:	4299      	cmp	r1, r3
 8011e10:	d002      	beq.n	8011e18 <rt_schedule_remove_thread+0x34>
        rt_thread_ready_priority_group &= ~thread->number_mask;
#endif
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
 8011e12:	f7fb fd19 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011e16:	bd10      	pop	{r4, pc}
        rt_thread_ready_priority_group &= ~thread->number_mask;
 8011e18:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011e1a:	4a04      	ldr	r2, [pc, #16]	; (8011e2c <rt_schedule_remove_thread+0x48>)
 8011e1c:	6813      	ldr	r3, [r2, #0]
 8011e1e:	ea23 0301 	bic.w	r3, r3, r1
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	e7f5      	b.n	8011e12 <rt_schedule_remove_thread+0x2e>
 8011e26:	bf00      	nop
 8011e28:	20007b6c 	.word	0x20007b6c
 8011e2c:	20007c74 	.word	0x20007c74

08011e30 <rt_enter_critical>:

/**
 * This function will lock the thread scheduler.
 */
void rt_enter_critical(void)
{
 8011e30:	b508      	push	{r3, lr}
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8011e32:	f7fb fd05 	bl	800d840 <rt_hw_interrupt_disable>

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
 8011e36:	4a03      	ldr	r2, [pc, #12]	; (8011e44 <rt_enter_critical+0x14>)
 8011e38:	8813      	ldrh	r3, [r2, #0]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	8013      	strh	r3, [r2, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
 8011e3e:	f7fb fd03 	bl	800d848 <rt_hw_interrupt_enable>
}
 8011e42:	bd08      	pop	{r3, pc}
 8011e44:	2000415c 	.word	0x2000415c

08011e48 <rt_exit_critical>:

/**
 * This function will unlock the thread scheduler.
 */
void rt_exit_critical(void)
{
 8011e48:	b508      	push	{r3, lr}
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
 8011e4a:	f7fb fcf9 	bl	800d840 <rt_hw_interrupt_disable>

    rt_scheduler_lock_nest --;
 8011e4e:	4a0b      	ldr	r2, [pc, #44]	; (8011e7c <rt_exit_critical+0x34>)
 8011e50:	8813      	ldrh	r3, [r2, #0]
 8011e52:	3b01      	subs	r3, #1
 8011e54:	b21b      	sxth	r3, r3
 8011e56:	8013      	strh	r3, [r2, #0]
    if (rt_scheduler_lock_nest <= 0)
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	dd02      	ble.n	8011e62 <rt_exit_critical+0x1a>
        }
    }
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
 8011e5c:	f7fb fcf4 	bl	800d848 <rt_hw_interrupt_enable>
    }
}
 8011e60:	bd08      	pop	{r3, pc}
        rt_scheduler_lock_nest = 0;
 8011e62:	4613      	mov	r3, r2
 8011e64:	2200      	movs	r2, #0
 8011e66:	801a      	strh	r2, [r3, #0]
        rt_hw_interrupt_enable(level);
 8011e68:	f7fb fcee 	bl	800d848 <rt_hw_interrupt_enable>
        if (rt_current_thread)
 8011e6c:	4b04      	ldr	r3, [pc, #16]	; (8011e80 <rt_exit_critical+0x38>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d0f5      	beq.n	8011e60 <rt_exit_critical+0x18>
            rt_schedule();
 8011e74:	f7ff ff54 	bl	8011d20 <rt_schedule>
 8011e78:	e7f2      	b.n	8011e60 <rt_exit_critical+0x18>
 8011e7a:	bf00      	nop
 8011e7c:	2000415c 	.word	0x2000415c
 8011e80:	20007c70 	.word	0x20007c70

08011e84 <thread_delayGreen>:
//参数说明：无
//功能概要：每2秒绿灯反转
//内部调用：无
//======================================================================
void thread_delayGreen(void)
{
 8011e84:	b508      	push	{r3, lr}
    userprintf("------第一次进入绿灯线程：%x。\r\n",thread_self());
 8011e86:	f7fd f97f 	bl	800f188 <rt_thread_self>
 8011e8a:	4601      	mov	r1, r0
 8011e8c:	480e      	ldr	r0, [pc, #56]	; (8011ec8 <thread_delayGreen+0x44>)
 8011e8e:	f7fd f8cf 	bl	800f030 <userprintf>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8011e92:	2201      	movs	r2, #1
 8011e94:	4611      	mov	r1, r2
 8011e96:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011e9a:	f7fe f92b 	bl	80100f4 <gpio_init>
    while (1)
    {
    	userprintf("2-1.当前运行的线程=%x，绿灯延时10秒（开始）；\r\n",thread_self());
 8011e9e:	f7fd f973 	bl	800f188 <rt_thread_self>
 8011ea2:	4601      	mov	r1, r0
 8011ea4:	4809      	ldr	r0, [pc, #36]	; (8011ecc <thread_delayGreen+0x48>)
 8011ea6:	f7fd f8c3 	bl	800f030 <userprintf>
		delay_ms(10000);  //延时
 8011eaa:	f242 7010 	movw	r0, #10000	; 0x2710
 8011eae:	f7fd fa63 	bl	800f378 <rt_thread_delay>
		userprintf("2-2.当前运行的线程=%x，绿灯延时10秒（结束），绿灯反转。\r\n",thread_self());
 8011eb2:	f7fd f969 	bl	800f188 <rt_thread_self>
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	4805      	ldr	r0, [pc, #20]	; (8011ed0 <thread_delayGreen+0x4c>)
 8011eba:	f7fd f8b9 	bl	800f030 <userprintf>
		gpio_reverse(LIGHT_GREEN);    //灯的状态反转
 8011ebe:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011ec2:	f7fe f983 	bl	80101cc <gpio_reverse>
 8011ec6:	e7ea      	b.n	8011e9e <thread_delayGreen+0x1a>
 8011ec8:	08014198 	.word	0x08014198
 8011ecc:	080141bc 	.word	0x080141bc
 8011ed0:	080141ec 	.word	0x080141ec

08011ed4 <_SysTick_Config>:
// core clock.
extern uint32_t SystemCoreClock;

static uint32_t _SysTick_Config(rt_uint32_t ticks)
{
    if ((ticks - 1) > 0xFFFFFF)
 8011ed4:	3801      	subs	r0, #1
 8011ed6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8011eda:	d20d      	bcs.n	8011ef8 <_SysTick_Config+0x24>
    {
        return 1;
    }
    
    _SYSTICK_LOAD = ticks - 1; 
 8011edc:	4b07      	ldr	r3, [pc, #28]	; (8011efc <_SysTick_Config+0x28>)
 8011ede:	6018      	str	r0, [r3, #0]
    _SYSTICK_PRI = 0xFF;
 8011ee0:	f603 530f 	addw	r3, r3, #3343	; 0xd0f
 8011ee4:	22ff      	movs	r2, #255	; 0xff
 8011ee6:	701a      	strb	r2, [r3, #0]
    _SYSTICK_VAL  = 0;
 8011ee8:	2000      	movs	r0, #0
 8011eea:	f6a3 530b 	subw	r3, r3, #3339	; 0xd0b
 8011eee:	6018      	str	r0, [r3, #0]
    _SYSTICK_CTRL = 0x07;  
 8011ef0:	3b08      	subs	r3, #8
 8011ef2:	2207      	movs	r2, #7
 8011ef4:	601a      	str	r2, [r3, #0]
    
    return 0;
 8011ef6:	4770      	bx	lr
        return 1;
 8011ef8:	2001      	movs	r0, #1
}
 8011efa:	4770      	bx	lr
 8011efc:	e000e014 	.word	0xe000e014

08011f00 <rt_heap_begin_get>:
#define RT_HEAP_SIZE 3072
static uint32_t rt_heap[RT_HEAP_SIZE];     // heap default size: 4K(1024 * 4)
RT_WEAK void *rt_heap_begin_get(void)
{
    return rt_heap;
}
 8011f00:	4800      	ldr	r0, [pc, #0]	; (8011f04 <rt_heap_begin_get+0x4>)
 8011f02:	4770      	bx	lr
 8011f04:	20004160 	.word	0x20004160

08011f08 <rt_heap_end_get>:

RT_WEAK void *rt_heap_end_get(void)
{
    return rt_heap + RT_HEAP_SIZE;
}
 8011f08:	4800      	ldr	r0, [pc, #0]	; (8011f0c <rt_heap_end_get+0x4>)
 8011f0a:	4770      	bx	lr
 8011f0c:	20007160 	.word	0x20007160

08011f10 <rt_hw_board_init>:

/**
 * This function will initial your board.
 */
void rt_hw_board_init()
{
 8011f10:	b510      	push	{r4, lr}
    //(1)初始化系统时钟
    SystemCoreClockUpdate();
 8011f12:	f7fd fd7d 	bl	800fa10 <SystemCoreClockUpdate>
    //（2）初始化SysTick，RT_TICK_PER_SECOND为rtconfig.h设置的滴答频率，默认1000
    _SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);
 8011f16:	4b0a      	ldr	r3, [pc, #40]	; (8011f40 <rt_hw_board_init+0x30>)
 8011f18:	6818      	ldr	r0, [r3, #0]
 8011f1a:	4b0a      	ldr	r3, [pc, #40]	; (8011f44 <rt_hw_board_init+0x34>)
 8011f1c:	fba3 3000 	umull	r3, r0, r3, r0
 8011f20:	0980      	lsrs	r0, r0, #6
 8011f22:	f7ff ffd7 	bl	8011ed4 <_SysTick_Config>

    //硬件BSP初始化统统放在这里，比如LED，串口，LCD等
#ifdef RT_USING_COMPONENTS_INIT  //调用组件初始化函数
    rt_components_board_init();
 8011f26:	f7fc fb4b 	bl	800e5c0 <rt_components_board_init>
#endif
//如果同时定义了RT_USING_USER_MAIN和 RT_USING_HEAP这两个宏，表示RT-Thread里面创建内核对象时使用动态内存分配方案。
#if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
    //（3）初始化堆空间
    rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
 8011f2a:	f7ff ffe9 	bl	8011f00 <rt_heap_begin_get>
 8011f2e:	4604      	mov	r4, r0
 8011f30:	f7ff ffea 	bl	8011f08 <rt_heap_end_get>
 8011f34:	4601      	mov	r1, r0
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 fd4a 	bl	80129d0 <rt_system_heap_init>
#endif

}
 8011f3c:	bd10      	pop	{r4, pc}
 8011f3e:	bf00      	nop
 8011f40:	2000400c 	.word	0x2000400c
 8011f44:	10624dd3 	.word	0x10624dd3

08011f48 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8011f48:	b508      	push	{r3, lr}
    /* enter interrupt */
    rt_interrupt_enter();
 8011f4a:	f000 fe63 	bl	8012c14 <rt_interrupt_enter>

    rt_tick_increase();
 8011f4e:	f7ff fba1 	bl	8011694 <rt_tick_increase>

    /* leave interrupt */
    rt_interrupt_leave();
 8011f52:	f000 fe6d 	bl	8012c30 <rt_interrupt_leave>
}
 8011f56:	bd08      	pop	{r3, pc}

08011f58 <thread_delayBlue>:
//参数说明：无
//功能概要：每3秒蓝灯反转
//内部调用：无
//======================================================================
void thread_delayBlue(void)
{
 8011f58:	b508      	push	{r3, lr}
    userprintf("------第一次进入蓝灯线程：%x\r\n",thread_self());
 8011f5a:	f7fd f915 	bl	800f188 <rt_thread_self>
 8011f5e:	4601      	mov	r1, r0
 8011f60:	480e      	ldr	r0, [pc, #56]	; (8011f9c <thread_delayBlue+0x44>)
 8011f62:	f7fd f865 	bl	800f030 <userprintf>
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011f66:	2201      	movs	r2, #1
 8011f68:	4611      	mov	r1, r2
 8011f6a:	f240 1009 	movw	r0, #265	; 0x109
 8011f6e:	f7fe f8c1 	bl	80100f4 <gpio_init>
    while (1)
    {
    	userprintf("1-1.当前运行的线程=%x，蓝灯延时20秒（开始）；\r\n",thread_self());
 8011f72:	f7fd f909 	bl	800f188 <rt_thread_self>
 8011f76:	4601      	mov	r1, r0
 8011f78:	4809      	ldr	r0, [pc, #36]	; (8011fa0 <thread_delayBlue+0x48>)
 8011f7a:	f7fd f859 	bl	800f030 <userprintf>
		delay_ms(20000);  //延时
 8011f7e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8011f82:	f7fd f9f9 	bl	800f378 <rt_thread_delay>
		userprintf("1-2.当前运行的线程=%x，蓝灯延时20秒（结束），蓝灯反转。\r\n",thread_self());
 8011f86:	f7fd f8ff 	bl	800f188 <rt_thread_self>
 8011f8a:	4601      	mov	r1, r0
 8011f8c:	4805      	ldr	r0, [pc, #20]	; (8011fa4 <thread_delayBlue+0x4c>)
 8011f8e:	f7fd f84f 	bl	800f030 <userprintf>
		gpio_reverse(LIGHT_BLUE);    //灯的状态反转
 8011f92:	f240 1009 	movw	r0, #265	; 0x109
 8011f96:	f7fe f919 	bl	80101cc <gpio_reverse>
 8011f9a:	e7ea      	b.n	8011f72 <thread_delayBlue+0x1a>
 8011f9c:	08014228 	.word	0x08014228
 8011fa0:	08014248 	.word	0x08014248
 8011fa4:	08014278 	.word	0x08014278

08011fa8 <thread_SPThread1>:
//参数说明：无
//功能概要：抢夺信号量
//内部调用：无
//======================================================================
void thread_SPThread1()
{
 8011fa8:	b510      	push	{r4, lr}

    //（1）======申明局部变量===========================================
    int SPcount;      //记录信号量的个数
    uart_send_string(UART_User,(void *)"第一次进入线程1！\n");
 8011faa:	4921      	ldr	r1, [pc, #132]	; (8012030 <thread_SPThread1+0x88>)
 8011fac:	2002      	movs	r0, #2
 8011fae:	f000 f97b 	bl	80122a8 <uart_send_string>
	gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	f240 1009 	movw	r0, #265	; 0x109
 8011fba:	f7fe f89b 	bl	80100f4 <gpio_init>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	4611      	mov	r1, r2
 8011fc2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011fc6:	f7fe f895 	bl	80100f4 <gpio_init>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8011fca:	2201      	movs	r2, #1
 8011fcc:	4611      	mov	r1, r2
 8011fce:	f240 1007 	movw	r0, #263	; 0x107
 8011fd2:	f7fe f88f 	bl	80100f4 <gpio_init>
 8011fd6:	e015      	b.n	8012004 <thread_SPThread1+0x5c>
		if(SPcount==0)
		{
			uart_send_string(UART_User,(void *)"SP为0，线程1等待\n");
		}
		//获取一个信号量
		rt_sem_take(SP,RT_WAITING_FOREVER);
 8011fd8:	4c16      	ldr	r4, [pc, #88]	; (8012034 <thread_SPThread1+0x8c>)
 8011fda:	f04f 31ff 	mov.w	r1, #4294967295
 8011fde:	6820      	ldr	r0, [r4, #0]
 8011fe0:	f7fe f939 	bl	8010256 <rt_sem_take>
		SPcount=SP->value;
 8011fe4:	6823      	ldr	r3, [r4, #0]
		//uart_send_string(UART_User,(void *)"线程1获取1个SP，SP还剩%d\n",SPcount);
		userprintf("线程1获取1个SP，SP还剩%d\n",SPcount);
 8011fe6:	8b99      	ldrh	r1, [r3, #28]
 8011fe8:	4813      	ldr	r0, [pc, #76]	; (8012038 <thread_SPThread1+0x90>)
 8011fea:	f7fd f821 	bl	800f030 <userprintf>
		delay_ms(5000);
 8011fee:	f241 3088 	movw	r0, #5000	; 0x1388
 8011ff2:	f7fd f9c1 	bl	800f378 <rt_thread_delay>
		//释放一个信号量
		rt_sem_release(SP);
 8011ff6:	6820      	ldr	r0, [r4, #0]
 8011ff8:	f7fe f993 	bl	8010322 <rt_sem_release>
        uart_send_string(UART_User,(void *)"线程1成功释放1个SP\n");
 8011ffc:	490f      	ldr	r1, [pc, #60]	; (801203c <thread_SPThread1+0x94>)
 8011ffe:	2002      	movs	r0, #2
 8012000:	f000 f952 	bl	80122a8 <uart_send_string>
    	delay_ms(1000);    //延时1秒
 8012004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012008:	f7fd f9b6 	bl	800f378 <rt_thread_delay>
    	SPcount=SP->value;  //获取信号量的值
 801200c:	4b09      	ldr	r3, [pc, #36]	; (8012034 <thread_SPThread1+0x8c>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	8b9c      	ldrh	r4, [r3, #28]
		userprintf("当前SP为%d\n",SPcount);
 8012012:	4621      	mov	r1, r4
 8012014:	480a      	ldr	r0, [pc, #40]	; (8012040 <thread_SPThread1+0x98>)
 8012016:	f7fd f80b 	bl	800f030 <userprintf>
    	uart_send_string(UART_User,(void *)"线程1请求1个SP\n");
 801201a:	490a      	ldr	r1, [pc, #40]	; (8012044 <thread_SPThread1+0x9c>)
 801201c:	2002      	movs	r0, #2
 801201e:	f000 f943 	bl	80122a8 <uart_send_string>
		if(SPcount==0)
 8012022:	2c00      	cmp	r4, #0
 8012024:	d1d8      	bne.n	8011fd8 <thread_SPThread1+0x30>
			uart_send_string(UART_User,(void *)"SP为0，线程1等待\n");
 8012026:	4908      	ldr	r1, [pc, #32]	; (8012048 <thread_SPThread1+0xa0>)
 8012028:	2002      	movs	r0, #2
 801202a:	f000 f93d 	bl	80122a8 <uart_send_string>
 801202e:	e7d3      	b.n	8011fd8 <thread_SPThread1+0x30>
 8012030:	080142b4 	.word	0x080142b4
 8012034:	20007324 	.word	0x20007324
 8012038:	080142ec 	.word	0x080142ec
 801203c:	08014308 	.word	0x08014308
 8012040:	08013028 	.word	0x08013028
 8012044:	080142c8 	.word	0x080142c8
 8012048:	080142d8 	.word	0x080142d8

0801204c <Vectors_Init>:
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
 801204c:	b500      	push	{lr}
 801204e:	f6ad 0d04 	subw	sp, sp, #2052	; 0x804
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数1扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
 8012052:	2118      	movs	r1, #24
 8012054:	207f      	movs	r0, #127	; 0x7f
 8012056:	f7fd ff4e 	bl	800fef6 <flash_isempty>
 801205a:	bb20      	cbnz	r0, 80120a6 <Vectors_Init+0x5a>
    }
    //（2）继承BIOS的串口中断
    void ** bios=(void *)MCU_FLASH_ADDR_START;   //向量表起始地址
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
 801205c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012060:	4914      	ldr	r1, [pc, #80]	; (80120b4 <Vectors_Init+0x68>)
 8012062:	4668      	mov	r0, sp
 8012064:	f7fd ff43 	bl	800feee <flash_read_physical>
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
 8012068:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801206a:	4b13      	ldr	r3, [pc, #76]	; (80120b8 <Vectors_Init+0x6c>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	429a      	cmp	r2, r3
 8012070:	d00b      	beq.n	801208a <Vectors_Init+0x3e>
    {
        //改变User中断向量表中BIOS_UART中断向量
        flash_erase(GEC_USER_SECTOR_START);
 8012072:	201a      	movs	r0, #26
 8012074:	f7fd ff06 	bl	800fe84 <flash_erase>
        //改USER中断向量表的BIOS程序写入串口的中断处理程序地址
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
 8012078:	4b0f      	ldr	r3, [pc, #60]	; (80120b8 <Vectors_Init+0x6c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	9337      	str	r3, [sp, #220]	; 0xdc
        user[BIOS_SVC_IRQn]=(uint32_t)bios[BIOS_SVC_IRQn];
		user[BIOS_PendSV_Handler]=(uint32_t)bios[BIOS_PendSV_Handler];
		user[BIOS_SysTick_Handler]=(uint32_t)bios[BIOS_SysTick_Handler];
    #endif
		
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
 801207e:	466a      	mov	r2, sp
 8012080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012084:	480b      	ldr	r0, [pc, #44]	; (80120b4 <Vectors_Init+0x68>)
 8012086:	f7fd fff5 	bl	8010074 <flash_write_physical>
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
 801208a:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <Vectors_Init+0x70>)
 801208c:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <Vectors_Init+0x68>)
 801208e:	609a      	str	r2, [r3, #8]
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
 8012090:	4b0b      	ldr	r3, [pc, #44]	; (80120c0 <Vectors_Init+0x74>)
 8012092:	f5a2 5260 	sub.w	r2, r2, #14336	; 0x3800
 8012096:	601a      	str	r2, [r3, #0]
                   GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示
    printf("  【User提示】：将进入User的main()执行...\r\n");
 8012098:	480a      	ldr	r0, [pc, #40]	; (80120c4 <Vectors_Init+0x78>)
 801209a:	f7fc ffb5 	bl	800f008 <myprintf>
    
    #endif
}
 801209e:	f60d 0d04 	addw	sp, sp, #2052	; 0x804
 80120a2:	f85d fb04 	ldr.w	pc, [sp], #4
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
 80120a6:	4a08      	ldr	r2, [pc, #32]	; (80120c8 <Vectors_Init+0x7c>)
 80120a8:	2118      	movs	r1, #24
 80120aa:	4808      	ldr	r0, [pc, #32]	; (80120cc <Vectors_Init+0x80>)
 80120ac:	f7fd ffe2 	bl	8010074 <flash_write_physical>
 80120b0:	e7d4      	b.n	801205c <Vectors_Init+0x10>
 80120b2:	bf00      	nop
 80120b4:	0800d000 	.word	0x0800d000
 80120b8:	080000dc 	.word	0x080000dc
 80120bc:	e000ed00 	.word	0xe000ed00
 80120c0:	20007c80 	.word	0x20007c80
 80120c4:	08014338 	.word	0x08014338
 80120c8:	0801431c 	.word	0x0801431c
 80120cc:	0803f800 	.word	0x0803f800

080120d0 <uart_is_uartNo>:
//参数说明：串口号uartNo  :UART_1、UART_2、UART_3
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    if(uartNo < UART_1 || uartNo > UART_3)
 80120d0:	3801      	subs	r0, #1
 80120d2:	b2c0      	uxtb	r0, r0
 80120d4:	2802      	cmp	r0, #2
 80120d6:	d801      	bhi.n	80120dc <uart_is_uartNo+0xc>
        return 0;
    else
        return 1;
 80120d8:	2001      	movs	r0, #1
}
 80120da:	4770      	bx	lr
        return 0;
 80120dc:	2000      	movs	r0, #0
 80120de:	4770      	bx	lr

080120e0 <uart_init>:
{
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	4604      	mov	r4, r0
 80120e4:	460d      	mov	r5, r1
	if(!uart_is_uartNo(uartNo))
 80120e6:	f7ff fff3 	bl	80120d0 <uart_is_uartNo>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	d03c      	beq.n	8012168 <uart_init+0x88>
	switch(uartNo)
 80120ee:	2c02      	cmp	r4, #2
 80120f0:	d057      	beq.n	80121a2 <uart_init+0xc2>
 80120f2:	2c03      	cmp	r4, #3
 80120f4:	d071      	beq.n	80121da <uart_init+0xfa>
 80120f6:	2c01      	cmp	r4, #1
 80120f8:	d037      	beq.n	801216a <uart_init+0x8a>
	USART_ARR[uartNo-1]->CR1 &= ~USART_CR1_UE;
 80120fa:	1e60      	subs	r0, r4, #1
 80120fc:	4b47      	ldr	r3, [pc, #284]	; (801221c <uart_init+0x13c>)
 80120fe:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8012102:	680a      	ldr	r2, [r1, #0]
 8012104:	f022 0201 	bic.w	r2, r2, #1
 8012108:	600a      	str	r2, [r1, #0]
	USART_ARR[uartNo-1]->CR1 &= ~(USART_CR1_TE_Msk|USART_CR1_RE_Msk);
 801210a:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 801210e:	680a      	ldr	r2, [r1, #0]
 8012110:	f022 020c 	bic.w	r2, r2, #12
 8012114:	600a      	str	r2, [r1, #0]
	if((USART_ARR[uartNo-1]->CR1 & USART_CR1_OVER8_Msk) == USART_CR1_OVER8_Msk)
 8012116:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8012120:	d076      	beq.n	8012210 <uart_init+0x130>
	    usartdiv = (uint16_t)((SystemCoreClock/baud_rate)*2);
 8012122:	4a3f      	ldr	r2, [pc, #252]	; (8012220 <uart_init+0x140>)
 8012124:	6811      	ldr	r1, [r2, #0]
 8012126:	fbb1 f1f5 	udiv	r1, r1, r5
 801212a:	b289      	uxth	r1, r1
 801212c:	0049      	lsls	r1, r1, #1
 801212e:	b289      	uxth	r1, r1
	USART_ARR[uartNo-1]->BRR = usartdiv;
 8012130:	60d9      	str	r1, [r3, #12]
	USART_ARR[uartNo-1]->ISR = 0;
 8012132:	4b3a      	ldr	r3, [pc, #232]	; (801221c <uart_init+0x13c>)
 8012134:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8012138:	2100      	movs	r1, #0
 801213a:	61d1      	str	r1, [r2, #28]
	USART_ARR[uartNo-1]->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801213c:	6851      	ldr	r1, [r2, #4]
 801213e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8012142:	6051      	str	r1, [r2, #4]
	USART_ARR[uartNo-1]->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012144:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8012148:	688a      	ldr	r2, [r1, #8]
 801214a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801214e:	608a      	str	r2, [r1, #8]
	USART_ARR[uartNo-1]->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 8012150:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8012154:	680a      	ldr	r2, [r1, #0]
 8012156:	f042 020c 	orr.w	r2, r2, #12
 801215a:	600a      	str	r2, [r1, #0]
	USART_ARR[uartNo-1]->CR1 |= USART_CR1_UE;
 801215c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8012160:	6813      	ldr	r3, [r2, #0]
 8012162:	f043 0301 	orr.w	r3, r3, #1
 8012166:	6013      	str	r3, [r2, #0]
}
 8012168:	bd38      	pop	{r3, r4, r5, pc}
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 801216a:	4b2e      	ldr	r3, [pc, #184]	; (8012224 <uart_init+0x144>)
 801216c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801216e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012172:	661a      	str	r2, [r3, #96]	; 0x60
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8012174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012176:	f042 0201 	orr.w	r2, r2, #1
 801217a:	64da      	str	r2, [r3, #76]	; 0x4c
			GPIOA->MODER &= ~(GPIO_MODER_MODE9|GPIO_MODER_MODE10);
 801217c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8012186:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (GPIO_MODER_MODE9_1|GPIO_MODER_MODE10_1);
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
 801218e:	601a      	str	r2, [r3, #0]
			GPIOA->AFR[1] &= ~(GPIO_AFRH_AFSEL9|GPIO_AFRH_AFSEL10);
 8012190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012192:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8012196:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOA->AFR[1] |= ((GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2)
 8012198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801219a:	f442 62ee 	orr.w	r2, r2, #1904	; 0x770
 801219e:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80121a0:	e7ab      	b.n	80120fa <uart_init+0x1a>
			RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80121a2:	4b20      	ldr	r3, [pc, #128]	; (8012224 <uart_init+0x144>)
 80121a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80121a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80121aa:	659a      	str	r2, [r3, #88]	; 0x58
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80121ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121ae:	f042 0201 	orr.w	r2, r2, #1
 80121b2:	64da      	str	r2, [r3, #76]	; 0x4c
			GPIOA->MODER &= ~(GPIO_MODER_MODE2|GPIO_MODER_MODE3);
 80121b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80121b8:	681a      	ldr	r2, [r3, #0]
 80121ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80121be:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (GPIO_MODER_MODE2_1|GPIO_MODER_MODE3_1);
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80121c6:	601a      	str	r2, [r3, #0]
			GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2|GPIO_AFRL_AFSEL3);
 80121c8:	6a1a      	ldr	r2, [r3, #32]
 80121ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80121ce:	621a      	str	r2, [r3, #32]
			GPIOA->AFR[0] |= ((GPIO_AFRL_AFSEL2_0 | GPIO_AFRL_AFSEL2_1 | GPIO_AFRL_AFSEL2_2)
 80121d0:	6a1a      	ldr	r2, [r3, #32]
 80121d2:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 80121d6:	621a      	str	r2, [r3, #32]
		break;
 80121d8:	e78f      	b.n	80120fa <uart_init+0x1a>
			RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN;
 80121da:	4b12      	ldr	r3, [pc, #72]	; (8012224 <uart_init+0x144>)
 80121dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80121de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80121e2:	659a      	str	r2, [r3, #88]	; 0x58
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80121e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121e6:	f042 0204 	orr.w	r2, r2, #4
 80121ea:	64da      	str	r2, [r3, #76]	; 0x4c
			GPIOC->MODER &= ~(GPIO_MODER_MODE10|GPIO_MODER_MODE11);
 80121ec:	4b0e      	ldr	r3, [pc, #56]	; (8012228 <uart_init+0x148>)
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80121f4:	601a      	str	r2, [r3, #0]
			GPIOC->MODER |= (GPIO_MODER_MODE10_1|GPIO_MODER_MODE11_1);
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 80121fc:	601a      	str	r2, [r3, #0]
			GPIOC->AFR[1] &= ~(GPIO_AFRH_AFSEL10|GPIO_AFRH_AFSEL11);
 80121fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012200:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8012204:	625a      	str	r2, [r3, #36]	; 0x24
			GPIOC->AFR[1] |= ((GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2)
 8012206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012208:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 801220c:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 801220e:	e774      	b.n	80120fa <uart_init+0x1a>
	    usartdiv = (uint16_t)(SystemCoreClock/baud_rate);
 8012210:	4a03      	ldr	r2, [pc, #12]	; (8012220 <uart_init+0x140>)
 8012212:	6811      	ldr	r1, [r2, #0]
 8012214:	fbb1 f1f5 	udiv	r1, r1, r5
 8012218:	b289      	uxth	r1, r1
 801221a:	e789      	b.n	8012130 <uart_init+0x50>
 801221c:	20004098 	.word	0x20004098
 8012220:	2000400c 	.word	0x2000400c
 8012224:	40021000 	.word	0x40021000
 8012228:	48000800 	.word	0x48000800

0801222c <uart_send1>:
{
 801222c:	b538      	push	{r3, r4, r5, lr}
 801222e:	4604      	mov	r4, r0
 8012230:	460d      	mov	r5, r1
	if(!uart_is_uartNo(uartNo))
 8012232:	f7ff ff4d 	bl	80120d0 <uart_is_uartNo>
 8012236:	4603      	mov	r3, r0
 8012238:	b1a8      	cbz	r0, 8012266 <uart_send1+0x3a>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 801223a:	2200      	movs	r2, #0
 801223c:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 8012240:	429a      	cmp	r2, r3
 8012242:	d80b      	bhi.n	801225c <uart_send1+0x30>
		if ( USART_ARR[uartNo-1]->ISR & USART_ISR_TXE_Msk )
 8012244:	1e63      	subs	r3, r4, #1
 8012246:	490a      	ldr	r1, [pc, #40]	; (8012270 <uart_send1+0x44>)
 8012248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801224c:	69d9      	ldr	r1, [r3, #28]
 801224e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012252:	d101      	bne.n	8012258 <uart_send1+0x2c>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 8012254:	3201      	adds	r2, #1
 8012256:	e7f1      	b.n	801223c <uart_send1+0x10>
			USART_ARR[uartNo-1]->TDR = ch;
 8012258:	b2ad      	uxth	r5, r5
 801225a:	851d      	strh	r5, [r3, #40]	; 0x28
	if (t >= 0xFBBB)
 801225c:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 8012260:	429a      	cmp	r2, r3
 8012262:	d802      	bhi.n	801226a <uart_send1+0x3e>
		return 1; //成功发送
 8012264:	2301      	movs	r3, #1
}
 8012266:	4618      	mov	r0, r3
 8012268:	bd38      	pop	{r3, r4, r5, pc}
		return 0; //发送超时，发送失败
 801226a:	2300      	movs	r3, #0
 801226c:	e7fb      	b.n	8012266 <uart_send1+0x3a>
 801226e:	bf00      	nop
 8012270:	20004098 	.word	0x20004098

08012274 <uart_sendN>:
{
 8012274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012276:	4606      	mov	r6, r0
 8012278:	460d      	mov	r5, r1
 801227a:	4617      	mov	r7, r2
    if(!uart_is_uartNo(uartNo))
 801227c:	f7ff ff28 	bl	80120d0 <uart_is_uartNo>
 8012280:	4603      	mov	r3, r0
 8012282:	b168      	cbz	r0, 80122a0 <uart_sendN+0x2c>
    for (i = 0; i < len; i++)
 8012284:	2400      	movs	r4, #0
 8012286:	42ac      	cmp	r4, r5
 8012288:	d207      	bcs.n	801229a <uart_sendN+0x26>
        if (!uart_send1(uartNo, buff[i])) //发送一个字节数据，失败则跳出循环
 801228a:	5d39      	ldrb	r1, [r7, r4]
 801228c:	4630      	mov	r0, r6
 801228e:	f7ff ffcd 	bl	801222c <uart_send1>
 8012292:	b110      	cbz	r0, 801229a <uart_sendN+0x26>
    for (i = 0; i < len; i++)
 8012294:	3401      	adds	r4, #1
 8012296:	b2a4      	uxth	r4, r4
 8012298:	e7f5      	b.n	8012286 <uart_sendN+0x12>
    if(i<len)
 801229a:	42ac      	cmp	r4, r5
 801229c:	d302      	bcc.n	80122a4 <uart_sendN+0x30>
        return 1;    //发送出错
 801229e:	2301      	movs	r3, #1
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;    //发送出错
 80122a4:	2300      	movs	r3, #0
 80122a6:	e7fb      	b.n	80122a0 <uart_sendN+0x2c>

080122a8 <uart_send_string>:
{
 80122a8:	b570      	push	{r4, r5, r6, lr}
 80122aa:	4606      	mov	r6, r0
 80122ac:	460d      	mov	r5, r1
    if(!uart_is_uartNo(uartNo))
 80122ae:	f7ff ff0f 	bl	80120d0 <uart_is_uartNo>
 80122b2:	4603      	mov	r3, r0
 80122b4:	b158      	cbz	r0, 80122ce <uart_send_string+0x26>
    for(i = 0; buff_ptr[i] != '\0'; i++)   //遍历字符串里的字符
 80122b6:	2400      	movs	r4, #0
 80122b8:	5d29      	ldrb	r1, [r5, r4]
 80122ba:	b139      	cbz	r1, 80122cc <uart_send_string+0x24>
        if (!uart_send1(uartNo,buff_ptr[i]))//发送指针对应的字符
 80122bc:	4630      	mov	r0, r6
 80122be:	f7ff ffb5 	bl	801222c <uart_send1>
 80122c2:	4603      	mov	r3, r0
 80122c4:	b118      	cbz	r0, 80122ce <uart_send_string+0x26>
    for(i = 0; buff_ptr[i] != '\0'; i++)   //遍历字符串里的字符
 80122c6:	3401      	adds	r4, #1
 80122c8:	b2a4      	uxth	r4, r4
 80122ca:	e7f5      	b.n	80122b8 <uart_send_string+0x10>
    return 1;          //发送成功
 80122cc:	2301      	movs	r3, #1
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080122d4 <uart_re1>:
{
 80122d4:	b570      	push	{r4, r5, r6, lr}
 80122d6:	4604      	mov	r4, r0
 80122d8:	460d      	mov	r5, r1
	if(!uart_is_uartNo(uartNo))
 80122da:	f7ff fef9 	bl	80120d0 <uart_is_uartNo>
 80122de:	4606      	mov	r6, r0
 80122e0:	b170      	cbz	r0, 8012300 <uart_re1+0x2c>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 80122e2:	2200      	movs	r2, #0
 80122e4:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d811      	bhi.n	8012310 <uart_re1+0x3c>
		if (USART_ARR[uartNo-1]->ISR & USART_ISR_RXNE_Msk)
 80122ec:	1e63      	subs	r3, r4, #1
 80122ee:	490c      	ldr	r1, [pc, #48]	; (8012320 <uart_re1+0x4c>)
 80122f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80122f4:	69d9      	ldr	r1, [r3, #28]
 80122f6:	f011 0f20 	tst.w	r1, #32
 80122fa:	d105      	bne.n	8012308 <uart_re1+0x34>
	for (t = 0; t < 0xFBBB; t++)//查询指定次数
 80122fc:	3201      	adds	r2, #1
 80122fe:	e7f1      	b.n	80122e4 <uart_re1+0x10>
		*fp=0;
 8012300:	2300      	movs	r3, #0
 8012302:	702b      	strb	r3, [r5, #0]
}
 8012304:	4630      	mov	r0, r6
 8012306:	bd70      	pop	{r4, r5, r6, pc}
			dat=USART_ARR[uartNo-1]->RDR;    //获取数据,清接收中断位
 8012308:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 801230a:	b2f6      	uxtb	r6, r6
			*fp = 1;  //接收成功
 801230c:	2301      	movs	r3, #1
 801230e:	702b      	strb	r3, [r5, #0]
	if(t >= 0xFBBB)
 8012310:	f64f 33ba 	movw	r3, #64442	; 0xfbba
 8012314:	429a      	cmp	r2, r3
 8012316:	d9f5      	bls.n	8012304 <uart_re1+0x30>
		*fp = 0;    //未收到数据
 8012318:	2300      	movs	r3, #0
 801231a:	702b      	strb	r3, [r5, #0]
		dat = 0xFF;
 801231c:	26ff      	movs	r6, #255	; 0xff
 801231e:	e7f1      	b.n	8012304 <uart_re1+0x30>
 8012320:	20004098 	.word	0x20004098

08012324 <uart_enable_re_int>:
{
 8012324:	b510      	push	{r4, lr}
 8012326:	4604      	mov	r4, r0
	if(!uart_is_uartNo(uartNo))
 8012328:	f7ff fed2 	bl	80120d0 <uart_is_uartNo>
 801232c:	b198      	cbz	r0, 8012356 <uart_enable_re_int+0x32>
	USART_ARR[uartNo-1]->CR1 |= USART_CR1_RXNEIE_Msk;    //开放UART接收中断
 801232e:	1e60      	subs	r0, r4, #1
 8012330:	4b09      	ldr	r3, [pc, #36]	; (8012358 <uart_enable_re_int+0x34>)
 8012332:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8012336:	6813      	ldr	r3, [r2, #0]
 8012338:	f043 0320 	orr.w	r3, r3, #32
 801233c:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(table_irq_uart[uartNo-1]);    //开中断控制器IRQ中断
 801233e:	4b07      	ldr	r3, [pc, #28]	; (801235c <uart_enable_re_int+0x38>)
 8012340:	561b      	ldrsb	r3, [r3, r0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8012342:	2b00      	cmp	r3, #0
 8012344:	db07      	blt.n	8012356 <uart_enable_re_int+0x32>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012346:	f003 011f 	and.w	r1, r3, #31
 801234a:	095b      	lsrs	r3, r3, #5
 801234c:	2201      	movs	r2, #1
 801234e:	408a      	lsls	r2, r1
 8012350:	4903      	ldr	r1, [pc, #12]	; (8012360 <uart_enable_re_int+0x3c>)
 8012352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012356:	bd10      	pop	{r4, pc}
 8012358:	20004098 	.word	0x20004098
 801235c:	200040a4 	.word	0x200040a4
 8012360:	e000e100 	.word	0xe000e100

08012364 <uart_get_re_int>:
{
 8012364:	b510      	push	{r4, lr}
 8012366:	4604      	mov	r4, r0
	if(!uart_is_uartNo(uartNo))
 8012368:	f7ff feb2 	bl	80120d0 <uart_is_uartNo>
 801236c:	4603      	mov	r3, r0
 801236e:	b170      	cbz	r0, 801238e <uart_get_re_int+0x2a>
	if(((USART_ARR[uartNo-1]->ISR & USART_ISR_RXNE_Msk) == USART_ISR_RXNE_Msk)
 8012370:	3c01      	subs	r4, #1
 8012372:	4b09      	ldr	r3, [pc, #36]	; (8012398 <uart_get_re_int+0x34>)
 8012374:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012378:	69da      	ldr	r2, [r3, #28]
 801237a:	f012 0f20 	tst.w	r2, #32
 801237e:	d005      	beq.n	801238c <uart_get_re_int+0x28>
			&& ((USART_ARR[uartNo-1]->CR1 & USART_CR1_RXNEIE_Msk) == USART_CR1_RXNEIE_Msk))
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f013 0f20 	tst.w	r3, #32
 8012386:	d104      	bne.n	8012392 <uart_get_re_int+0x2e>
		return 0;
 8012388:	2300      	movs	r3, #0
 801238a:	e000      	b.n	801238e <uart_get_re_int+0x2a>
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	bd10      	pop	{r4, pc}
		return 1;
 8012392:	2301      	movs	r3, #1
 8012394:	e7fb      	b.n	801238e <uart_get_re_int+0x2a>
 8012396:	bf00      	nop
 8012398:	20004098 	.word	0x20004098

0801239c <rt_thread_idle_excute>:
     * into a "if".
     *
     * So add the volatile qualifier here. */
    const volatile rt_list_t *l = (const volatile rt_list_t *)&rt_thread_defunct;

    return l->next != l;
 801239c:	4b1f      	ldr	r3, [pc, #124]	; (801241c <rt_thread_idle_excute+0x80>)
 801239e:	681a      	ldr	r2, [r3, #0]
 */
void rt_thread_idle_excute(void)
{
    /* Loop until there is no dead thread. So one call to rt_thread_idle_excute
     * will do all the cleanups. */
    while (_has_defunct_thread())
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d039      	beq.n	8012418 <rt_thread_idle_excute+0x7c>
{
 80123a4:	b570      	push	{r4, r5, r6, lr}
        struct rt_dlmodule *module = RT_NULL;
#endif
        RT_DEBUG_NOT_IN_INTERRUPT;

        /* disable interrupt */
        lock = rt_hw_interrupt_disable();
 80123a6:	f7fb fa4b 	bl	800d840 <rt_hw_interrupt_disable>
 80123aa:	4606      	mov	r6, r0
    return l->next != l;
 80123ac:	4b1b      	ldr	r3, [pc, #108]	; (801241c <rt_thread_idle_excute+0x80>)
 80123ae:	681a      	ldr	r2, [r3, #0]

        /* re-check whether list is empty */
        if (_has_defunct_thread())
 80123b0:	429a      	cmp	r2, r3
 80123b2:	d02e      	beq.n	8012412 <rt_thread_idle_excute+0x76>
        {
            /* get defunct thread */
            thread = rt_list_entry(rt_thread_defunct.next,
 80123b4:	681c      	ldr	r4, [r3, #0]
 80123b6:	f1a4 0514 	sub.w	r5, r4, #20
    n->next->prev = n->prev;
 80123ba:	6823      	ldr	r3, [r4, #0]
 80123bc:	6862      	ldr	r2, [r4, #4]
 80123be:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
 80123c0:	6863      	ldr	r3, [r4, #4]
 80123c2:	6822      	ldr	r2, [r4, #0]
 80123c4:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
 80123c6:	6064      	str	r4, [r4, #4]
 80123c8:	6024      	str	r4, [r4, #0]
#endif
            /* remove defunct thread */
            rt_list_remove(&(thread->tlist));

            /* lock scheduler to prevent scheduling in cleanup function. */
            rt_enter_critical();
 80123ca:	f7ff fd31 	bl	8011e30 <rt_enter_critical>

            /* invoke thread cleanup */
            if (thread->cleanup != RT_NULL)
 80123ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123d0:	b10b      	cbz	r3, 80123d6 <rt_thread_idle_excute+0x3a>
                thread->cleanup(thread);
 80123d2:	4628      	mov	r0, r5
 80123d4:	4798      	blx	r3
#ifdef RT_USING_SIGNALS
            rt_thread_free_sig(thread);
#endif

            /* if it's a system object, not delete it */
            if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
 80123d6:	4628      	mov	r0, r5
 80123d8:	f7fd fcc1 	bl	800fd5e <rt_object_is_systemobject>
 80123dc:	2801      	cmp	r0, #1
 80123de:	d00f      	beq.n	8012400 <rt_thread_idle_excute+0x64>

                return;
            }

            /* unlock scheduler */
            rt_exit_critical();
 80123e0:	f7ff fd32 	bl	8011e48 <rt_exit_critical>
            /* may the defunct thread list is removed by others, just return */
            return;
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(lock);
 80123e4:	4630      	mov	r0, r6
 80123e6:	f7fb fa2f 	bl	800d848 <rt_hw_interrupt_enable>

#ifdef RT_USING_HEAP
        /* release thread's stack */
        RT_KERNEL_FREE(thread->stack_addr);
 80123ea:	6960      	ldr	r0, [r4, #20]
 80123ec:	f000 fbbe 	bl	8012b6c <rt_free>
        /* delete thread object */
        rt_object_delete((rt_object_t)thread);
 80123f0:	4628      	mov	r0, r5
 80123f2:	f7fd fc9e 	bl	800fd32 <rt_object_delete>
    return l->next != l;
 80123f6:	4b09      	ldr	r3, [pc, #36]	; (801241c <rt_thread_idle_excute+0x80>)
 80123f8:	681a      	ldr	r2, [r3, #0]
    while (_has_defunct_thread())
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d1d3      	bne.n	80123a6 <rt_thread_idle_excute+0xa>
 80123fe:	e00a      	b.n	8012416 <rt_thread_idle_excute+0x7a>
                rt_object_detach((rt_object_t)thread);
 8012400:	4628      	mov	r0, r5
 8012402:	f7fd fc5b 	bl	800fcbc <rt_object_detach>
                rt_exit_critical();
 8012406:	f7ff fd1f 	bl	8011e48 <rt_exit_critical>
                rt_hw_interrupt_enable(lock);
 801240a:	4630      	mov	r0, r6
 801240c:	f7fb fa1c 	bl	800d848 <rt_hw_interrupt_enable>
                return;
 8012410:	e001      	b.n	8012416 <rt_thread_idle_excute+0x7a>
            rt_hw_interrupt_enable(lock);
 8012412:	f7fb fa19 	bl	800d848 <rt_hw_interrupt_enable>
#endif
    }
}
 8012416:	bd70      	pop	{r4, r5, r6, pc}
 8012418:	4770      	bx	lr
 801241a:	bf00      	nop
 801241c:	20007c78 	.word	0x20007c78

08012420 <rt_thread_idle_entry>:

extern void rt_system_power_manager(void);
static void rt_thread_idle_entry(void *parameter)
{
 8012420:	b508      	push	{r3, lr}
                idle_hook_list[i]();
            }
        }
#endif

        rt_thread_idle_excute();
 8012422:	f7ff ffbb 	bl	801239c <rt_thread_idle_excute>
 8012426:	e7fc      	b.n	8012422 <rt_thread_idle_entry+0x2>

08012428 <rt_thread_idle_init>:
 * This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
 8012428:	b510      	push	{r4, lr}
 801242a:	b084      	sub	sp, #16
    /* initialize thread */
    rt_thread_init(&idle,
 801242c:	4c0a      	ldr	r4, [pc, #40]	; (8012458 <rt_thread_idle_init+0x30>)
 801242e:	2320      	movs	r3, #32
 8012430:	9303      	str	r3, [sp, #12]
 8012432:	231f      	movs	r3, #31
 8012434:	9302      	str	r3, [sp, #8]
 8012436:	f44f 7380 	mov.w	r3, #256	; 0x100
 801243a:	9301      	str	r3, [sp, #4]
 801243c:	4b07      	ldr	r3, [pc, #28]	; (801245c <rt_thread_idle_init+0x34>)
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	2300      	movs	r3, #0
 8012442:	4a07      	ldr	r2, [pc, #28]	; (8012460 <rt_thread_idle_init+0x38>)
 8012444:	4907      	ldr	r1, [pc, #28]	; (8012464 <rt_thread_idle_init+0x3c>)
 8012446:	4620      	mov	r0, r4
 8012448:	f7fc fe83 	bl	800f152 <rt_thread_init>
                   sizeof(rt_thread_stack),
                   RT_THREAD_PRIORITY_MAX - 1,
                   32);

    /* startup */
    rt_thread_startup(&idle);
 801244c:	4620      	mov	r0, r4
 801244e:	f7fc ffbb 	bl	800f3c8 <rt_thread_startup>
}
 8012452:	b004      	add	sp, #16
 8012454:	bd10      	pop	{r4, pc}
 8012456:	bf00      	nop
 8012458:	20007160 	.word	0x20007160
 801245c:	200071e0 	.word	0x200071e0
 8012460:	08012421 	.word	0x08012421
 8012464:	08014364 	.word	0x08014364

08012468 <app_init>:
//功能概要：主线程，要完成全局变量初始化、外设初始化、创建其他用户线程、启动用户线程等工作
//内部调用：无
//======================================================================

void app_init(void)
{
 8012468:	b570      	push	{r4, r5, r6, lr}
 801246a:	b082      	sub	sp, #8


	
	//（1.2）【不变】BIOS中API接口表首地址、用户中断处理程序名初始化
	//（1.3）【不变】关总中断
	DISABLE_INTERRUPTS;
 801246c:	b672      	cpsid	i
	//（1.4）给主函数使用的局部变量赋初值

	//（1.5）给全局变量赋初值

	//（1.6）用户外设模块初始化
	printf("  调用gpio_init函数，分别初始化红灯、绿灯、蓝灯\r\n");
 801246e:	4895      	ldr	r0, [pc, #596]	; (80126c4 <app_init+0x25c>)
 8012470:	f7fc fdca 	bl	800f008 <myprintf>
	gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8012474:	2201      	movs	r2, #1
 8012476:	4611      	mov	r1, r2
 8012478:	f44f 7084 	mov.w	r0, #264	; 0x108
 801247c:	f7fd fe3a 	bl	80100f4 <gpio_init>
	gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8012480:	2201      	movs	r2, #1
 8012482:	4611      	mov	r1, r2
 8012484:	f240 1009 	movw	r0, #265	; 0x109
 8012488:	f7fd fe34 	bl	80100f4 <gpio_init>
	gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 801248c:	2201      	movs	r2, #1
 801248e:	4611      	mov	r1, r2
 8012490:	f240 1007 	movw	r0, #263	; 0x107
 8012494:	f7fd fe2e 	bl	80100f4 <gpio_init>
	uart_init(UART_User,115200); 
 8012498:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 801249c:	2002      	movs	r0, #2
 801249e:	f7ff fe1f 	bl	80120e0 <uart_init>
	    //LCD初始化、初始界面绘制
    LCD_Init();
 80124a2:	f7fe fd6d 	bl	8010f80 <LCD_Init>
    LCD_aotu(2,2,238,318,0);
 80124a6:	2500      	movs	r5, #0
 80124a8:	9500      	str	r5, [sp, #0]
 80124aa:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80124ae:	22ee      	movs	r2, #238	; 0xee
 80124b0:	2102      	movs	r1, #2
 80124b2:	4608      	mov	r0, r1
 80124b4:	f7fe fce4 	bl	8010e80 <LCD_aotu>
    LCD_ShowString(35,20,BLACK,GRAY,(char *)"RT-Thread实验演示系统");
 80124b8:	4b83      	ldr	r3, [pc, #524]	; (80126c8 <app_init+0x260>)
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	f248 4330 	movw	r3, #33840	; 0x8430
 80124c0:	462a      	mov	r2, r5
 80124c2:	2114      	movs	r1, #20
 80124c4:	2023      	movs	r0, #35	; 0x23
 80124c6:	f7fe fc43 	bl	8010d50 <LCD_ShowString>
    LCD_ShowString(96,50,RED,GRAY,(char *)" 未连接");
 80124ca:	4b80      	ldr	r3, [pc, #512]	; (80126cc <app_init+0x264>)
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	f248 4330 	movw	r3, #33840	; 0x8430
 80124d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80124d6:	2132      	movs	r1, #50	; 0x32
 80124d8:	2060      	movs	r0, #96	; 0x60
 80124da:	f7fe fc39 	bl	8010d50 <LCD_ShowString>
    
    LCD_ShowString(6,90,BLACK,GRAY,(char *)"程序版本:1.01");
 80124de:	4b7c      	ldr	r3, [pc, #496]	; (80126d0 <app_init+0x268>)
 80124e0:	9300      	str	r3, [sp, #0]
 80124e2:	f248 4330 	movw	r3, #33840	; 0x8430
 80124e6:	462a      	mov	r2, r5
 80124e8:	215a      	movs	r1, #90	; 0x5a
 80124ea:	2006      	movs	r0, #6
 80124ec:	f7fe fc30 	bl	8010d50 <LCD_ShowString>
    LCD_aotu(4,110,236,120,1);
 80124f0:	2401      	movs	r4, #1
 80124f2:	9400      	str	r4, [sp, #0]
 80124f4:	2378      	movs	r3, #120	; 0x78
 80124f6:	22ec      	movs	r2, #236	; 0xec
 80124f8:	216e      	movs	r1, #110	; 0x6e
 80124fa:	2004      	movs	r0, #4
 80124fc:	f7fe fcc0 	bl	8010e80 <LCD_aotu>
    LCD_ShowString(6,125,BLACK,GRAY,(char *)"当前状态:等待命令");
 8012500:	4b74      	ldr	r3, [pc, #464]	; (80126d4 <app_init+0x26c>)
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	f248 4330 	movw	r3, #33840	; 0x8430
 8012508:	462a      	mov	r2, r5
 801250a:	217d      	movs	r1, #125	; 0x7d
 801250c:	2006      	movs	r0, #6
 801250e:	f7fe fc1f 	bl	8010d50 <LCD_ShowString>
    LCD_aotu(4,145,236,155,1);
 8012512:	9400      	str	r4, [sp, #0]
 8012514:	239b      	movs	r3, #155	; 0x9b
 8012516:	22ec      	movs	r2, #236	; 0xec
 8012518:	2191      	movs	r1, #145	; 0x91
 801251a:	2004      	movs	r0, #4
 801251c:	f7fe fcb0 	bl	8010e80 <LCD_aotu>
    LCD_ShowString(6,160,BLACK,GRAY,(char *)"小灯状态:关");
 8012520:	4b6d      	ldr	r3, [pc, #436]	; (80126d8 <app_init+0x270>)
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	f248 4330 	movw	r3, #33840	; 0x8430
 8012528:	462a      	mov	r2, r5
 801252a:	21a0      	movs	r1, #160	; 0xa0
 801252c:	2006      	movs	r0, #6
 801252e:	f7fe fc0f 	bl	8010d50 <LCD_ShowString>
    LCD_aotu(4,180,236,190,1);
 8012532:	9400      	str	r4, [sp, #0]
 8012534:	23be      	movs	r3, #190	; 0xbe
 8012536:	22ec      	movs	r2, #236	; 0xec
 8012538:	21b4      	movs	r1, #180	; 0xb4
 801253a:	2004      	movs	r0, #4
 801253c:	f7fe fca0 	bl	8010e80 <LCD_aotu>
	//（1.7）使能模块中断
	uart_enable_re_int(UART_User);
 8012540:	2002      	movs	r0, #2
 8012542:	f7ff feef 	bl	8012324 <uart_enable_re_int>
	//（1.8）【不变】开总中断
	ENABLE_INTERRUPTS;
 8012546:	b662      	cpsie	i
	
	//创建事件字
	EventWord=rt_event_create("EventWord",RT_IPC_FLAG_PRIO);
 8012548:	4621      	mov	r1, r4
 801254a:	4864      	ldr	r0, [pc, #400]	; (80126dc <app_init+0x274>)
 801254c:	f7fd fff0 	bl	8010530 <rt_event_create>
 8012550:	4b63      	ldr	r3, [pc, #396]	; (80126e0 <app_init+0x278>)
 8012552:	6018      	str	r0, [r3, #0]
	//创建消息队列
	mq=rt_mq_create("mq",9,4,RT_IPC_FLAG_FIFO);
 8012554:	462b      	mov	r3, r5
 8012556:	2204      	movs	r2, #4
 8012558:	2109      	movs	r1, #9
 801255a:	4862      	ldr	r0, [pc, #392]	; (80126e4 <app_init+0x27c>)
 801255c:	f7fe f8f6 	bl	801074c <rt_mq_create>
 8012560:	4b61      	ldr	r3, [pc, #388]	; (80126e8 <app_init+0x280>)
 8012562:	6018      	str	r0, [r3, #0]
	//创建信号量
	SP=rt_sem_create("SP",2,RT_IPC_FLAG_FIFO);
 8012564:	462a      	mov	r2, r5
 8012566:	2102      	movs	r1, #2
 8012568:	4860      	ldr	r0, [pc, #384]	; (80126ec <app_init+0x284>)
 801256a:	f7fd fe63 	bl	8010234 <rt_sem_create>
 801256e:	4b60      	ldr	r3, [pc, #384]	; (80126f0 <app_init+0x288>)
 8012570:	6018      	str	r0, [r3, #0]
	//创建互斥量
	mutex=rt_mutex_create("mutex",RT_IPC_FLAG_PRIO);
 8012572:	4621      	mov	r1, r4
 8012574:	485f      	ldr	r0, [pc, #380]	; (80126f4 <app_init+0x28c>)
 8012576:	f7fd fef0 	bl	801035a <rt_mutex_create>
 801257a:	4b5f      	ldr	r3, [pc, #380]	; (80126f8 <app_init+0x290>)
 801257c:	6018      	str	r0, [r3, #0]


	//创建命令选择线程
	thd_cmdchoose=rt_thread_create("cmdchoose", (void *)thread_cmdchoose, 0, 512, 9, 10);
 801257e:	240a      	movs	r4, #10
 8012580:	9401      	str	r4, [sp, #4]
 8012582:	2309      	movs	r3, #9
 8012584:	9300      	str	r3, [sp, #0]
 8012586:	f44f 7300 	mov.w	r3, #512	; 0x200
 801258a:	462a      	mov	r2, r5
 801258c:	495b      	ldr	r1, [pc, #364]	; (80126fc <app_init+0x294>)
 801258e:	485c      	ldr	r0, [pc, #368]	; (8012700 <app_init+0x298>)
 8012590:	f7fc fe2c 	bl	800f1ec <rt_thread_create>
 8012594:	4606      	mov	r6, r0
	//创建三色灯线程
	thd_eventGreen = rt_thread_create("eventGreen", (void *)thread_eventGreen, 0, 512, 10, 10);
 8012596:	9401      	str	r4, [sp, #4]
 8012598:	9400      	str	r4, [sp, #0]
 801259a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801259e:	462a      	mov	r2, r5
 80125a0:	4958      	ldr	r1, [pc, #352]	; (8012704 <app_init+0x29c>)
 80125a2:	4859      	ldr	r0, [pc, #356]	; (8012708 <app_init+0x2a0>)
 80125a4:	f7fc fe22 	bl	800f1ec <rt_thread_create>
 80125a8:	4b58      	ldr	r3, [pc, #352]	; (801270c <app_init+0x2a4>)
 80125aa:	6018      	str	r0, [r3, #0]
	thd_eventBlue = rt_thread_create("eventBlue", (void *)thread_eventBlue, 0, 512, 10, 10);
 80125ac:	9401      	str	r4, [sp, #4]
 80125ae:	9400      	str	r4, [sp, #0]
 80125b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125b4:	462a      	mov	r2, r5
 80125b6:	4956      	ldr	r1, [pc, #344]	; (8012710 <app_init+0x2a8>)
 80125b8:	4856      	ldr	r0, [pc, #344]	; (8012714 <app_init+0x2ac>)
 80125ba:	f7fc fe17 	bl	800f1ec <rt_thread_create>
 80125be:	4b56      	ldr	r3, [pc, #344]	; (8012718 <app_init+0x2b0>)
 80125c0:	6018      	str	r0, [r3, #0]
	//创建消息队列线程
	thd_messagerecv = rt_thread_create("messagerecv", (void *)thread_messagerecv, 0, 512, 10, 10);
 80125c2:	9401      	str	r4, [sp, #4]
 80125c4:	9400      	str	r4, [sp, #0]
 80125c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125ca:	462a      	mov	r2, r5
 80125cc:	4953      	ldr	r1, [pc, #332]	; (801271c <app_init+0x2b4>)
 80125ce:	4854      	ldr	r0, [pc, #336]	; (8012720 <app_init+0x2b8>)
 80125d0:	f7fc fe0c 	bl	800f1ec <rt_thread_create>
 80125d4:	4b53      	ldr	r3, [pc, #332]	; (8012724 <app_init+0x2bc>)
 80125d6:	6018      	str	r0, [r3, #0]
	//创建三个信号量线程
	thd_SPThread1 = rt_thread_create("SPThread1", (void *)thread_SPThread1, 0, 512, 10, 10);
 80125d8:	9401      	str	r4, [sp, #4]
 80125da:	9400      	str	r4, [sp, #0]
 80125dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125e0:	462a      	mov	r2, r5
 80125e2:	4951      	ldr	r1, [pc, #324]	; (8012728 <app_init+0x2c0>)
 80125e4:	4851      	ldr	r0, [pc, #324]	; (801272c <app_init+0x2c4>)
 80125e6:	f7fc fe01 	bl	800f1ec <rt_thread_create>
 80125ea:	4b51      	ldr	r3, [pc, #324]	; (8012730 <app_init+0x2c8>)
 80125ec:	6018      	str	r0, [r3, #0]
	thd_SPThread2 = rt_thread_create("SPThread2", (void *)thread_SPThread2, 0, 512, 10, 10);
 80125ee:	9401      	str	r4, [sp, #4]
 80125f0:	9400      	str	r4, [sp, #0]
 80125f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125f6:	462a      	mov	r2, r5
 80125f8:	494e      	ldr	r1, [pc, #312]	; (8012734 <app_init+0x2cc>)
 80125fa:	484f      	ldr	r0, [pc, #316]	; (8012738 <app_init+0x2d0>)
 80125fc:	f7fc fdf6 	bl	800f1ec <rt_thread_create>
 8012600:	4b4e      	ldr	r3, [pc, #312]	; (801273c <app_init+0x2d4>)
 8012602:	6018      	str	r0, [r3, #0]
	thd_SPThread3 = rt_thread_create("SPThread3", (void *)thread_SPThread3, 0, 512, 10, 10);
 8012604:	9401      	str	r4, [sp, #4]
 8012606:	9400      	str	r4, [sp, #0]
 8012608:	f44f 7300 	mov.w	r3, #512	; 0x200
 801260c:	462a      	mov	r2, r5
 801260e:	494c      	ldr	r1, [pc, #304]	; (8012740 <app_init+0x2d8>)
 8012610:	484c      	ldr	r0, [pc, #304]	; (8012744 <app_init+0x2dc>)
 8012612:	f7fc fdeb 	bl	800f1ec <rt_thread_create>
 8012616:	4b4c      	ldr	r3, [pc, #304]	; (8012748 <app_init+0x2e0>)
 8012618:	6018      	str	r0, [r3, #0]
	//创建三个互斥量线程
	thd_mutexBlue = rt_thread_create("mutexBlue", (void *)thread_mutexBlue, 0, 512, 10, 10);
 801261a:	9401      	str	r4, [sp, #4]
 801261c:	9400      	str	r4, [sp, #0]
 801261e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012622:	462a      	mov	r2, r5
 8012624:	4949      	ldr	r1, [pc, #292]	; (801274c <app_init+0x2e4>)
 8012626:	484a      	ldr	r0, [pc, #296]	; (8012750 <app_init+0x2e8>)
 8012628:	f7fc fde0 	bl	800f1ec <rt_thread_create>
 801262c:	4b49      	ldr	r3, [pc, #292]	; (8012754 <app_init+0x2ec>)
 801262e:	6018      	str	r0, [r3, #0]
	thd_mutexGreen = rt_thread_create("mutexGreen", (void *)thread_mutexGreen, 0, 512, 10, 10);
 8012630:	9401      	str	r4, [sp, #4]
 8012632:	9400      	str	r4, [sp, #0]
 8012634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012638:	462a      	mov	r2, r5
 801263a:	4947      	ldr	r1, [pc, #284]	; (8012758 <app_init+0x2f0>)
 801263c:	4847      	ldr	r0, [pc, #284]	; (801275c <app_init+0x2f4>)
 801263e:	f7fc fdd5 	bl	800f1ec <rt_thread_create>
 8012642:	4b47      	ldr	r3, [pc, #284]	; (8012760 <app_init+0x2f8>)
 8012644:	6018      	str	r0, [r3, #0]
	thd_mutexRed = rt_thread_create("mutexRed", (void *)thread_mutexRed, 0, 512, 10, 10);
 8012646:	9401      	str	r4, [sp, #4]
 8012648:	9400      	str	r4, [sp, #0]
 801264a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801264e:	462a      	mov	r2, r5
 8012650:	4944      	ldr	r1, [pc, #272]	; (8012764 <app_init+0x2fc>)
 8012652:	4845      	ldr	r0, [pc, #276]	; (8012768 <app_init+0x300>)
 8012654:	f7fc fdca 	bl	800f1ec <rt_thread_create>
 8012658:	4b44      	ldr	r3, [pc, #272]	; (801276c <app_init+0x304>)
 801265a:	6018      	str	r0, [r3, #0]
	//创建三个延时线程
	thd_delayRed=rt_thread_create("delayRed", (void *)thread_delayRed, 0, 512, 10, 10);
 801265c:	9401      	str	r4, [sp, #4]
 801265e:	9400      	str	r4, [sp, #0]
 8012660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012664:	462a      	mov	r2, r5
 8012666:	4942      	ldr	r1, [pc, #264]	; (8012770 <app_init+0x308>)
 8012668:	4842      	ldr	r0, [pc, #264]	; (8012774 <app_init+0x30c>)
 801266a:	f7fc fdbf 	bl	800f1ec <rt_thread_create>
 801266e:	4b42      	ldr	r3, [pc, #264]	; (8012778 <app_init+0x310>)
 8012670:	6018      	str	r0, [r3, #0]
	thd_delayGreen=rt_thread_create("delayGreen", (void *)thread_delayGreen, 0, 512, 10, 10);
 8012672:	9401      	str	r4, [sp, #4]
 8012674:	9400      	str	r4, [sp, #0]
 8012676:	f44f 7300 	mov.w	r3, #512	; 0x200
 801267a:	462a      	mov	r2, r5
 801267c:	493f      	ldr	r1, [pc, #252]	; (801277c <app_init+0x314>)
 801267e:	4840      	ldr	r0, [pc, #256]	; (8012780 <app_init+0x318>)
 8012680:	f7fc fdb4 	bl	800f1ec <rt_thread_create>
 8012684:	4b3f      	ldr	r3, [pc, #252]	; (8012784 <app_init+0x31c>)
 8012686:	6018      	str	r0, [r3, #0]
	thd_delayBlue=rt_thread_create("delayBlue", (void *)thread_delayBlue, 0, 512, 10, 10);
 8012688:	9401      	str	r4, [sp, #4]
 801268a:	9400      	str	r4, [sp, #0]
 801268c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012690:	462a      	mov	r2, r5
 8012692:	493d      	ldr	r1, [pc, #244]	; (8012788 <app_init+0x320>)
 8012694:	483d      	ldr	r0, [pc, #244]	; (801278c <app_init+0x324>)
 8012696:	f7fc fda9 	bl	800f1ec <rt_thread_create>
 801269a:	4b3d      	ldr	r3, [pc, #244]	; (8012790 <app_init+0x328>)
 801269c:	6018      	str	r0, [r3, #0]

	thd_lcdshow=rt_thread_create("lcdshow", (void *)thread_lcdshow, 0, 512, 10, 10);
 801269e:	9401      	str	r4, [sp, #4]
 80126a0:	9400      	str	r4, [sp, #0]
 80126a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126a6:	462a      	mov	r2, r5
 80126a8:	493a      	ldr	r1, [pc, #232]	; (8012794 <app_init+0x32c>)
 80126aa:	483b      	ldr	r0, [pc, #236]	; (8012798 <app_init+0x330>)
 80126ac:	f7fc fd9e 	bl	800f1ec <rt_thread_create>
 80126b0:	4c3a      	ldr	r4, [pc, #232]	; (801279c <app_init+0x334>)
 80126b2:	6020      	str	r0, [r4, #0]

	   



    rt_thread_startup(thd_cmdchoose);//启动命令选择线程
 80126b4:	4630      	mov	r0, r6
 80126b6:	f7fc fe87 	bl	800f3c8 <rt_thread_startup>
	rt_thread_startup(thd_lcdshow);//启动LCD屏自动更新线程
 80126ba:	6820      	ldr	r0, [r4, #0]
 80126bc:	f7fc fe84 	bl	800f3c8 <rt_thread_startup>
}
 80126c0:	b002      	add	sp, #8
 80126c2:	bd70      	pop	{r4, r5, r6, pc}
 80126c4:	0801436c 	.word	0x0801436c
 80126c8:	080143a0 	.word	0x080143a0
 80126cc:	080143b8 	.word	0x080143b8
 80126d0:	080143c0 	.word	0x080143c0
 80126d4:	080143d0 	.word	0x080143d0
 80126d8:	080143e4 	.word	0x080143e4
 80126dc:	080143f0 	.word	0x080143f0
 80126e0:	20007358 	.word	0x20007358
 80126e4:	080143fc 	.word	0x080143fc
 80126e8:	2000734c 	.word	0x2000734c
 80126ec:	08014400 	.word	0x08014400
 80126f0:	20007324 	.word	0x20007324
 80126f4:	08014404 	.word	0x08014404
 80126f8:	20007344 	.word	0x20007344
 80126fc:	080116c1 	.word	0x080116c1
 8012700:	0801440c 	.word	0x0801440c
 8012704:	0800e5dd 	.word	0x0800e5dd
 8012708:	08014418 	.word	0x08014418
 801270c:	2000733c 	.word	0x2000733c
 8012710:	08010999 	.word	0x08010999
 8012714:	08014424 	.word	0x08014424
 8012718:	20007360 	.word	0x20007360
 801271c:	080128b9 	.word	0x080128b9
 8012720:	08014430 	.word	0x08014430
 8012724:	20007348 	.word	0x20007348
 8012728:	08011fa9 	.word	0x08011fa9
 801272c:	0801443c 	.word	0x0801443c
 8012730:	20007334 	.word	0x20007334
 8012734:	0800fbd5 	.word	0x0800fbd5
 8012738:	08014448 	.word	0x08014448
 801273c:	20007350 	.word	0x20007350
 8012740:	0800fdd9 	.word	0x0800fdd9
 8012744:	08014454 	.word	0x08014454
 8012748:	20007364 	.word	0x20007364
 801274c:	08012ca5 	.word	0x08012ca5
 8012750:	08014460 	.word	0x08014460
 8012754:	20007b68 	.word	0x20007b68
 8012758:	08012c4d 	.word	0x08012c4d
 801275c:	0801446c 	.word	0x0801446c
 8012760:	2000732c 	.word	0x2000732c
 8012764:	08012861 	.word	0x08012861
 8012768:	08014478 	.word	0x08014478
 801276c:	20007340 	.word	0x20007340
 8012770:	08011639 	.word	0x08011639
 8012774:	08014484 	.word	0x08014484
 8012778:	20007338 	.word	0x20007338
 801277c:	08011e85 	.word	0x08011e85
 8012780:	08014490 	.word	0x08014490
 8012784:	20007354 	.word	0x20007354
 8012788:	08011f59 	.word	0x08011f59
 801278c:	0801449c 	.word	0x0801449c
 8012790:	20007330 	.word	0x20007330
 8012794:	0800f455 	.word	0x0800f455
 8012798:	080144a8 	.word	0x080144a8
 801279c:	20007328 	.word	0x20007328

080127a0 <useremuart_frame>:
	static uint16_t length = 1;
	uint16_t ret_val;
	
	
	//（1）若未接收到数据或者未遇到帧头，则退出并返回0  帧头长度为两个字节
	if(((index-1) == 0 && ch != emuartFrameHead[0]) ||
 80127a0:	4b17      	ldr	r3, [pc, #92]	; (8012800 <useremuart_frame+0x60>)
 80127a2:	881b      	ldrh	r3, [r3, #0]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d012      	beq.n	80127ce <useremuart_frame+0x2e>
 80127a8:	2b02      	cmp	r3, #2
 80127aa:	d019      	beq.n	80127e0 <useremuart_frame+0x40>
{
 80127ac:	b410      	push	{r4}
		length = 1;
		ret_val = 0;     //接收数据错误
		goto uecom_recv_exit;
	}
	//（2）正确接收到了帧头，继续执行，将数据存入data数组
	data[(index++)-1] = ch;
 80127ae:	1c5a      	adds	r2, r3, #1
 80127b0:	b292      	uxth	r2, r2
 80127b2:	4c13      	ldr	r4, [pc, #76]	; (8012800 <useremuart_frame+0x60>)
 80127b4:	8022      	strh	r2, [r4, #0]
 80127b6:	3b01      	subs	r3, #1
 80127b8:	54c8      	strb	r0, [r1, r3]
	//printf("%d",index);
	//（3）当获取到第四个数据时，求出有效数据长度


	if((index-1) == 3)
 80127ba:	2a04      	cmp	r2, #4
 80127bc:	d013      	beq.n	80127e6 <useremuart_frame+0x46>
	{
		//printf("长度正确赋予\n");
		length = data[2];
	}
	//判断数据是否接收完毕，接收完毕退出组帧
	if(index==data[2]+4)
 80127be:	788b      	ldrb	r3, [r1, #2]
 80127c0:	3304      	adds	r3, #4
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d013      	beq.n	80127ee <useremuart_frame+0x4e>
		ret_val = (length+3); //返回有效数据长度
		length=1;
		//data[(length-1)] = 0; //令数组长度为0
		goto uecom_recv_exit;
	}
	ret_val = 0;
 80127c6:	2000      	movs	r0, #0
	goto uecom_recv_exit;
uecom_recv_exit:
    return ret_val;
 80127c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127cc:	4770      	bx	lr
	if(((index-1) == 0 && ch != emuartFrameHead[0]) ||
 80127ce:	28a5      	cmp	r0, #165	; 0xa5
 80127d0:	d0ea      	beq.n	80127a8 <useremuart_frame+0x8>
		index = 1;
 80127d2:	2301      	movs	r3, #1
 80127d4:	4a0a      	ldr	r2, [pc, #40]	; (8012800 <useremuart_frame+0x60>)
 80127d6:	8013      	strh	r3, [r2, #0]
		length = 1;
 80127d8:	4a0a      	ldr	r2, [pc, #40]	; (8012804 <useremuart_frame+0x64>)
 80127da:	8013      	strh	r3, [r2, #0]
		ret_val = 0;     //接收数据错误
 80127dc:	2000      	movs	r0, #0
 80127de:	4770      	bx	lr
			((index-1) == 1 && ch != emuartFrameHead[1]))
 80127e0:	285a      	cmp	r0, #90	; 0x5a
 80127e2:	d1f6      	bne.n	80127d2 <useremuart_frame+0x32>
 80127e4:	e7e2      	b.n	80127ac <useremuart_frame+0xc>
		length = data[2];
 80127e6:	7888      	ldrb	r0, [r1, #2]
 80127e8:	4b06      	ldr	r3, [pc, #24]	; (8012804 <useremuart_frame+0x64>)
 80127ea:	8018      	strh	r0, [r3, #0]
 80127ec:	e7e7      	b.n	80127be <useremuart_frame+0x1e>
		index = 1;
 80127ee:	2201      	movs	r2, #1
 80127f0:	4b03      	ldr	r3, [pc, #12]	; (8012800 <useremuart_frame+0x60>)
 80127f2:	801a      	strh	r2, [r3, #0]
		ret_val = (length+3); //返回有效数据长度
 80127f4:	4b03      	ldr	r3, [pc, #12]	; (8012804 <useremuart_frame+0x64>)
 80127f6:	8818      	ldrh	r0, [r3, #0]
 80127f8:	3003      	adds	r0, #3
 80127fa:	b280      	uxth	r0, r0
		length=1;
 80127fc:	801a      	strh	r2, [r3, #0]
		goto uecom_recv_exit;
 80127fe:	e7e3      	b.n	80127c8 <useremuart_frame+0x28>
 8012800:	200040a8 	.word	0x200040a8
 8012804:	200040aa 	.word	0x200040aa

08012808 <USART2_IRQHandler>:
{
 8012808:	b500      	push	{lr}
 801280a:	b083      	sub	sp, #12
    DISABLE_INTERRUPTS;      //关总中断
 801280c:	b672      	cpsid	i
    if(!uart_get_re_int(UART_User)) goto UART_User_Handler_EXIT;
 801280e:	2002      	movs	r0, #2
 8012810:	f7ff fda8 	bl	8012364 <uart_get_re_int>
 8012814:	b918      	cbnz	r0, 801281e <USART2_IRQHandler+0x16>
    ENABLE_INTERRUPTS;
 8012816:	b662      	cpsie	i
}
 8012818:	b003      	add	sp, #12
 801281a:	f85d fb04 	ldr.w	pc, [sp], #4
    ch = uart_re1(UART_User,&flag);        //调用接收一个字节的函数
 801281e:	f10d 0107 	add.w	r1, sp, #7
 8012822:	2002      	movs	r0, #2
 8012824:	f7ff fd56 	bl	80122d4 <uart_re1>
    if(!flag) goto UART_User_Handler_EXIT; //实际未收到数据，退出
 8012828:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d0f2      	beq.n	8012816 <USART2_IRQHandler+0xe>
       gcRecvLen =useremuart_frame(ch,(uint8_t*)gcRecvBuf);//对接收数据组帧，返回0组帧未成功，返回长度组帧成功。
 8012830:	4908      	ldr	r1, [pc, #32]	; (8012854 <USART2_IRQHandler+0x4c>)
 8012832:	f7ff ffb5 	bl	80127a0 <useremuart_frame>
 8012836:	4b08      	ldr	r3, [pc, #32]	; (8012858 <USART2_IRQHandler+0x50>)
 8012838:	8018      	strh	r0, [r3, #0]
       if (gcRecvLen == 0) goto UART_User_Handler_EXIT; 
 801283a:	881b      	ldrh	r3, [r3, #0]
 801283c:	b29b      	uxth	r3, r3
 801283e:	2b00      	cmp	r3, #0
 8012840:	d0e9      	beq.n	8012816 <USART2_IRQHandler+0xe>
       rt_event_send(EventWord,CMD_CHOOSE_EVENT);//数据接收完成，对命令选择事件置位
 8012842:	2102      	movs	r1, #2
 8012844:	4b05      	ldr	r3, [pc, #20]	; (801285c <USART2_IRQHandler+0x54>)
 8012846:	6818      	ldr	r0, [r3, #0]
 8012848:	f7fd fe83 	bl	8010552 <rt_event_send>
        gcRecvLen = 0;   //帧已经使用完毕，下次若收到一个字节，可以继续组帧
 801284c:	4b02      	ldr	r3, [pc, #8]	; (8012858 <USART2_IRQHandler+0x50>)
 801284e:	2200      	movs	r2, #0
 8012850:	801a      	strh	r2, [r3, #0]
 8012852:	e7e0      	b.n	8012816 <USART2_IRQHandler+0xe>
 8012854:	20007368 	.word	0x20007368
 8012858:	2000735c 	.word	0x2000735c
 801285c:	20007358 	.word	0x20007358

08012860 <thread_mutexRed>:
//参数说明：无
//功能概要：每5秒红灯反转
//内部调用：无
//======================================================================
void thread_mutexRed()
{
 8012860:	b508      	push	{r3, lr}
    //（1）======申明局部变量==========================================
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 8012862:	2201      	movs	r2, #1
 8012864:	4611      	mov	r1, r2
 8012866:	f240 1007 	movw	r0, #263	; 0x107
 801286a:	f7fd fc43 	bl	80100f4 <gpio_init>
    uart_send_string(UART_User,(void *)"第一次进入红灯线程！\r\n");
 801286e:	490f      	ldr	r1, [pc, #60]	; (80128ac <thread_mutexRed+0x4c>)
 8012870:	2002      	movs	r0, #2
 8012872:	f7ff fd19 	bl	80122a8 <uart_send_string>
    //（2）======主循环（开始）==========================================
    while (1)
    {
    	//1.锁住单色灯互斥量
    	rt_mutex_take(mutex,RT_WAITING_FOREVER);
 8012876:	4c0e      	ldr	r4, [pc, #56]	; (80128b0 <thread_mutexRed+0x50>)
 8012878:	f04f 31ff 	mov.w	r1, #4294967295
 801287c:	6820      	ldr	r0, [r4, #0]
 801287e:	f7fd fd82 	bl	8010386 <rt_mutex_take>
        uart_send_string(UART_User,(void *)"\r\n锁定单色互斥量成功！红灯反转，延时5秒\r\n");
 8012882:	490c      	ldr	r1, [pc, #48]	; (80128b4 <thread_mutexRed+0x54>)
 8012884:	2002      	movs	r0, #2
 8012886:	f7ff fd0f 	bl	80122a8 <uart_send_string>
        //2.红灯变亮
        gpio_reverse(LIGHT_RED);
 801288a:	f240 1007 	movw	r0, #263	; 0x107
 801288e:	f7fd fc9d 	bl	80101cc <gpio_reverse>
        //3.延时5秒
        delay_ms(5000);
 8012892:	f241 3088 	movw	r0, #5000	; 0x1388
 8012896:	f7fc fd6f 	bl	800f378 <rt_thread_delay>
    	//4.红灯变暗
    	gpio_reverse(LIGHT_RED);
 801289a:	f240 1007 	movw	r0, #263	; 0x107
 801289e:	f7fd fc95 	bl	80101cc <gpio_reverse>
        //5.解锁单色灯互斥量
		rt_mutex_release(mutex);
 80128a2:	6820      	ldr	r0, [r4, #0]
 80128a4:	f7fd fdfb 	bl	801049e <rt_mutex_release>
 80128a8:	e7e5      	b.n	8012876 <thread_mutexRed+0x16>
 80128aa:	bf00      	nop
 80128ac:	080144b0 	.word	0x080144b0
 80128b0:	20007344 	.word	0x20007344
 80128b4:	080144c8 	.word	0x080144c8

080128b8 <thread_messagerecv>:
//参数说明：无
//功能概要：如果队列中有消息，则打印出相关的相应的消息，并此时消息队列中消息的个数
//内部调用：无
//======================================================================
void thread_messagerecv()
{
 80128b8:	b510      	push	{r4, lr}
 80128ba:	b082      	sub	sp, #8
	//（1）======申明局部变量==========================================
    uint8_t temp[8];
	char *cnt;
	uint8_t recvState;
	printf("第一次进入消息接收线程!\r\n");
 80128bc:	4824      	ldr	r0, [pc, #144]	; (8012950 <thread_messagerecv+0x98>)
 80128be:	f7fc fba3 	bl	800f008 <myprintf>
	gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 80128c2:	2201      	movs	r2, #1
 80128c4:	4611      	mov	r1, r2
 80128c6:	f240 1009 	movw	r0, #265	; 0x109
 80128ca:	f7fd fc13 	bl	80100f4 <gpio_init>
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 80128ce:	2201      	movs	r2, #1
 80128d0:	4611      	mov	r1, r2
 80128d2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80128d6:	f7fd fc0d 	bl	80100f4 <gpio_init>
    gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_OFF);
 80128da:	2201      	movs	r2, #1
 80128dc:	4611      	mov	r1, r2
 80128de:	f240 1007 	movw	r0, #263	; 0x107
 80128e2:	f7fd fc07 	bl	80100f4 <gpio_init>
	 //（2）======主循环（开始）==========================================
    while (1)
    {
	    //等待消息
		recvState=mq_recv(mq,&temp,sizeof(temp),RT_WAITING_FOREVER);
 80128e6:	f04f 33ff 	mov.w	r3, #4294967295
 80128ea:	2208      	movs	r2, #8
 80128ec:	4669      	mov	r1, sp
 80128ee:	4819      	ldr	r0, [pc, #100]	; (8012954 <thread_messagerecv+0x9c>)
 80128f0:	6800      	ldr	r0, [r0, #0]
 80128f2:	f7fd ffa5 	bl	8010840 <rt_mq_recv>
 80128f6:	b2c0      	uxtb	r0, r0

		if(recvState==0)  //若获得消息
 80128f8:	2800      	cmp	r0, #0
 80128fa:	d1f4      	bne.n	80128e6 <thread_messagerecv+0x2e>
       	{
			cnt = rt_malloc(1);//申请内存  
 80128fc:	2001      	movs	r0, #1
 80128fe:	f000 f8a7 	bl	8012a50 <rt_malloc>
 8012902:	4604      	mov	r4, r0
    	   	rt_sprintf(cnt,"%d",mq->entry);//entry队列中的消息索引
 8012904:	4b13      	ldr	r3, [pc, #76]	; (8012954 <thread_messagerecv+0x9c>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801290a:	4913      	ldr	r1, [pc, #76]	; (8012958 <thread_messagerecv+0xa0>)
 801290c:	f7fe fe4c 	bl	80115a8 <rt_sprintf>
    	   	uart_send_string(UART_User,(void*)"消息队列中消息数=");
 8012910:	4912      	ldr	r1, [pc, #72]	; (801295c <thread_messagerecv+0xa4>)
 8012912:	2002      	movs	r0, #2
 8012914:	f7ff fcc8 	bl	80122a8 <uart_send_string>
    	   	uart_send_string(UART_User,(uint8_t *)cnt);
 8012918:	4621      	mov	r1, r4
 801291a:	2002      	movs	r0, #2
 801291c:	f7ff fcc4 	bl	80122a8 <uart_send_string>
    	   	uart_send_string(UART_User,(void *) "\r\n");
 8012920:	4c0f      	ldr	r4, [pc, #60]	; (8012960 <thread_messagerecv+0xa8>)
 8012922:	4621      	mov	r1, r4
 8012924:	2002      	movs	r0, #2
 8012926:	f7ff fcbf 	bl	80122a8 <uart_send_string>
    	   	uart_send_string(UART_User,(void*) "当前取出的消息=");
 801292a:	490e      	ldr	r1, [pc, #56]	; (8012964 <thread_messagerecv+0xac>)
 801292c:	2002      	movs	r0, #2
 801292e:	f7ff fcbb 	bl	80122a8 <uart_send_string>
    	   	uart_sendN(UART_User,8,temp);
 8012932:	466a      	mov	r2, sp
 8012934:	2108      	movs	r1, #8
 8012936:	2002      	movs	r0, #2
 8012938:	f7ff fc9c 	bl	8012274 <uart_sendN>
    	   	uart_send_string(UART_User,(void *) "\r\n");
 801293c:	4621      	mov	r1, r4
 801293e:	2002      	movs	r0, #2
 8012940:	f7ff fcb2 	bl	80122a8 <uart_send_string>
    	   	delay_ms(1000);                //延迟，为了演示消息堆积的情况
 8012944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012948:	f7fc fd16 	bl	800f378 <rt_thread_delay>
 801294c:	e7cb      	b.n	80128e6 <thread_messagerecv+0x2e>
 801294e:	bf00      	nop
 8012950:	080144f4 	.word	0x080144f4
 8012954:	2000734c 	.word	0x2000734c
 8012958:	08014510 	.word	0x08014510
 801295c:	08014514 	.word	0x08014514
 8012960:	0801318c 	.word	0x0801318c
 8012964:	08014528 	.word	0x08014528

08012968 <plug_holes>:
    RT_ASSERT((rt_uint8_t *)mem >= heap_ptr);
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)heap_end);
    RT_ASSERT(mem->used == 0);

    /* plug hole forward */
    nmem = (struct heap_mem *)&heap_ptr[mem->next];
 8012968:	4b16      	ldr	r3, [pc, #88]	; (80129c4 <plug_holes+0x5c>)
 801296a:	6819      	ldr	r1, [r3, #0]
 801296c:	6842      	ldr	r2, [r0, #4]
 801296e:	440a      	add	r2, r1
    if (mem != nmem &&
 8012970:	4290      	cmp	r0, r2
 8012972:	d00f      	beq.n	8012994 <plug_holes+0x2c>
        nmem->used == 0 &&
 8012974:	8853      	ldrh	r3, [r2, #2]
    if (mem != nmem &&
 8012976:	b96b      	cbnz	r3, 8012994 <plug_holes+0x2c>
        (rt_uint8_t *)nmem != (rt_uint8_t *)heap_end)
 8012978:	4b13      	ldr	r3, [pc, #76]	; (80129c8 <plug_holes+0x60>)
 801297a:	681b      	ldr	r3, [r3, #0]
        nmem->used == 0 &&
 801297c:	4293      	cmp	r3, r2
 801297e:	d009      	beq.n	8012994 <plug_holes+0x2c>
    {
        /* if mem->next is unused and not end of heap_ptr,
         * combine mem and mem->next
         */
        if (lfree == nmem)
 8012980:	4b12      	ldr	r3, [pc, #72]	; (80129cc <plug_holes+0x64>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4293      	cmp	r3, r2
 8012986:	d016      	beq.n	80129b6 <plug_holes+0x4e>
        {
            lfree = mem;
        }
        mem->next = nmem->next;
 8012988:	6853      	ldr	r3, [r2, #4]
 801298a:	6043      	str	r3, [r0, #4]
        ((struct heap_mem *)&heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - heap_ptr;
 801298c:	6853      	ldr	r3, [r2, #4]
 801298e:	440b      	add	r3, r1
 8012990:	1a42      	subs	r2, r0, r1
 8012992:	609a      	str	r2, [r3, #8]
    }

    /* plug hole backward */
    pmem = (struct heap_mem *)&heap_ptr[mem->prev];
 8012994:	6883      	ldr	r3, [r0, #8]
 8012996:	440b      	add	r3, r1
    if (pmem != mem && pmem->used == 0)
 8012998:	4298      	cmp	r0, r3
 801299a:	d00b      	beq.n	80129b4 <plug_holes+0x4c>
 801299c:	885a      	ldrh	r2, [r3, #2]
 801299e:	b94a      	cbnz	r2, 80129b4 <plug_holes+0x4c>
    {
        /* if mem->prev is unused, combine mem and mem->prev */
        if (lfree == mem)
 80129a0:	4a0a      	ldr	r2, [pc, #40]	; (80129cc <plug_holes+0x64>)
 80129a2:	6812      	ldr	r2, [r2, #0]
 80129a4:	4282      	cmp	r2, r0
 80129a6:	d009      	beq.n	80129bc <plug_holes+0x54>
        {
            lfree = pmem;
        }
        pmem->next = mem->next;
 80129a8:	6842      	ldr	r2, [r0, #4]
 80129aa:	605a      	str	r2, [r3, #4]
        ((struct heap_mem *)&heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - heap_ptr;
 80129ac:	6842      	ldr	r2, [r0, #4]
 80129ae:	440a      	add	r2, r1
 80129b0:	1a5b      	subs	r3, r3, r1
 80129b2:	6093      	str	r3, [r2, #8]
    }
}
 80129b4:	4770      	bx	lr
            lfree = mem;
 80129b6:	4b05      	ldr	r3, [pc, #20]	; (80129cc <plug_holes+0x64>)
 80129b8:	6018      	str	r0, [r3, #0]
 80129ba:	e7e5      	b.n	8012988 <plug_holes+0x20>
            lfree = pmem;
 80129bc:	4a03      	ldr	r2, [pc, #12]	; (80129cc <plug_holes+0x64>)
 80129be:	6013      	str	r3, [r2, #0]
 80129c0:	e7f2      	b.n	80129a8 <plug_holes+0x40>
 80129c2:	bf00      	nop
 80129c4:	200072e4 	.word	0x200072e4
 80129c8:	200072e0 	.word	0x200072e0
 80129cc:	20007308 	.word	0x20007308

080129d0 <rt_system_heap_init>:
 *
 * @param begin_addr the beginning address of system heap memory.
 * @param end_addr the end address of system heap memory.
 */
void rt_system_heap_init(void *begin_addr, void *end_addr)
{
 80129d0:	b570      	push	{r4, r5, r6, lr}
    struct heap_mem *mem;
    rt_uint32_t begin_align = RT_ALIGN((rt_uint32_t)begin_addr, RT_ALIGN_SIZE);
    rt_uint32_t end_align = RT_ALIGN_DOWN((rt_uint32_t)end_addr, RT_ALIGN_SIZE);
 80129d2:	f021 0303 	bic.w	r3, r1, #3

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* alignment addr */
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
 80129d6:	2b18      	cmp	r3, #24
 80129d8:	d906      	bls.n	80129e8 <rt_system_heap_init+0x18>
 80129da:	1cc4      	adds	r4, r0, #3
 80129dc:	f024 0403 	bic.w	r4, r4, #3
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= begin_align))
 80129e0:	f1a3 0218 	sub.w	r2, r3, #24
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
 80129e4:	42a2      	cmp	r2, r4
 80129e6:	d205      	bcs.n	80129f4 <rt_system_heap_init+0x24>
        /* calculate the aligned memory size */
        mem_size_aligned = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
    }
    else
    {
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
 80129e8:	460a      	mov	r2, r1
 80129ea:	4601      	mov	r1, r0
 80129ec:	4811      	ldr	r0, [pc, #68]	; (8012a34 <rt_system_heap_init+0x64>)
 80129ee:	f7fe fdeb 	bl	80115c8 <rt_kprintf>

    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);

    /* initialize the lowest-free pointer to the start of the heap */
    lfree = (struct heap_mem *)heap_ptr;
}
 80129f2:	bd70      	pop	{r4, r5, r6, pc}
        mem_size_aligned = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
 80129f4:	1b1b      	subs	r3, r3, r4
 80129f6:	f1a3 0118 	sub.w	r1, r3, #24
 80129fa:	4a0f      	ldr	r2, [pc, #60]	; (8012a38 <rt_system_heap_init+0x68>)
 80129fc:	6011      	str	r1, [r2, #0]
    heap_ptr = (rt_uint8_t *)begin_align;
 80129fe:	4d0f      	ldr	r5, [pc, #60]	; (8012a3c <rt_system_heap_init+0x6c>)
 8012a00:	602c      	str	r4, [r5, #0]
    mem->magic = HEAP_MAGIC;
 8012a02:	f44f 52f5 	mov.w	r2, #7840	; 0x1ea0
 8012a06:	8022      	strh	r2, [r4, #0]
    mem->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
 8012a08:	f1a3 010c 	sub.w	r1, r3, #12
 8012a0c:	6061      	str	r1, [r4, #4]
    mem->prev  = 0;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	60a3      	str	r3, [r4, #8]
    mem->used  = 0;
 8012a12:	8063      	strh	r3, [r4, #2]
    heap_end        = (struct heap_mem *)&heap_ptr[mem->next];
 8012a14:	1860      	adds	r0, r4, r1
 8012a16:	4e0a      	ldr	r6, [pc, #40]	; (8012a40 <rt_system_heap_init+0x70>)
 8012a18:	6030      	str	r0, [r6, #0]
    heap_end->magic = HEAP_MAGIC;
 8012a1a:	5262      	strh	r2, [r4, r1]
    heap_end->used  = 1;
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	8042      	strh	r2, [r0, #2]
    heap_end->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
 8012a20:	6041      	str	r1, [r0, #4]
    heap_end->prev  = mem_size_aligned + SIZEOF_STRUCT_MEM;
 8012a22:	6081      	str	r1, [r0, #8]
    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);
 8012a24:	4907      	ldr	r1, [pc, #28]	; (8012a44 <rt_system_heap_init+0x74>)
 8012a26:	4808      	ldr	r0, [pc, #32]	; (8012a48 <rt_system_heap_init+0x78>)
 8012a28:	f7fd fbf4 	bl	8010214 <rt_sem_init>
    lfree = (struct heap_mem *)heap_ptr;
 8012a2c:	682a      	ldr	r2, [r5, #0]
 8012a2e:	4b07      	ldr	r3, [pc, #28]	; (8012a4c <rt_system_heap_init+0x7c>)
 8012a30:	601a      	str	r2, [r3, #0]
 8012a32:	e7de      	b.n	80129f2 <rt_system_heap_init+0x22>
 8012a34:	0801458c 	.word	0x0801458c
 8012a38:	20007310 	.word	0x20007310
 8012a3c:	200072e4 	.word	0x200072e4
 8012a40:	200072e0 	.word	0x200072e0
 8012a44:	08014584 	.word	0x08014584
 8012a48:	200072e8 	.word	0x200072e8
 8012a4c:	20007308 	.word	0x20007308

08012a50 <rt_malloc>:
void *rt_malloc(rt_size_t size)
{
    rt_size_t ptr, ptr2;
    struct heap_mem *mem, *mem2;

    if (size == 0)
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d079      	beq.n	8012b48 <rt_malloc+0xf8>
{
 8012a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a56:	4605      	mov	r5, r0
        return RT_NULL;

    RT_DEBUG_NOT_IN_INTERRUPT;

    if (size != RT_ALIGN(size, RT_ALIGN_SIZE))
 8012a58:	3503      	adds	r5, #3
 8012a5a:	f025 0503 	bic.w	r5, r5, #3
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d\n", size));

    /* alignment size */
    size = RT_ALIGN(size, RT_ALIGN_SIZE);

    if (size > mem_size_aligned)
 8012a5e:	4b3c      	ldr	r3, [pc, #240]	; (8012b50 <rt_malloc+0x100>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	429d      	cmp	r5, r3
 8012a64:	d872      	bhi.n	8012b4c <rt_malloc+0xfc>

        return RT_NULL;
    }

    /* every data block must be at least MIN_SIZE_ALIGNED long */
    if (size < MIN_SIZE_ALIGNED)
 8012a66:	2d0b      	cmp	r5, #11
 8012a68:	d800      	bhi.n	8012a6c <rt_malloc+0x1c>
        size = MIN_SIZE_ALIGNED;
 8012a6a:	250c      	movs	r5, #12

    /* take memory semaphore */
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
 8012a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8012a70:	4838      	ldr	r0, [pc, #224]	; (8012b54 <rt_malloc+0x104>)
 8012a72:	f7fd fbf0 	bl	8010256 <rt_sem_take>

    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
 8012a76:	4b38      	ldr	r3, [pc, #224]	; (8012b58 <rt_malloc+0x108>)
 8012a78:	681e      	ldr	r6, [r3, #0]
 8012a7a:	4b38      	ldr	r3, [pc, #224]	; (8012b5c <rt_malloc+0x10c>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	1b9b      	subs	r3, r3, r6
 8012a80:	e01f      	b.n	8012ac2 <rt_malloc+0x72>
                 * take care of this).
                 * -> near fit or excact fit: do not split, no mem2 creation
                 * also can't move mem->next directly behind mem, since mem->next
                 * will always be used at this point!
                 */
                mem->used = 1;
 8012a82:	2301      	movs	r3, #1
 8012a84:	8063      	strh	r3, [r4, #2]
#ifdef RT_MEM_STATS
                used_mem += mem->next - ((rt_uint8_t *)mem - heap_ptr);
 8012a86:	1ba3      	subs	r3, r4, r6
 8012a88:	1ac3      	subs	r3, r0, r3
 8012a8a:	4a35      	ldr	r2, [pc, #212]	; (8012b60 <rt_malloc+0x110>)
 8012a8c:	6810      	ldr	r0, [r2, #0]
 8012a8e:	4403      	add	r3, r0
 8012a90:	6013      	str	r3, [r2, #0]
                if (max_mem < used_mem)
 8012a92:	4a34      	ldr	r2, [pc, #208]	; (8012b64 <rt_malloc+0x114>)
 8012a94:	6812      	ldr	r2, [r2, #0]
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d944      	bls.n	8012b24 <rt_malloc+0xd4>
                    max_mem = used_mem;
 8012a9a:	4a32      	ldr	r2, [pc, #200]	; (8012b64 <rt_malloc+0x114>)
 8012a9c:	6013      	str	r3, [r2, #0]
 8012a9e:	e041      	b.n	8012b24 <rt_malloc+0xd4>

            if (mem == lfree)
            {
                /* Find next free block after mem and update lowest free pointer */
                while (lfree->used && lfree != heap_end)
                    lfree = (struct heap_mem *)&heap_ptr[lfree->next];
 8012aa0:	685a      	ldr	r2, [r3, #4]
 8012aa2:	4b2d      	ldr	r3, [pc, #180]	; (8012b58 <rt_malloc+0x108>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	4a2c      	ldr	r2, [pc, #176]	; (8012b5c <rt_malloc+0x10c>)
 8012aaa:	6013      	str	r3, [r2, #0]
                while (lfree->used && lfree != heap_end)
 8012aac:	4b2b      	ldr	r3, [pc, #172]	; (8012b5c <rt_malloc+0x10c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	885a      	ldrh	r2, [r3, #2]
 8012ab2:	2a00      	cmp	r2, #0
 8012ab4:	d03d      	beq.n	8012b32 <rt_malloc+0xe2>
 8012ab6:	4a2c      	ldr	r2, [pc, #176]	; (8012b68 <rt_malloc+0x118>)
 8012ab8:	6812      	ldr	r2, [r2, #0]
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d1f0      	bne.n	8012aa0 <rt_malloc+0x50>
 8012abe:	e038      	b.n	8012b32 <rt_malloc+0xe2>
         ptr = ((struct heap_mem *)&heap_ptr[ptr])->next)
 8012ac0:	6863      	ldr	r3, [r4, #4]
         ptr < mem_size_aligned - size;
 8012ac2:	4a23      	ldr	r2, [pc, #140]	; (8012b50 <rt_malloc+0x100>)
 8012ac4:	6812      	ldr	r2, [r2, #0]
 8012ac6:	1b51      	subs	r1, r2, r5
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
 8012ac8:	4299      	cmp	r1, r3
 8012aca:	d938      	bls.n	8012b3e <rt_malloc+0xee>
        mem = (struct heap_mem *)&heap_ptr[ptr];
 8012acc:	18f4      	adds	r4, r6, r3
        if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
 8012ace:	8861      	ldrh	r1, [r4, #2]
 8012ad0:	2900      	cmp	r1, #0
 8012ad2:	d1f5      	bne.n	8012ac0 <rt_malloc+0x70>
 8012ad4:	6860      	ldr	r0, [r4, #4]
 8012ad6:	1ac1      	subs	r1, r0, r3
 8012ad8:	390c      	subs	r1, #12
 8012ada:	42a9      	cmp	r1, r5
 8012adc:	d3f0      	bcc.n	8012ac0 <rt_malloc+0x70>
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
 8012ade:	f105 0718 	add.w	r7, r5, #24
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
 8012ae2:	42b9      	cmp	r1, r7
 8012ae4:	d3cd      	bcc.n	8012a82 <rt_malloc+0x32>
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8012ae6:	18e9      	adds	r1, r5, r3
 8012ae8:	310c      	adds	r1, #12
                mem2       = (struct heap_mem *)&heap_ptr[ptr2];
 8012aea:	1870      	adds	r0, r6, r1
                mem2->magic = HEAP_MAGIC;
 8012aec:	f44f 57f5 	mov.w	r7, #7840	; 0x1ea0
 8012af0:	5277      	strh	r7, [r6, r1]
                mem2->used = 0;
 8012af2:	2700      	movs	r7, #0
 8012af4:	8047      	strh	r7, [r0, #2]
                mem2->next = mem->next;
 8012af6:	6867      	ldr	r7, [r4, #4]
 8012af8:	6047      	str	r7, [r0, #4]
                mem2->prev = ptr;
 8012afa:	6083      	str	r3, [r0, #8]
                mem->next = ptr2;
 8012afc:	6061      	str	r1, [r4, #4]
                mem->used = 1;
 8012afe:	2301      	movs	r3, #1
 8012b00:	8063      	strh	r3, [r4, #2]
                if (mem2->next != mem_size_aligned + SIZEOF_STRUCT_MEM)
 8012b02:	6843      	ldr	r3, [r0, #4]
 8012b04:	320c      	adds	r2, #12
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d001      	beq.n	8012b0e <rt_malloc+0xbe>
                    ((struct heap_mem *)&heap_ptr[mem2->next])->prev = ptr2;
 8012b0a:	4433      	add	r3, r6
 8012b0c:	6099      	str	r1, [r3, #8]
                used_mem += (size + SIZEOF_STRUCT_MEM);
 8012b0e:	4b14      	ldr	r3, [pc, #80]	; (8012b60 <rt_malloc+0x110>)
 8012b10:	681a      	ldr	r2, [r3, #0]
 8012b12:	4415      	add	r5, r2
 8012b14:	350c      	adds	r5, #12
 8012b16:	601d      	str	r5, [r3, #0]
                if (max_mem < used_mem)
 8012b18:	4b12      	ldr	r3, [pc, #72]	; (8012b64 <rt_malloc+0x114>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	429d      	cmp	r5, r3
 8012b1e:	d901      	bls.n	8012b24 <rt_malloc+0xd4>
                    max_mem = used_mem;
 8012b20:	4b10      	ldr	r3, [pc, #64]	; (8012b64 <rt_malloc+0x114>)
 8012b22:	601d      	str	r5, [r3, #0]
            mem->magic = HEAP_MAGIC;
 8012b24:	f44f 53f5 	mov.w	r3, #7840	; 0x1ea0
 8012b28:	8023      	strh	r3, [r4, #0]
            if (mem == lfree)
 8012b2a:	4b0c      	ldr	r3, [pc, #48]	; (8012b5c <rt_malloc+0x10c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	42a3      	cmp	r3, r4
 8012b30:	d0bc      	beq.n	8012aac <rt_malloc+0x5c>

                RT_ASSERT(((lfree == heap_end) || (!lfree->used)));
            }

            rt_sem_release(&heap_sem);
 8012b32:	4808      	ldr	r0, [pc, #32]	; (8012b54 <rt_malloc+0x104>)
 8012b34:	f7fd fbf5 	bl	8010322 <rt_sem_release>

            RT_OBJECT_HOOK_CALL(rt_malloc_hook,
                                (((void *)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM)), size));

            /* return the memory data except mem struct */
            return (rt_uint8_t *)mem + SIZEOF_STRUCT_MEM;
 8012b38:	f104 000c 	add.w	r0, r4, #12
 8012b3c:	e003      	b.n	8012b46 <rt_malloc+0xf6>
        }
    }

    rt_sem_release(&heap_sem);
 8012b3e:	4805      	ldr	r0, [pc, #20]	; (8012b54 <rt_malloc+0x104>)
 8012b40:	f7fd fbef 	bl	8010322 <rt_sem_release>

    return RT_NULL;
 8012b44:	2000      	movs	r0, #0
}
 8012b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return RT_NULL;
 8012b48:	2000      	movs	r0, #0
}
 8012b4a:	4770      	bx	lr
        return RT_NULL;
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	e7fa      	b.n	8012b46 <rt_malloc+0xf6>
 8012b50:	20007310 	.word	0x20007310
 8012b54:	200072e8 	.word	0x200072e8
 8012b58:	200072e4 	.word	0x200072e4
 8012b5c:	20007308 	.word	0x20007308
 8012b60:	20007314 	.word	0x20007314
 8012b64:	2000730c 	.word	0x2000730c
 8012b68:	200072e0 	.word	0x200072e0

08012b6c <rt_free>:
 */
void rt_free(void *rmem)
{
    struct heap_mem *mem;

    if (rmem == RT_NULL)
 8012b6c:	2800      	cmp	r0, #0
 8012b6e:	d042      	beq.n	8012bf6 <rt_free+0x8a>
{
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4604      	mov	r4, r0
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)heap_ptr &&
              (rt_uint8_t *)rmem < (rt_uint8_t *)heap_end);

    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));

    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
 8012b74:	4a20      	ldr	r2, [pc, #128]	; (8012bf8 <rt_free+0x8c>)
 8012b76:	6812      	ldr	r2, [r2, #0]
 8012b78:	4282      	cmp	r2, r0
 8012b7a:	d803      	bhi.n	8012b84 <rt_free+0x18>
        (rt_uint8_t *)rmem >= (rt_uint8_t *)heap_end)
 8012b7c:	4a1f      	ldr	r2, [pc, #124]	; (8012bfc <rt_free+0x90>)
 8012b7e:	6812      	ldr	r2, [r2, #0]
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
 8012b80:	4282      	cmp	r2, r0
 8012b82:	d800      	bhi.n	8012b86 <rt_free+0x1a>
#endif

    /* finally, see if prev or next are free also */
    plug_holes(mem);
    rt_sem_release(&heap_sem);
}
 8012b84:	bd38      	pop	{r3, r4, r5, pc}
    mem = (struct heap_mem *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
 8012b86:	f1a0 050c 	sub.w	r5, r0, #12
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
 8012b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8012b8e:	481c      	ldr	r0, [pc, #112]	; (8012c00 <rt_free+0x94>)
 8012b90:	f7fd fb61 	bl	8010256 <rt_sem_take>
    if (!mem->used || mem->magic != HEAP_MAGIC)
 8012b94:	f834 3c0a 	ldrh.w	r3, [r4, #-10]
 8012b98:	b123      	cbz	r3, 8012ba4 <rt_free+0x38>
 8012b9a:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
 8012b9e:	f5b3 5ff5 	cmp.w	r3, #7840	; 0x1ea0
 8012ba2:	d00a      	beq.n	8012bba <rt_free+0x4e>
        rt_kprintf("to free a bad data block:\n");
 8012ba4:	4817      	ldr	r0, [pc, #92]	; (8012c04 <rt_free+0x98>)
 8012ba6:	f7fe fd0f 	bl	80115c8 <rt_kprintf>
        rt_kprintf("mem: 0x%08x, used flag: %d, magic code: 0x%04x\n", mem, mem->used, mem->magic);
 8012baa:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
 8012bae:	f834 2c0a 	ldrh.w	r2, [r4, #-10]
 8012bb2:	4629      	mov	r1, r5
 8012bb4:	4814      	ldr	r0, [pc, #80]	; (8012c08 <rt_free+0x9c>)
 8012bb6:	f7fe fd07 	bl	80115c8 <rt_kprintf>
    mem->used  = 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	f824 3c0a 	strh.w	r3, [r4, #-10]
    mem->magic = HEAP_MAGIC;
 8012bc0:	f44f 53f5 	mov.w	r3, #7840	; 0x1ea0
 8012bc4:	f824 3c0c 	strh.w	r3, [r4, #-12]
    if (mem < lfree)
 8012bc8:	4b10      	ldr	r3, [pc, #64]	; (8012c0c <rt_free+0xa0>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	42ab      	cmp	r3, r5
 8012bce:	d901      	bls.n	8012bd4 <rt_free+0x68>
        lfree = mem;
 8012bd0:	4b0e      	ldr	r3, [pc, #56]	; (8012c0c <rt_free+0xa0>)
 8012bd2:	601d      	str	r5, [r3, #0]
    used_mem -= (mem->next - ((rt_uint8_t *)mem - heap_ptr));
 8012bd4:	4b08      	ldr	r3, [pc, #32]	; (8012bf8 <rt_free+0x8c>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	1aeb      	subs	r3, r5, r3
 8012bda:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8012bde:	1a9b      	subs	r3, r3, r2
 8012be0:	490b      	ldr	r1, [pc, #44]	; (8012c10 <rt_free+0xa4>)
 8012be2:	680a      	ldr	r2, [r1, #0]
 8012be4:	4413      	add	r3, r2
 8012be6:	600b      	str	r3, [r1, #0]
    plug_holes(mem);
 8012be8:	4628      	mov	r0, r5
 8012bea:	f7ff febd 	bl	8012968 <plug_holes>
    rt_sem_release(&heap_sem);
 8012bee:	4804      	ldr	r0, [pc, #16]	; (8012c00 <rt_free+0x94>)
 8012bf0:	f7fd fb97 	bl	8010322 <rt_sem_release>
 8012bf4:	e7c6      	b.n	8012b84 <rt_free+0x18>
 8012bf6:	4770      	bx	lr
 8012bf8:	200072e4 	.word	0x200072e4
 8012bfc:	200072e0 	.word	0x200072e0
 8012c00:	200072e8 	.word	0x200072e8
 8012c04:	08014538 	.word	0x08014538
 8012c08:	08014554 	.word	0x08014554
 8012c0c:	20007308 	.word	0x20007308
 8012c10:	20007314 	.word	0x20007314

08012c14 <rt_interrupt_enter>:
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
void rt_interrupt_enter(void)
{
 8012c14:	b508      	push	{r3, lr}
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
 8012c16:	f7fa fe13 	bl	800d840 <rt_hw_interrupt_disable>
    rt_interrupt_nest ++;
 8012c1a:	4a04      	ldr	r2, [pc, #16]	; (8012c2c <rt_interrupt_enter+0x18>)
 8012c1c:	7813      	ldrb	r3, [r2, #0]
 8012c1e:	3301      	adds	r3, #1
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	7013      	strb	r3, [r2, #0]
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
    rt_hw_interrupt_enable(level);
 8012c24:	f7fa fe10 	bl	800d848 <rt_hw_interrupt_enable>
}
 8012c28:	bd08      	pop	{r3, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20007c84 	.word	0x20007c84

08012c30 <rt_interrupt_leave>:
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
void rt_interrupt_leave(void)
{
 8012c30:	b508      	push	{r3, lr}
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
 8012c32:	f7fa fe05 	bl	800d840 <rt_hw_interrupt_disable>
    rt_interrupt_nest --;
 8012c36:	4a04      	ldr	r2, [pc, #16]	; (8012c48 <rt_interrupt_leave+0x18>)
 8012c38:	7813      	ldrb	r3, [r2, #0]
 8012c3a:	3b01      	subs	r3, #1
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	7013      	strb	r3, [r2, #0]
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
    rt_hw_interrupt_enable(level);
 8012c40:	f7fa fe02 	bl	800d848 <rt_hw_interrupt_enable>
}
 8012c44:	bd08      	pop	{r3, pc}
 8012c46:	bf00      	nop
 8012c48:	20007c84 	.word	0x20007c84

08012c4c <thread_mutexGreen>:
//参数说明：无
//功能概要：每10秒绿灯反转
//内部调用：无
//======================================================================
void thread_mutexGreen()
{
 8012c4c:	b508      	push	{r3, lr}
     //（1）======申明局部变量==========================================
    gpio_init(LIGHT_GREEN,GPIO_OUTPUT,LIGHT_OFF);
 8012c4e:	2201      	movs	r2, #1
 8012c50:	4611      	mov	r1, r2
 8012c52:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012c56:	f7fd fa4d 	bl	80100f4 <gpio_init>
    uart_send_string(UART_User,(void *)"第一次进入绿灯线程！\r\n");
 8012c5a:	490f      	ldr	r1, [pc, #60]	; (8012c98 <thread_mutexGreen+0x4c>)
 8012c5c:	2002      	movs	r0, #2
 8012c5e:	f7ff fb23 	bl	80122a8 <uart_send_string>
    //（2）======主循环（开始）==========================================
    while (1)
    {
    	//1.锁住单色灯互斥量
    	rt_mutex_take(mutex,RT_WAITING_FOREVER);
 8012c62:	4c0e      	ldr	r4, [pc, #56]	; (8012c9c <thread_mutexGreen+0x50>)
 8012c64:	f04f 31ff 	mov.w	r1, #4294967295
 8012c68:	6820      	ldr	r0, [r4, #0]
 8012c6a:	f7fd fb8c 	bl	8010386 <rt_mutex_take>
    	uart_send_string(UART_User,(void *)"\r\n锁定单色互斥量成功！绿灯反转，延时10秒\r\n");
 8012c6e:	490c      	ldr	r1, [pc, #48]	; (8012ca0 <thread_mutexGreen+0x54>)
 8012c70:	2002      	movs	r0, #2
 8012c72:	f7ff fb19 	bl	80122a8 <uart_send_string>
        //2.绿灯变亮
        gpio_reverse(LIGHT_GREEN);
 8012c76:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012c7a:	f7fd faa7 	bl	80101cc <gpio_reverse>
        //3.延时10秒
        delay_ms(10000);
 8012c7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8012c82:	f7fc fb79 	bl	800f378 <rt_thread_delay>
    	//4.绿灯变暗
    	gpio_reverse(LIGHT_GREEN);
 8012c86:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012c8a:	f7fd fa9f 	bl	80101cc <gpio_reverse>
    	//5.解锁单色灯互斥量
		rt_mutex_release(mutex);
 8012c8e:	6820      	ldr	r0, [r4, #0]
 8012c90:	f7fd fc05 	bl	801049e <rt_mutex_release>
 8012c94:	e7e5      	b.n	8012c62 <thread_mutexGreen+0x16>
 8012c96:	bf00      	nop
 8012c98:	080145c8 	.word	0x080145c8
 8012c9c:	20007344 	.word	0x20007344
 8012ca0:	080145e0 	.word	0x080145e0

08012ca4 <thread_mutexBlue>:
//参数说明：无
//功能概要：每20秒蓝灯反转
//内部调用：无
//======================================================================
void thread_mutexBlue()
{
 8012ca4:	b508      	push	{r3, lr}
    //（1）======申明局部变量==========================================
    gpio_init(LIGHT_BLUE,GPIO_OUTPUT,LIGHT_OFF);
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	4611      	mov	r1, r2
 8012caa:	f240 1009 	movw	r0, #265	; 0x109
 8012cae:	f7fd fa21 	bl	80100f4 <gpio_init>
    uart_send_string(UART_User,(void *)"第一次进入蓝灯线程！\r\n");
 8012cb2:	490f      	ldr	r1, [pc, #60]	; (8012cf0 <thread_mutexBlue+0x4c>)
 8012cb4:	2002      	movs	r0, #2
 8012cb6:	f7ff faf7 	bl	80122a8 <uart_send_string>
    //（2）======主循环（开始）==========================================
    while (1)
    {
    	//1.锁住单色灯互斥量
    	rt_mutex_take(mutex,RT_WAITING_FOREVER);
 8012cba:	4c0e      	ldr	r4, [pc, #56]	; (8012cf4 <thread_mutexBlue+0x50>)
 8012cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8012cc0:	6820      	ldr	r0, [r4, #0]
 8012cc2:	f7fd fb60 	bl	8010386 <rt_mutex_take>
		uart_send_string(UART_User,(void *)"\r\n锁定单色互斥量成功！蓝灯反转，延时20秒\r\n");
 8012cc6:	490c      	ldr	r1, [pc, #48]	; (8012cf8 <thread_mutexBlue+0x54>)
 8012cc8:	2002      	movs	r0, #2
 8012cca:	f7ff faed 	bl	80122a8 <uart_send_string>
		//2.蓝灯变亮
		gpio_reverse(LIGHT_BLUE);
 8012cce:	f240 1009 	movw	r0, #265	; 0x109
 8012cd2:	f7fd fa7b 	bl	80101cc <gpio_reverse>
		//3.延时20秒
		delay_ms(20000);
 8012cd6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012cda:	f7fc fb4d 	bl	800f378 <rt_thread_delay>
		//4.蓝灯变暗
		gpio_reverse(LIGHT_BLUE);
 8012cde:	f240 1009 	movw	r0, #265	; 0x109
 8012ce2:	f7fd fa73 	bl	80101cc <gpio_reverse>
		//5.解锁单色灯互斥量
		rt_mutex_release(mutex);
 8012ce6:	6820      	ldr	r0, [r4, #0]
 8012ce8:	f7fd fbd9 	bl	801049e <rt_mutex_release>
 8012cec:	e7e5      	b.n	8012cba <thread_mutexBlue+0x16>
 8012cee:	bf00      	nop
 8012cf0:	0801460c 	.word	0x0801460c
 8012cf4:	20007344 	.word	0x20007344
 8012cf8:	08014624 	.word	0x08014624

08012cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8012cfc:	f8df d038 	ldr.w	sp, [pc, #56]	; 8012d38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8012d00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8012d02:	e003      	b.n	8012d0c <LoopCopyDataInit>

08012d04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8012d04:	4b0d      	ldr	r3, [pc, #52]	; (8012d3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8012d06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8012d08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8012d0a:	3104      	adds	r1, #4

08012d0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8012d0c:	480c      	ldr	r0, [pc, #48]	; (8012d40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8012d0e:	4b0d      	ldr	r3, [pc, #52]	; (8012d44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8012d10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8012d12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8012d14:	d3f6      	bcc.n	8012d04 <CopyDataInit>
	ldr	r2, =_sbss
 8012d16:	4a0c      	ldr	r2, [pc, #48]	; (8012d48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8012d18:	e002      	b.n	8012d20 <LoopFillZerobss>

08012d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8012d1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8012d1c:	f842 3b04 	str.w	r3, [r2], #4

08012d20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8012d20:	4b0a      	ldr	r3, [pc, #40]	; (8012d4c <LoopForever+0x16>)
	cmp	r2, r3
 8012d22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8012d24:	d3f9      	bcc.n	8012d1a <FillZerobss>
	
	//* Call the clock system intitialization function.*/
    bl  SystemInit
 8012d26:	f7fc ff2d 	bl	800fb84 <SystemInit>
//  【CC_User 2.1】调用BIOS_API_Init函数
    bl  Vectors_Init    /*【固定】中断继承，.s文件仅修改此处*/
 8012d2a:	f7ff f98f 	bl	801204c <Vectors_Init>
/* Call static constructors */
//  【CC_User 2.2】1.需调用__libc_init_array，若不执行则C++类构造函数不会执行
//                2.__libc_init_array函数须在BIOS_API_Init之后执行
//                3.__libc_init_array函数的具体功能待进一步了解
    bl __libc_init_array
 8012d2e:	f000 f813 	bl	8012d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8012d32:	f7fd f81d 	bl	800fd70 <main>

08012d36 <LoopForever>:
	


LoopForever:
    b LoopForever
 8012d36:	e7fe      	b.n	8012d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8012d38:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8012d3c:	08014670 	.word	0x08014670
	ldr	r0, =_sdata
 8012d40:	20004000 	.word	0x20004000
	ldr	r3, =_edata
 8012d44:	200040ac 	.word	0x200040ac
	ldr	r2, =_sbss
 8012d48:	200040ac 	.word	0x200040ac
	ldr	r3, = _ebss
 8012d4c:	20007c88 	.word	0x20007c88

08012d50 <ADC1_IRQHandler>:
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
    //Infinite_Loop:
	//b	Infinite_Loop
	push  {lr}        //【20200812】修改.s文件，缺省中断，直接返回
 8012d50:	b500      	push	{lr}
    nop
 8012d52:	bf00      	nop
    pop   {pc}
 8012d54:	bd00      	pop	{pc}
	...

08012d58 <__libc_init_array>:
 8012d58:	b570      	push	{r4, r5, r6, lr}
 8012d5a:	4e0d      	ldr	r6, [pc, #52]	; (8012d90 <__libc_init_array+0x38>)
 8012d5c:	4c0d      	ldr	r4, [pc, #52]	; (8012d94 <__libc_init_array+0x3c>)
 8012d5e:	1ba4      	subs	r4, r4, r6
 8012d60:	10a4      	asrs	r4, r4, #2
 8012d62:	2500      	movs	r5, #0
 8012d64:	42a5      	cmp	r5, r4
 8012d66:	d109      	bne.n	8012d7c <__libc_init_array+0x24>
 8012d68:	4e0b      	ldr	r6, [pc, #44]	; (8012d98 <__libc_init_array+0x40>)
 8012d6a:	4c0c      	ldr	r4, [pc, #48]	; (8012d9c <__libc_init_array+0x44>)
 8012d6c:	f000 f82c 	bl	8012dc8 <_init>
 8012d70:	1ba4      	subs	r4, r4, r6
 8012d72:	10a4      	asrs	r4, r4, #2
 8012d74:	2500      	movs	r5, #0
 8012d76:	42a5      	cmp	r5, r4
 8012d78:	d105      	bne.n	8012d86 <__libc_init_array+0x2e>
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012d80:	4798      	blx	r3
 8012d82:	3501      	adds	r5, #1
 8012d84:	e7ee      	b.n	8012d64 <__libc_init_array+0xc>
 8012d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012d8a:	4798      	blx	r3
 8012d8c:	3501      	adds	r5, #1
 8012d8e:	e7f2      	b.n	8012d76 <__libc_init_array+0x1e>
 8012d90:	08014660 	.word	0x08014660
 8012d94:	08014660 	.word	0x08014660
 8012d98:	08014660 	.word	0x08014660
 8012d9c:	08014664 	.word	0x08014664

08012da0 <memcpy>:
 8012da0:	b510      	push	{r4, lr}
 8012da2:	1e43      	subs	r3, r0, #1
 8012da4:	440a      	add	r2, r1
 8012da6:	4291      	cmp	r1, r2
 8012da8:	d100      	bne.n	8012dac <memcpy+0xc>
 8012daa:	bd10      	pop	{r4, pc}
 8012dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012db4:	e7f7      	b.n	8012da6 <memcpy+0x6>

08012db6 <memset>:
 8012db6:	4402      	add	r2, r0
 8012db8:	4603      	mov	r3, r0
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d100      	bne.n	8012dc0 <memset+0xa>
 8012dbe:	4770      	bx	lr
 8012dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8012dc4:	e7f9      	b.n	8012dba <memset+0x4>
	...

08012dc8 <_init>:
 8012dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dca:	bf00      	nop
 8012dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dce:	bc08      	pop	{r3}
 8012dd0:	469e      	mov	lr, r3
 8012dd2:	4770      	bx	lr

08012dd4 <_fini>:
 8012dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dd6:	bf00      	nop
 8012dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dda:	bc08      	pop	{r3}
 8012ddc:	469e      	mov	lr, r3
 8012dde:	4770      	bx	lr
